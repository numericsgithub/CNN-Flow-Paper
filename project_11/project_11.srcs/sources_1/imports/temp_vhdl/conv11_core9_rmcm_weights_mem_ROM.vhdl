library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core9_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core9_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core9_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(0,0,-5,-8,-16,-4,10,-3,-1,-8,3,-8,14,2,-5,1,-11,10,-4,-3,-2,0,-8,-4,-2,-1,-3,20,1,-7,-14,4,4,-5,5,-1,7,-6,-2,16,-4,1,-10,5,2,-2,-15,12,6,-6,-4,18,0,3,1,6,-6,-2,2,-2,15,-24,-4,10),
	    1 => w(4,-15,6,-12,3,-1,9,0,12,3,31,-9,-11,-4,1,-1,10,4,10,1,-9,8,-6,15,16,-4,-9,-15,14,4,-5,7,0,5,-1,-11,2,0,1,6,-3,3,-2,6,1,12,-7,8,11,-23,-1,3,0,-3,4,9,-5,24,8,-2,2,-6,3,6),
	    2 => w(7,-1,-3,-1,7,-6,3,3,-7,1,7,-4,-9,-9,-3,3,-2,-1,2,-1,7,-15,-5,15,-1,-5,-7,9,0,-1,8,6,33,11,-11,2,-5,-5,3,1,-4,-6,7,7,-1,-6,-3,-2,-4,-3,4,2,-5,2,-10,1,-3,-6,-52,-11,4,2,7,9),
	    3 => w(-2,-4,3,-21,3,-3,-10,5,1,15,0,-1,4,6,3,15,3,0,1,-14,-6,-8,1,-5,3,-2,-3,4,0,-14,-8,-9,-4,1,3,-9,2,8,-4,1,-14,-3,-5,0,-3,6,-9,6,8,-6,-4,-1,-5,-8,11,-2,0,-10,0,0,1,7,7,-18),
	    4 => w(-20,8,6,1,4,-1,-5,0,5,-16,-7,-2,1,-10,-1,-1,6,6,1,-2,-2,-3,0,21,15,12,-1,5,5,-3,-10,6,1,0,-14,-11,-3,-8,-14,0,-7,-11,-18,2,9,-52,3,-13,33,2,-8,-9,-1,5,1,8,-9,55,1,50,0,-16,-9,-16),
	    5 => w(2,9,6,-1,30,2,-4,-30,-4,3,-7,0,-1,-12,-4,21,4,4,4,-26,-4,-18,-4,-7,-4,-7,-12,-1,12,-10,6,-25,2,4,1,13,8,-21,-9,5,-5,2,-5,7,0,-7,0,-3,-6,18,-11,-4,-15,-27,-2,3,-26,-1,27,0,32,-10,-2,-10),
	    6 => w(-3,0,0,29,-6,-7,0,-20,-13,-9,1,8,-1,-9,10,0,8,7,-10,-9,-1,-26,3,-9,2,4,0,12,23,8,4,0,-1,7,-9,-3,8,0,-3,-6,-8,6,1,3,-16,1,0,-37,0,-2,1,12,0,1,-2,-1,5,7,-1,1,-7,12,-13,-3),
	    7 => w(-10,0,2,-4,-1,19,18,5,-2,-1,12,-3,0,-14,-4,-1,-7,15,-16,-4,-5,9,0,2,-19,2,5,1,6,5,-7,24,-8,-3,3,-12,-4,-22,5,-3,-2,6,-24,5,-2,-2,2,-39,0,-1,-8,-5,-30,5,-5,23,-12,-1,5,-12,-4,1,0,-6),
	    8 => w(4,16,-4,5,-3,-1,3,-4,1,-4,10,-2,-1,-7,-1,-7,8,3,-5,0,6,-3,-2,-3,10,10,-4,7,0,-3,1,17,6,2,-15,-49,-4,1,-23,-8,-5,-5,5,5,5,2,4,4,4,-2,-5,7,-1,0,1,8,13,-4,3,-2,-3,-18,-7,-17),
	    9 => w(-11,-4,-1,-26,-6,-3,25,-18,17,3,-6,-1,2,0,1,6,-14,6,1,-11,-4,-9,-3,-1,0,0,-10,18,8,2,-9,-2,-4,-2,2,-8,-2,1,31,-4,4,-1,-7,3,3,0,0,-3,-8,5,-10,-3,-10,2,2,6,-7,-12,-1,0,-13,0,-4,9),
	    10 => w(1,1,8,0,4,-13,1,9,-25,2,-1,3,-1,-26,12,2,18,8,-4,1,-20,-10,0,0,-4,-4,-3,19,1,4,7,1,-1,-3,-15,-11,1,6,-2,1,-13,-9,-2,1,-1,-5,-9,-1,4,-3,-5,3,2,-5,-1,-3,-2,1,0,1,-5,14,24,3),
	    11 => w(25,-10,7,3,0,1,20,6,2,0,5,-2,2,-2,1,6,-42,-1,8,-3,-4,0,3,-4,5,-6,-1,2,-4,-6,-5,-11,-4,-1,0,-2,-3,8,13,-4,3,0,-6,8,-1,-10,-3,12,1,6,-2,-2,-3,-10,-1,1,-27,-8,6,17,1,7,-11,-12),
	    12 => w(-8,15,-3,9,-6,-1,1,3,-6,8,1,16,1,-3,2,0,2,-1,0,-4,1,-2,-4,21,-15,1,0,5,10,3,5,-2,0,-3,4,-27,-4,0,-3,-10,0,-7,1,-8,2,-3,1,-5,-1,10,-2,-7,-3,-3,-4,-9,-8,-9,2,24,-1,3,1,3),
	    13 => w(4,2,-1,9,10,-11,-4,1,-18,-13,-9,2,2,-1,-2,3,0,-3,3,-11,2,-6,0,3,-2,-1,-3,4,3,22,6,-11,2,-6,2,-7,-5,-4,3,-3,4,3,29,-16,-5,2,3,0,4,3,4,1,-43,1,-1,1,-7,8,8,-4,-2,12,-2,1),
	    14 => w(-3,0,-7,-5,-9,-5,-6,1,-19,2,-11,-6,4,8,9,0,9,1,10,-3,1,5,3,4,-2,6,-5,-7,-10,17,-5,1,3,-23,15,-7,-3,-3,3,-1,8,-1,-1,5,-15,1,-5,-31,-6,4,3,-2,2,-1,0,0,3,8,-4,-5,-9,9,-9,0),
	    15 => w(-6,-4,1,-9,-4,-19,0,-10,0,8,9,-2,1,-9,1,-2,25,-27,3,10,0,-3,-1,5,37,3,5,-1,-3,9,2,-6,-9,3,-3,5,-1,8,1,0,3,9,-5,-4,5,-2,3,2,1,-5,-6,0,3,-28,1,7,-21,10,-5,-7,-6,-7,6,2),
	    16 => w(-1,-5,2,7,-2,7,7,9,1,-10,6,-1,2,2,-1,6,-16,4,-28,-11,1,-1,-1,0,-2,2,-9,5,8,-1,-3,4,1,-35,1,-6,22,-37,2,-6,7,-11,-10,-10,1,0,-8,-22,6,2,-6,-24,-6,-11,-1,3,4,0,-4,-3,3,3,-7,-5),
	    17 => w(3,-16,-4,16,3,-1,-15,-4,-7,-1,2,12,5,0,8,2,2,0,20,-1,4,13,1,6,-1,-38,-3,1,3,-10,1,3,-14,-1,-7,4,9,-15,3,-5,-6,0,3,-2,9,-2,-57,6,-1,2,3,-3,1,8,12,0,4,-7,-2,0,-6,1,-4,-11),
	    18 => w(-5,4,-1,7,10,0,-4,-7,-1,8,-13,1,8,3,2,12,-3,4,0,-12,0,-4,18,4,8,-20,11,-2,-2,-5,6,-2,-10,-6,5,5,10,-2,-3,39,12,9,-33,0,-3,-5,-4,4,-2,3,2,-7,0,7,-4,-23,4,-4,2,7,-4,2,-9,1),
	    19 => w(0,4,6,-5,7,-1,-1,-7,-10,6,3,-71,0,11,-2,-1,-1,3,0,-1,-10,-4,6,4,-5,0,-1,-3,-2,5,-2,8,0,-6,2,1,9,-1,-6,0,4,1,-4,-5,-2,1,1,-16,24,-9,-10,-10,8,0,0,-4,-2,6,2,-5,3,-5,2,9),
	    20 => w(0,0,-6,-11,2,2,5,2,2,3,4,8,-4,1,1,4,-4,4,-11,-7,1,0,-10,1,1,-2,-7,-5,3,0,5,3,1,2,-16,-4,-10,20,-4,-7,3,-6,11,-7,-8,-3,-6,-8,11,1,7,-8,-47,-1,-30,0,-3,2,2,-2,6,-15,-3,-9),
	    21 => w(8,6,-8,7,0,-1,-7,-10,-1,-3,3,-13,-12,3,-10,2,-1,1,15,4,-5,48,-20,-4,0,6,0,-2,4,-10,0,-6,-1,4,-7,1,16,-34,-2,6,1,0,-4,4,-15,-3,-10,-4,6,-6,-2,-2,-2,1,9,1,-11,6,2,3,2,3,-1,-3),
	    22 => w(-2,-4,-6,6,-4,-6,1,-3,-4,0,-12,-2,-2,6,3,-9,-8,-4,1,-13,-3,14,-1,-6,-6,10,-17,-3,-2,-8,-4,-2,8,-10,-4,15,-1,2,9,20,5,-25,45,-1,-3,-8,8,1,3,6,14,-11,7,2,10,5,3,-12,-4,5,8,0,-3,-4),
	    23 => w(-3,0,-10,18,0,0,-4,2,0,6,-8,-19,-7,15,3,-1,-11,-5,-6,0,5,4,-6,5,-6,-4,2,-3,2,5,-36,14,-4,-5,-13,-1,-9,5,-5,-2,7,-4,-9,-2,-2,0,1,-2,4,-1,44,-59,-13,0,3,-5,-3,4,-4,1,1,-3,-8,3),
	    24 => w(1,4,8,1,7,-2,0,5,-3,-9,0,11,1,-5,-2,-2,11,0,-5,3,-2,-8,3,-8,-5,12,-5,5,-1,10,4,6,-4,5,-12,16,2,-8,22,-1,-1,-13,3,6,3,3,-3,-5,1,-5,-1,-7,-1,-1,-4,-9,14,0,1,-3,2,-10,-1,-6),
	    25 => w(-26,-8,3,-10,-9,3,15,7,0,32,-13,0,1,7,-2,9,-6,-2,-4,-5,3,2,0,1,-4,2,5,-3,4,-3,-1,0,-2,5,1,-13,-9,1,-35,-4,-11,-7,-5,-4,1,-2,-2,1,1,12,-7,5,-2,0,0,-3,3,-5,3,-6,4,-20,1,-2),
	    26 => w(4,0,6,0,2,-1,-5,-26,9,2,4,1,7,-26,0,0,1,7,6,10,7,-11,0,-3,2,-5,1,-5,-10,0,10,0,-2,-8,-14,-10,-4,2,3,2,-21,-2,-7,-2,-21,-3,3,4,-6,-7,4,-3,-4,-2,2,2,1,3,1,4,-17,-5,2,5),
	    27 => w(29,-10,7,1,0,-1,14,2,0,3,7,-2,-4,-7,1,-2,19,-12,-1,-18,8,14,3,3,16,-4,-1,-3,-1,-1,-1,-13,1,6,-6,-12,-4,7,-5,6,6,5,9,8,-1,2,-3,-12,0,8,-1,1,3,-7,1,-31,-4,2,-10,-1,-9,-2,-6,-4),
	    28 => w(-3,4,5,-4,-3,3,-6,3,3,8,-4,-16,7,3,13,-2,25,-2,2,4,-1,1,0,-5,3,-5,-3,11,-10,5,20,3,2,7,-9,3,11,-8,-1,7,-21,-3,-18,7,12,-5,36,1,-12,5,30,-2,5,5,1,-1,5,12,17,2,-16,-3,3,1),
	    29 => w(-4,-3,4,-1,-1,1,11,0,-2,-3,4,6,-43,-1,22,-5,4,-3,10,27,6,-25,12,3,1,23,0,-8,0,-4,-5,3,5,15,1,5,-14,-3,-5,-22,-1,0,0,2,-33,2,5,2,0,4,10,-1,0,13,0,-7,3,-7,4,1,-26,4,1,-2),
	    30 => w(6,10,2,-13,4,7,-5,0,8,-14,9,1,10,1,0,5,11,-1,0,8,0,6,7,-7,-14,4,28,4,-2,-1,10,0,16,16,-2,2,7,-1,-3,92,8,-14,-17,0,-3,13,42,3,0,-1,-2,16,22,17,11,-9,25,-1,-1,-19,3,3,-3,4),
	    31 => w(5,3,5,6,-1,3,-3,4,0,-1,15,6,-4,-2,0,-2,-3,-5,1,0,-4,-4,15,2,1,2,9,-4,1,-1,-42,-8,2,-10,1,7,23,3,-12,3,-3,-1,2,-3,16,3,5,3,0,7,94,-98,17,0,48,2,0,1,-1,-4,0,-8,13,3),
	    32 => w(4,-1,7,-1,0,2,-5,-2,-3,-8,-2,-5,0,0,3,1,-5,1,-8,10,0,-5,-3,9,18,-8,-4,2,-7,8,14,-6,-1,-1,-4,-19,0,-4,-3,8,0,-14,1,2,7,-2,-8,-5,9,0,-2,-1,-5,-3,-1,-1,1,5,-1,-15,-4,-12,-9,-1),
	    33 => w(-19,1,-1,-1,4,11,19,-11,3,1,-1,0,-1,3,-1,5,-8,11,-5,4,0,-10,-3,-6,-2,2,-2,7,-3,0,6,-3,-1,4,1,-4,-4,1,5,-9,10,-4,-7,-3,-2,-1,-6,-1,3,6,6,7,2,-11,1,6,1,7,-1,-3,-8,-3,2,4),
	    34 => w(0,-2,-7,4,-4,9,-11,-2,-11,2,-5,2,5,-11,0,2,17,1,-5,-9,28,-8,-2,-7,1,4,-3,29,2,-1,4,1,-5,22,-5,-6,-5,-3,-1,-3,-5,-10,2,1,-11,-7,0,4,-5,0,-2,-2,-1,-3,-1,-2,1,-4,1,2,-26,2,13,-2),
	    35 => w(3,-7,6,-2,-2,9,-16,-11,1,-5,-1,-1,-4,-8,0,-8,-5,-12,4,-3,7,1,0,1,0,-2,-2,-2,1,-4,-3,-4,0,0,-1,-21,-2,1,3,1,3,28,-2,-1,0,-7,-5,11,-1,1,-3,-3,-8,-15,1,13,-5,-3,9,-1,-1,-4,-8,-8),
	    36 => w(-14,-6,1,-2,-2,-2,-2,-1,-4,-15,-10,-2,-1,0,2,-4,-2,-1,-4,-2,2,12,-4,1,6,-2,-2,3,-2,11,14,-1,5,0,-5,5,4,-6,-9,0,-2,-16,2,40,3,-5,-6,0,-11,2,-7,8,-2,-3,-7,-6,-1,-9,-2,-18,-2,-12,-7,4),
	    37 => w(-2,-9,-1,-4,-15,1,27,4,9,-9,-3,-3,-1,-2,-2,8,-2,-9,-1,5,-2,-3,-3,-7,-1,1,16,6,-3,0,0,-18,-3,3,2,4,-3,0,-5,-7,-7,-4,-6,2,0,-2,-4,0,0,9,7,-9,-16,-14,1,2,11,-3,0,-9,-1,-8,-3,-6),
	    38 => w(5,0,9,2,-8,0,-14,10,11,-1,-4,-1,5,-15,1,0,15,3,3,9,-2,-11,0,-4,-1,-5,-2,14,0,1,-1,0,-18,7,-8,-9,-2,-1,4,-3,-11,-9,-5,-1,43,5,-7,0,4,1,-3,0,-5,-2,-1,-3,-2,3,-6,-1,-18,3,-1,0),
	    39 => w(-1,-14,2,1,0,-4,8,11,-1,-5,7,1,-4,-20,-6,-5,-7,21,-5,-4,7,4,-3,-6,-18,-2,-3,1,-2,-6,-7,-13,0,2,-7,-10,2,-6,2,-2,-8,16,4,7,4,-6,0,0,-1,4,-3,-6,-2,19,4,-13,-5,1,-12,-4,-11,-3,-1,-4),
	    40 => w(8,-6,-4,8,2,-1,1,0,2,-9,9,6,1,0,3,-2,-11,-1,2,-3,-3,14,4,20,-5,0,-4,-7,3,11,-11,-10,-4,6,-3,-2,5,-3,0,-3,-1,-11,-1,-9,7,-6,-7,-18,-2,1,-1,-9,-2,1,3,0,-6,-13,1,2,0,-13,-23,12),
	    41 => w(10,7,-1,-1,-8,9,0,-3,11,-7,-3,1,4,3,-3,19,-18,-6,6,4,1,4,1,1,3,4,-18,17,5,3,14,-10,-3,4,2,-3,-4,8,2,3,-5,-4,-6,-5,1,1,-2,7,9,20,4,-6,-8,-5,4,11,5,-4,7,-3,1,7,7,5),
	    42 => w(2,1,8,-1,-13,1,3,4,27,3,3,0,4,-26,-5,4,12,-9,4,41,19,-5,0,-1,-1,1,7,27,17,-2,4,0,-5,2,-17,-10,-7,-1,2,-4,-23,-4,4,0,-1,-13,2,8,-7,7,3,-2,-5,-4,-2,-1,-2,-6,2,0,30,-2,4,-2),
	    43 => w(16,1,11,1,2,4,-4,4,1,3,7,-4,-10,-13,-4,-1,-15,29,-3,-4,9,13,0,-1,4,-3,1,-5,3,0,-6,-15,20,9,-1,-17,-4,3,-8,0,6,-11,17,5,3,-3,-1,-10,3,1,-3,0,1,3,5,-30,-12,2,-9,13,-3,4,-8,-4),
	    44 => w(22,7,4,-9,-3,-1,3,6,-6,-14,1,25,1,-5,1,-1,-8,4,-4,-6,2,-3,-1,11,-3,6,-8,-5,11,18,3,-3,-2,1,-14,6,-4,-8,-5,4,-2,1,10,3,-11,-4,-5,-4,-15,4,-3,1,-3,-1,-3,6,-6,-2,-1,-17,12,-4,14,1),
	    45 => w(3,-1,-13,-7,-10,-3,0,5,-6,3,12,-8,0,5,5,3,-4,1,8,2,15,-3,0,3,-1,-7,6,4,-4,6,2,7,-1,1,0,13,-5,0,1,3,8,-6,8,-22,4,-5,4,-3,7,-6,-4,-1,9,6,0,-1,-8,-1,5,-20,13,-4,-5,0),
	    46 => w(-2,2,9,43,1,-14,-5,9,-8,3,25,-6,0,-12,2,-3,1,-3,2,-1,-3,-5,2,2,-3,0,2,8,0,18,-14,1,11,0,0,-6,24,-2,1,2,-4,-3,-9,-1,2,7,-12,7,-3,1,2,-8,-1,5,-10,-4,5,28,-6,1,4,5,4,5),
	    47 => w(1,-6,1,-7,4,-3,1,12,6,0,-7,0,-4,-10,-3,-6,2,-1,5,1,9,-2,-8,-2,10,0,-17,-4,2,2,3,9,4,1,-16,-4,1,0,-3,-4,22,-1,2,-1,0,3,17,8,-2,-20,7,-5,-11,4,6,1,-13,-2,-1,0,-1,8,-13,-2),
	    48 => w(-7,-12,-4,-2,-2,-1,-3,-13,0,17,-7,0,-6,-4,-2,0,-2,6,-2,-8,-2,-3,-11,2,-1,-1,-1,5,-9,0,5,-5,-4,-10,6,0,-7,2,-9,-13,1,8,-5,10,-4,6,0,4,-17,3,-4,-4,-8,3,6,-5,-3,-5,-9,-11,3,-5,12,-2),
	    49 => w(10,0,-2,4,-6,-1,17,6,-1,6,1,-2,-10,-11,-11,-2,-8,-2,-3,-8,4,8,4,-5,0,10,5,1,0,12,7,-23,2,-2,5,-7,0,-3,10,3,-4,8,-6,5,-5,0,6,-10,-1,-1,-3,5,-4,-11,7,-2,2,2,-7,4,-3,-2,-2,3),
	    50 => w(9,-3,-2,-2,10,0,-6,-4,-12,-4,10,-1,-3,3,-9,-9,-20,-9,3,-6,3,-11,-5,10,-11,-6,-8,-15,0,-16,-4,-1,-16,-11,-4,-13,-1,1,-1,-8,-4,-17,-2,5,2,-7,-7,-3,5,5,-6,-1,3,4,-12,3,4,4,17,-3,-4,-9,-17,2),
	    51 => w(1,-6,0,-10,-4,7,-8,-3,-3,2,7,3,-1,-17,-4,1,-1,2,0,3,4,3,-12,5,-3,-1,-2,2,1,11,12,-9,7,7,-6,11,-5,1,-3,3,9,-7,4,0,0,-1,-4,37,8,7,0,-5,1,2,-4,2,22,4,-5,-3,4,-9,1,-2),
	    52 => w(0,13,1,-4,25,3,6,0,-1,7,-14,-4,-4,6,-5,-23,-16,0,7,3,-1,0,6,-3,2,0,-5,-2,3,-8,-5,3,-8,-8,13,-2,4,-9,0,1,-1,-4,13,11,-8,-5,11,-1,-2,-3,-6,5,4,-9,-17,-4,6,7,-3,-6,31,10,1,8),
	    53 => w(-6,-24,8,-14,-4,1,-1,-5,10,-2,-9,1,6,10,-2,-8,-5,-10,-8,-7,8,6,-12,-2,-2,10,6,1,0,-6,7,-4,9,-19,2,-6,-30,7,-2,9,-8,5,-2,9,-5,0,0,1,-1,-7,-7,-6,3,-4,-1,-6,8,2,1,-4,0,1,-40,-3),
	    54 => w(12,3,4,2,-7,3,9,-2,2,16,15,-3,15,-8,-3,7,2,6,2,-6,-4,-4,0,12,-1,-5,-9,9,-1,-9,9,2,-1,15,-14,-9,-4,0,1,6,3,6,-6,13,-2,-4,-3,1,-13,-11,-5,2,2,-5,0,-4,-8,-8,-1,-5,-6,-2,0,3),
	    55 => w(-27,4,-10,-6,4,-5,0,3,0,-11,-14,-5,3,-18,1,5,-12,1,2,-20,3,22,-1,2,-2,14,-5,0,-2,2,-12,-23,2,-1,-5,-6,1,9,-9,6,15,-4,-10,6,-3,-7,-4,13,-8,0,14,2,-12,-2,0,5,8,-24,-3,3,-6,1,-3,-8),
	    56 => w(-7,9,3,30,-16,2,13,-5,0,-13,-8,-1,-12,-5,-9,-2,0,-5,-12,-2,-5,-1,-6,0,2,-11,16,15,-15,-17,15,7,-3,-8,-14,5,2,-7,-4,10,1,13,11,0,3,4,-22,-2,9,-6,-12,2,-16,-5,2,-10,-6,-5,0,-10,-8,-2,0,-8),
	    57 => w(-6,-4,-1,5,4,-3,3,-4,-2,-2,16,12,14,-5,7,-18,-13,7,21,-1,3,27,0,7,0,-13,4,-11,5,2,1,-7,-9,-6,-6,8,5,7,0,18,8,2,8,-6,26,2,-11,8,-5,4,22,-5,-2,2,5,-9,5,-8,1,-8,-21,-17,6,19),
	    58 => w(-3,-2,-6,-16,-16,-4,-20,8,8,2,21,1,3,1,4,6,-5,0,1,30,5,2,3,10,11,-13,-23,0,0,-5,8,1,10,-1,7,35,-1,-13,-1,-14,-6,-17,-10,-6,-7,15,-13,5,27,4,1,1,13,12,19,-3,-15,-11,8,2,4,3,-6,4),
	    59 => w(6,8,-6,10,-3,2,6,-1,1,0,6,2,2,-4,-2,-4,-7,-6,-5,-2,-24,0,1,3,-4,10,13,-9,4,0,3,-17,-4,11,24,-5,24,-2,-7,4,0,9,11,-2,-1,-5,-4,-9,12,-1,-35,9,-6,2,4,2,-11,-5,1,1,5,7,-13,3),
	    60 => w(0,-10,-5,1,9,0,4,-5,-2,19,7,0,1,-9,1,12,-5,-4,-4,0,0,1,-14,5,1,2,-2,-13,2,37,-29,-5,1,-3,-5,8,13,2,-1,-3,1,35,-14,-10,-10,1,-5,-11,4,-4,-2,-8,-2,6,8,-9,-4,0,-7,-3,-18,2,-2,-5),
	    61 => w(12,-7,-5,5,-6,-2,-11,2,17,3,3,2,-4,-1,-8,3,3,16,-2,-12,4,-9,-1,10,2,13,8,0,-10,-9,-1,-12,-3,7,1,0,13,-11,3,-18,-9,-4,-4,-6,-5,0,-2,1,2,-24,3,1,9,6,-7,-1,8,9,-5,-17,10,6,12,-13),
	    62 => w(-7,-2,7,-11,-1,-4,1,3,6,-4,-2,8,3,10,2,-2,4,0,1,0,4,21,9,9,9,0,3,10,-4,19,10,-2,-5,12,-5,-6,-2,-9,1,6,-23,-6,1,3,3,-9,7,-2,-1,2,-6,1,-6,3,6,4,-7,8,-4,8,1,3,5,0),
	    63 => w(8,-16,-12,3,0,2,8,3,-2,10,41,-16,-4,-17,3,8,7,11,-2,7,-49,2,2,0,4,1,-7,2,-2,2,-11,0,1,-4,0,4,4,3,1,2,10,-2,-5,-7,-2,-5,3,-30,3,5,-4,2,8,5,0,-4,5,8,1,2,9,0,1,-8)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;