library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-5,-4,-18,6,5,-3,-6,2,2,-8,-2,-2,-4,11,-3,-3,-4,-15,1,5,-4,1,-6,0,-1,3,3,-4,4,18,-10,3,17,5,2,-6,1,-2,1,-10,1,0,2,-3,-2,1,6,20,-5,-3,2,1,4,-4,-2,1,-8,-1,-5,1,2,16,4,-4),
	    1 => w(4,-9,-13,-4,-1,3,-15,1,29,29,9,-2,-5,2,6,3,-1,-1,-8,2,-2,1,3,-3,0,7,3,0,1,-3,-5,5,0,-17,-31,-4,4,4,-19,-7,-1,12,5,-11,-1,1,19,-2,4,-5,-11,3,2,20,-2,1,3,0,6,1,-6,-29,-3,-3),
	    2 => w(1,-11,-6,4,35,-2,5,-1,-8,6,2,-2,21,0,38,4,6,-7,-4,1,2,-7,5,2,-2,-2,-4,-20,-1,-2,-2,8,16,0,-3,-3,12,58,-5,4,7,-6,-3,-10,-9,1,1,-6,-18,12,3,-12,4,-2,-2,3,4,6,-2,2,11,6,-1,2),
	    3 => w(-12,-7,-1,8,-5,4,13,11,-12,-3,-2,-5,-3,-9,0,3,4,1,-1,-4,4,44,-4,1,19,0,-5,-1,0,-2,-5,14,-12,64,-4,-2,-1,-3,29,11,-4,-1,-8,13,2,-2,-3,2,-3,-3,-16,-3,11,20,-1,-6,13,11,5,2,-7,18,6,1),
	    4 => w(1,3,6,-10,4,-9,11,-61,-2,1,9,24,2,4,-21,4,-1,-18,0,-9,-1,-4,0,1,-6,-2,-1,5,0,7,3,9,2,-3,0,0,5,-2,-12,-10,6,-9,-2,-18,1,-1,-7,-3,3,-5,-2,-3,-3,5,7,-2,4,3,1,2,0,-3,0,-3),
	    5 => w(4,-3,13,9,-5,-4,-8,2,-3,-1,-6,0,-12,-1,3,3,3,-1,-2,-10,5,4,14,2,-1,4,-3,44,-2,2,-2,2,-1,-11,3,-2,33,-13,-2,1,-12,-4,1,-1,0,3,-8,-6,0,18,7,-20,-2,-1,1,0,1,7,-4,3,2,1,-12,6),
	    6 => w(-4,-1,-13,-3,-28,10,-4,1,1,5,12,1,0,10,3,3,-2,-2,3,-6,5,4,3,-1,-10,0,6,2,3,-2,3,-8,-8,1,-1,1,0,-12,-4,-82,7,-1,-1,0,7,-4,1,10,1,0,2,-5,4,-7,-7,4,-16,2,-2,-6,-1,4,0,-1),
	    7 => w(0,7,0,-5,-55,-18,-17,2,-13,1,2,-3,-6,7,4,0,0,-2,-16,6,-1,-7,3,2,-7,3,1,-6,-5,-6,2,1,28,0,5,-3,6,-3,-6,38,-4,10,3,-1,1,-6,-12,-4,-8,-2,-5,1,-1,12,-8,2,-7,-2,-19,6,-1,0,3,3),
	    8 => w(3,2,9,-2,-11,12,2,9,2,7,-14,-3,-1,-8,-11,1,-16,10,4,6,-8,-9,2,1,-26,-1,12,-9,16,-1,-23,5,2,-3,0,0,4,16,-3,-5,13,-5,10,-1,10,3,-16,-3,-2,3,-2,-8,5,15,1,7,12,-14,-4,-7,-2,-2,-1,-4),
	    9 => w(8,1,-9,-8,-2,36,11,2,-6,1,-3,-5,-7,0,2,-2,-2,-1,14,0,7,-6,4,-3,3,2,4,3,1,0,-2,-5,1,-1,-1,-4,7,-18,-1,-2,5,5,8,0,-3,7,-2,-4,11,-14,7,-25,10,0,-5,1,-1,6,14,3,-19,2,11,0),
	    10 => w(-8,-1,-10,3,-13,3,-7,-3,-26,3,-3,6,-1,-1,1,1,-4,-8,-1,0,5,-3,-6,-8,-15,3,6,-1,3,-2,-11,-37,4,-2,-2,2,0,11,-1,-1,6,-2,-1,1,-12,-14,-1,-26,0,3,-5,-6,-3,-5,-5,2,-2,3,2,-2,-5,-2,-2,-14),
	    11 => w(-4,4,6,-1,-3,0,-5,0,-24,-3,-1,3,-2,-23,0,-14,-22,-3,1,-11,-3,0,-1,-3,1,2,18,-2,6,31,0,1,-41,-8,38,2,-5,-18,-1,13,-6,-13,-3,-1,-1,-2,-2,10,4,6,0,-11,-1,7,5,5,-3,-3,3,1,0,2,3,3),
	    12 => w(-3,1,-12,53,-5,24,16,-11,2,2,1,-2,-1,3,-11,12,9,21,-1,0,12,12,0,9,-21,3,17,-9,8,-7,-15,-1,-6,2,1,3,0,-1,2,2,-1,6,20,-2,3,8,-2,6,0,-8,1,-5,1,-3,-6,3,38,-17,2,-1,2,-3,1,-1),
	    13 => w(5,7,-5,-5,0,-11,-11,-2,3,4,1,-3,0,-3,6,5,6,2,18,1,8,1,8,-21,2,-10,-7,3,0,5,-1,-24,1,-8,9,0,31,-2,1,0,7,-8,19,-2,3,0,3,2,10,-19,-11,15,8,-10,-13,9,0,-1,3,-1,-16,29,6,6),
	    14 => w(-13,8,6,-5,-10,-2,-1,1,22,10,-15,2,1,-1,-14,2,4,-33,-5,1,3,-25,23,3,-55,-3,14,-5,2,0,-16,-7,10,1,-1,-1,-2,21,-1,6,1,4,-1,4,1,45,2,10,-7,-4,4,-7,-4,15,-13,-2,2,-2,-3,1,-8,4,-7,7),
	    15 => w(-1,-2,0,1,5,-1,3,15,7,-3,-1,-14,-6,-58,-5,25,8,1,3,-1,-13,7,-2,-11,-1,4,7,0,7,-11,-1,-7,16,9,-28,0,7,-8,-4,20,-9,9,-3,10,9,0,4,-2,1,-4,1,2,1,-1,-2,-6,-56,0,4,4,-1,27,11,-5),
	    16 => w(1,1,3,5,-1,-10,-14,0,1,2,-23,-13,-1,7,-3,-3,1,-8,3,2,3,16,-3,8,-11,1,-12,15,-4,-1,1,-1,7,-11,1,0,3,1,-4,1,0,3,-4,18,-1,-5,17,-4,0,3,-3,1,1,-2,0,5,4,2,-4,0,-2,2,1,0),
	    17 => w(0,2,-2,-11,-3,-21,-6,3,0,2,4,1,71,-2,0,1,8,3,7,-1,6,-7,26,-4,2,4,2,14,-9,-5,0,-6,-5,-6,6,3,-8,-24,0,-1,3,2,-4,0,0,1,-2,-3,-16,-6,5,1,-11,9,-6,4,1,0,-15,-1,-11,10,-20,2),
	    18 => w(0,2,-2,1,0,0,-2,-4,1,1,6,-1,1,0,10,0,2,-2,-8,-6,0,4,2,2,-6,-1,4,-4,-2,-4,-15,11,4,1,-2,1,7,2,-1,-14,-8,1,0,1,5,2,4,-8,-2,1,8,-16,1,-4,-16,-3,9,-2,11,0,1,-4,-2,38),
	    19 => w(3,-5,0,2,-8,0,5,1,-2,3,-2,10,10,1,2,6,-3,-4,-3,3,-4,-3,0,-6,1,-4,3,-1,6,-5,0,19,-2,-1,-13,-1,-1,0,-8,4,9,-1,-2,-7,9,-1,4,2,-3,0,1,8,-1,-5,-5,-1,-3,3,6,-1,0,-5,15,-1),
	    20 => w(1,-1,3,-33,5,-14,-30,5,9,-3,3,8,3,8,11,0,7,22,4,2,13,1,1,-2,19,18,-16,12,5,-4,3,-4,7,-1,1,-7,-5,-6,-13,2,-2,1,-22,-8,2,-1,29,6,-3,-7,-2,4,-3,4,-6,13,11,-9,-7,-25,0,-2,6,-7),
	    21 => w(-4,-5,-15,-21,-2,7,-10,0,12,-2,9,-5,-14,-3,-9,2,0,0,23,-1,0,-6,15,16,-2,-4,6,-7,-12,-22,-3,23,3,5,17,4,12,5,2,-3,-6,3,9,-7,1,-5,5,-2,-10,-4,0,-5,-27,-27,8,-6,0,-9,-44,3,9,24,9,-2),
	    22 => w(19,-8,-6,0,-11,-8,2,45,61,50,-20,2,-2,3,21,0,-1,2,6,5,34,-2,11,17,27,0,-25,4,1,7,9,0,8,-1,17,-5,4,-4,1,10,11,-1,0,-43,2,-3,3,-21,-7,10,-3,-10,3,-1,24,0,15,15,2,6,4,-5,-4,11),
	    23 => w(-11,-1,3,2,3,8,-2,13,13,-3,-1,-11,-13,0,2,-12,-7,-8,-2,23,16,-18,14,-5,1,-8,5,1,-1,27,-3,-10,-5,1,-2,2,4,-9,30,-1,15,-3,3,-19,9,2,-1,23,-6,6,-15,5,4,-2,-5,1,-12,4,7,2,-5,-2,2,1),
	    24 => w(2,2,4,3,5,-7,-10,-28,-2,3,8,-9,-3,-3,-1,17,22,-31,6,5,3,11,-1,1,-12,0,2,-12,-8,-6,46,0,-4,3,1,2,4,-32,0,1,-16,3,12,-4,-5,0,24,-6,2,-23,-3,-12,-7,1,-3,4,5,15,-2,-3,0,-1,3,1),
	    25 => w(-6,-4,-3,-17,-4,-5,-11,1,-6,1,-2,-3,19,3,-3,-2,0,3,-7,1,3,-13,2,8,1,2,9,1,-3,2,1,-27,-10,-3,-7,-3,-30,-32,4,0,3,-6,-9,-8,2,-7,-8,-5,7,5,11,6,-3,22,14,-18,-1,-3,6,-1,7,25,11,3),
	    26 => w(9,5,-2,-2,-1,0,-6,1,55,5,0,3,0,-2,14,-2,-2,-4,2,1,2,-8,14,22,-47,1,-3,-6,-1,-8,8,-36,-11,5,-3,-1,0,-9,-4,-4,-3,1,-1,-3,-2,51,11,52,6,-1,-6,-3,0,8,-17,1,-8,-6,-13,6,4,1,-8,-4),
	    27 => w(-9,5,1,0,-3,6,4,1,8,-6,-6,-8,-10,-18,0,-18,-8,5,-6,-8,-27,-8,13,-5,-1,5,10,-1,3,-11,1,15,-23,-3,-1,1,44,11,4,-2,-1,-46,2,-10,-1,-3,-1,7,-5,-7,8,11,-2,-8,-7,4,-4,1,-3,4,1,18,-10,1),
	    28 => w(43,0,4,6,-2,4,19,-10,-15,-13,15,-11,24,15,-2,0,-7,0,-3,10,2,-1,-1,4,-3,-25,5,1,12,28,-4,9,-3,-3,-2,4,-3,4,-20,-3,3,-5,-4,4,-2,-5,-6,-12,4,1,-28,-4,-35,-11,-3,5,-8,-7,-16,6,1,24,-5,10),
	    29 => w(11,-2,-3,0,0,6,-11,2,14,16,10,-26,-8,-8,10,1,5,3,-4,-2,3,11,-10,-3,7,1,-4,0,-9,-8,35,-13,1,-2,-24,8,4,0,1,25,5,11,12,-2,-2,1,22,1,3,5,3,-14,2,0,0,-8,-9,-3,-4,19,5,-11,12,1),
	    30 => w(-6,-7,0,-29,12,2,-1,-7,6,-27,-1,-4,23,2,1,-16,21,1,3,-6,-22,0,-4,2,-17,44,6,39,-1,-4,7,-5,-6,-3,-23,28,5,24,24,-7,-4,-21,16,-7,-6,-2,-2,15,-32,-2,-4,17,1,-6,10,-14,-1,-17,1,-7,-16,-9,9,4),
	    31 => w(-5,13,7,8,-14,-6,7,-3,-3,-15,-39,7,-9,4,-1,-3,-6,2,8,1,-6,1,-1,-3,12,0,0,-4,0,0,13,1,-4,31,6,34,-1,0,-5,-1,-11,-9,2,-6,0,1,-3,-2,-36,-7,-32,2,-17,24,2,-7,1,-2,-5,2,17,0,1,1),
	    32 => w(-2,1,15,6,4,2,13,-3,-3,4,-3,17,-23,13,3,4,-2,-5,-5,2,-4,-11,-6,0,11,-2,-1,1,8,2,4,1,15,10,-19,0,-5,-7,0,1,0,0,-1,-3,5,-1,-3,-10,1,-5,-11,2,-6,-4,-4,0,0,-7,-5,-2,-3,2,2,4),
	    33 => w(-8,7,-1,14,19,20,10,-1,-21,1,4,4,-17,-12,-4,-2,-5,-4,-1,0,0,6,8,1,-24,-1,1,-3,-11,-2,1,10,0,-4,10,-4,7,1,-8,0,0,-17,1,-3,13,-1,-10,1,3,-4,4,-10,2,-1,0,-1,14,1,-14,4,2,2,7,5),
	    34 => w(-2,-6,3,1,-1,3,-2,4,7,-3,-9,-2,-1,4,-2,7,-1,4,-2,2,1,-1,-2,3,5,6,-5,-3,1,-1,0,1,12,-2,1,5,4,13,2,3,-4,3,2,-7,-1,7,3,5,-1,-2,-3,-5,2,-4,4,0,-5,6,-4,-2,6,5,10,-2),
	    35 => w(1,4,-11,6,-29,-1,-9,0,-15,4,-7,-4,8,-3,-1,-7,5,0,4,-2,-2,-14,0,-5,-2,1,0,-1,0,-5,-3,-4,-16,-4,17,-7,-5,4,3,-5,-11,-2,-3,-5,-5,-1,-5,3,-1,9,14,-3,-2,56,4,9,2,-9,-7,5,-4,-3,-3,-1),
	    36 => w(1,-1,-11,-4,-2,3,-28,4,1,-6,0,-3,-1,-2,27,-2,-2,3,-12,-43,2,3,-1,-3,-11,-2,9,6,-1,-2,1,9,0,0,0,2,16,12,6,-19,1,8,-7,3,1,-1,-4,5,4,12,2,1,1,0,13,-1,12,-5,-3,-4,0,1,5,5),
	    37 => w(10,-8,15,10,-8,-10,11,-3,-2,6,-22,-6,-18,3,-8,8,0,-17,-3,7,-10,-1,-52,5,-1,-3,3,-11,7,0,-9,-9,1,-15,28,2,13,36,-14,5,8,-8,21,-8,3,3,-7,-20,0,-8,-25,-47,-7,-20,6,-4,0,2,-8,5,1,-8,8,18),
	    38 => w(-8,0,-7,-7,2,8,-2,-4,-11,-27,-12,2,-7,-6,15,5,1,12,6,0,21,-1,-2,5,9,-10,2,-24,6,1,-1,-17,19,-10,5,3,-4,-2,-8,28,-7,-1,-3,13,24,-9,-3,-12,-1,2,2,12,13,3,-21,4,-18,-3,-5,-3,-11,-5,2,7),
	    39 => w(-4,13,2,6,7,25,-2,-7,-23,2,4,3,-10,19,0,-12,13,8,1,11,-4,10,0,16,-5,10,1,-26,5,1,-2,-14,36,5,-1,-6,-14,-2,1,-6,-23,-7,4,-3,-1,4,-5,6,0,0,2,-6,-3,1,-12,-5,14,-2,19,-3,-3,11,1,-1),
	    40 => w(-2,-1,-2,8,12,-3,4,14,-1,-1,-3,6,-1,-5,-10,2,25,-18,3,2,13,-1,-1,-6,-2,-1,-5,12,1,-1,4,2,-5,-6,4,-4,1,16,0,-6,7,-7,-5,-12,-7,8,12,6,-1,10,4,-4,4,9,-5,2,-3,-2,6,-4,20,-2,2,3),
	    41 => w(-4,0,-9,-10,4,-1,-9,0,-1,1,10,-1,33,-1,14,-8,8,15,-4,-6,9,-11,-11,-5,3,3,-8,10,1,2,5,-8,5,2,-10,-1,18,-6,3,4,-8,3,-5,-1,1,0,13,-6,-11,-11,-2,-12,-6,11,-3,8,-1,1,-8,0,7,17,18,-4),
	    42 => w(3,2,3,0,-22,2,-3,11,21,12,8,0,3,0,8,0,0,-6,-1,-13,0,-5,12,-4,-55,0,1,7,-1,-9,7,-12,6,7,-2,-1,4,-5,0,-10,-8,1,1,9,-3,14,9,11,-6,2,19,-34,-1,-1,0,-3,15,5,19,-2,-4,0,-8,-21),
	    43 => w(-10,-1,0,1,4,1,-5,12,-4,3,1,10,-2,6,-4,-11,2,7,-3,3,11,4,16,-13,2,-6,2,2,-1,-1,-2,2,10,0,10,-1,3,2,-4,5,-8,2,-2,-3,1,-6,-1,1,-4,-4,17,14,-1,4,-4,2,0,-3,10,10,0,-1,12,0),
	    44 => w(1,-2,-9,11,5,5,-11,2,4,-2,-1,42,0,-1,-12,-10,13,97,4,-2,-10,-1,1,-1,2,-2,0,6,12,0,-10,-6,1,4,-3,14,0,3,-9,9,-2,0,-10,-3,-2,8,-5,-22,2,0,6,6,7,-2,-1,-7,-11,-1,3,-5,1,0,-2,-4),
	    45 => w(-2,11,19,6,2,-2,7,-2,1,2,-6,0,-20,-2,4,6,1,-1,-3,4,-8,0,-6,-3,3,-11,3,1,6,-2,2,4,-19,17,22,-1,5,-6,-4,0,0,4,49,-2,0,-6,5,4,2,-1,-5,-3,5,-35,-4,-19,-1,2,12,0,0,30,-24,6),
	    46 => w(-12,5,-4,-2,-9,-2,1,2,1,-9,10,-3,-3,-1,-5,2,-1,13,4,3,5,0,8,9,3,1,-1,-7,-2,1,2,35,-14,4,-1,1,5,-5,4,4,4,3,-3,7,1,3,4,1,9,7,6,-9,-7,-9,17,1,-7,0,-5,3,-28,1,-3,4),
	    47 => w(5,-4,2,10,23,-1,60,1,1,-5,0,-17,-5,-1,-2,37,-1,8,-10,-4,3,3,0,-3,-1,-3,-8,3,-6,3,1,-18,-26,-2,-9,9,-7,4,15,-6,-24,13,2,-3,-1,1,-2,-5,4,6,5,-2,4,4,-6,1,10,-2,-5,-3,6,-4,12,-4),
	    48 => w(3,-1,-6,3,-4,6,16,-10,-1,-2,-2,15,0,2,3,3,-5,26,4,-1,-15,-1,-2,-3,9,6,1,2,-7,-2,3,5,2,-2,0,-6,1,-9,13,-3,-2,0,4,-7,-5,2,9,9,1,-6,-2,4,-2,7,-1,6,3,5,0,6,1,-4,-6,-4),
	    49 => w(-4,-1,0,-3,3,-9,11,-2,-3,-1,3,1,7,1,0,2,-5,-1,2,2,-4,-2,13,3,-2,-2,3,-2,7,1,-2,13,-3,-4,1,-14,-21,-9,3,1,-4,9,9,-4,1,3,2,1,6,-2,-1,9,-7,-11,1,14,-1,-4,1,2,8,13,7,-4),
	    50 => w(6,2,-5,0,9,2,1,-2,3,-6,-4,3,2,9,15,0,0,3,-4,6,2,-3,2,2,19,-1,-4,9,-6,-2,2,9,-9,-2,5,2,-3,8,2,2,6,-5,-1,-3,1,-6,-7,-9,8,1,9,24,-9,-7,15,0,6,4,-3,1,8,-2,0,-1),
	    51 => w(6,0,0,1,8,0,5,-4,16,-3,2,-2,-6,4,-1,5,-4,-2,-3,-53,7,-3,-3,6,5,6,-3,1,-2,0,1,-7,-2,7,-3,1,6,0,17,-3,2,-6,0,6,-7,0,-4,1,2,2,-5,-5,0,2,-1,-5,-7,-1,-8,1,0,-4,-15,-3),
	    52 => w(-7,0,-4,-41,-3,-24,-35,24,0,6,24,-2,1,-12,5,-7,18,17,11,-9,10,-2,3,9,35,3,-1,19,4,3,18,-3,-1,-19,-3,3,13,12,-2,-5,1,-26,-3,30,-3,1,15,21,-3,-3,6,-47,3,8,-1,2,10,-13,5,-6,1,3,0,-6),
	    53 => w(-9,-7,18,-7,7,5,15,8,9,1,-7,-1,-2,-1,-9,13,6,-2,-1,-4,4,-28,-48,3,9,-3,1,-11,10,-3,4,-17,5,19,9,7,-17,-32,-7,0,-27,3,3,3,1,5,-6,0,-1,24,-2,19,-18,-25,6,12,-4,12,17,4,31,21,16,-16),
	    54 => w(13,10,2,-4,-8,-3,5,-4,42,-7,-3,3,-2,-1,-10,4,3,1,1,-13,-14,-23,14,20,21,-9,4,-6,-1,-10,31,7,11,-1,-1,2,5,-11,-6,28,18,7,1,-2,2,15,34,7,-15,5,-3,28,-7,-11,-2,-7,6,14,4,3,12,-10,-7,5),
	    55 => w(-6,19,3,1,-6,-11,7,11,-20,14,5,19,18,5,14,20,-3,0,-7,3,-11,15,10,-17,6,4,-6,-7,-5,7,0,0,-3,6,1,1,10,4,12,-13,-20,46,-3,4,1,-6,-2,6,5,6,-10,10,5,4,-25,5,14,1,10,-1,15,-2,1,-2),
	    56 => w(-3,4,-1,1,-3,-2,-8,-7,-3,57,-11,10,4,-1,-6,-1,8,22,-2,-10,22,-3,-16,-3,-5,-5,4,13,3,0,6,3,-6,-3,0,7,-5,4,-15,-1,5,4,-6,-15,0,2,2,8,-3,1,-3,-1,5,8,4,-4,-3,-20,-2,8,0,1,9,12),
	    57 => w(1,9,5,-9,-3,7,48,-2,-5,0,-6,0,-1,-7,-5,-1,6,-2,10,2,1,-18,-20,-2,8,-9,-12,-3,-3,-1,3,-20,-4,8,36,-2,-20,2,5,0,2,-3,12,1,2,0,-1,-1,15,-9,5,-12,0,-18,0,2,0,5,2,6,-4,38,-8,1),
	    58 => w(1,3,4,-10,-23,0,-13,13,15,-6,-7,-3,-1,-3,-7,3,4,3,0,-4,-2,-1,10,-3,-21,0,7,20,1,34,-7,16,-15,1,-7,5,-49,5,1,-11,-1,-1,1,3,11,-4,5,-1,-9,-20,0,-1,-1,3,5,-10,-14,13,11,-1,-31,0,-4,3),
	    59 => w(6,-4,4,0,12,7,-10,-46,8,9,-4,2,96,3,-3,0,1,-13,-20,20,-1,-5,5,4,0,-2,6,-7,1,10,0,-25,-13,5,6,-4,-3,4,4,-7,-14,-8,2,-3,13,-10,6,1,-6,-14,3,4,-4,-6,-10,-34,15,-1,10,3,19,7,7,4),
	    60 => w(-1,1,0,21,-7,17,14,-12,-3,-4,21,7,0,-4,-9,9,4,-2,2,6,0,10,-2,3,14,0,9,-5,-5,-1,-6,3,1,-2,-3,2,-9,1,1,-4,4,-2,29,17,4,5,5,-3,1,-6,1,-6,1,5,-1,-1,50,-26,-2,-4,0,0,0,1),
	    61 => w(-4,3,-13,-1,3,0,6,1,-1,-2,3,0,-1,2,-1,-1,2,4,11,-3,2,-5,-14,-14,0,2,-1,6,-2,2,1,-35,2,13,5,2,-28,-3,5,-1,5,5,3,2,0,3,0,-2,-2,3,7,14,-2,6,-16,6,-3,0,-26,-2,-1,-10,28,-1),
	    62 => w(-10,1,-1,-1,9,2,0,-2,19,-4,3,11,0,6,5,1,0,6,-4,-3,-3,-8,1,-1,-34,1,6,2,0,-1,-1,-3,6,-1,-1,1,-4,-2,1,9,7,-1,0,2,-4,63,-5,11,-5,-3,-1,2,-1,20,-1,-1,23,1,-1,-7,1,2,2,2),
	    63 => w(-1,6,0,1,7,-8,4,0,-3,1,0,-5,7,-58,-1,21,3,22,67,-6,-5,1,1,-2,-2,6,-1,-1,-1,-3,0,8,-9,0,-3,0,11,-11,3,28,1,-29,0,6,0,1,-2,-6,1,-6,1,2,1,-2,5,-6,9,0,0,3,-1,-2,-1,-2)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;