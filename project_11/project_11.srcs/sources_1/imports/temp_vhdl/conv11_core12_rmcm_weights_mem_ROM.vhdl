library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core12_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core12_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core12_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(5,-3,-3,-6,14,-3,-11,7,-1,-1,1,-7,-13,-4,-4,6,1,-1,17,-9,-2,1,6,2,0,-6,-5,-4,-5,3,4,-3,4,2,5,-2,-13,-8,-3,1,-16,-4,-17,-7,-2,2,-1,-10,5,-1,-10,-20,6,-4,7,-2,2,-1,5,-1,-8,-13,3,-7),
	    1 => w(-3,9,-2,-4,-4,0,-12,5,-2,-4,14,6,22,0,-4,1,2,-2,-2,-2,4,-9,0,8,-6,-22,1,6,2,1,1,4,4,-6,3,2,-4,2,1,7,2,3,-3,-4,13,-6,12,-3,-7,6,-6,-3,2,14,-6,0,-12,-10,-7,-6,4,-5,-2,-3),
	    2 => w(-2,2,2,-7,-6,-8,8,-4,-5,2,-7,0,1,7,3,-1,-1,-8,-3,-8,-5,-1,10,-5,5,10,-2,0,2,-6,-6,-8,0,-10,11,-14,5,0,-2,-9,-5,0,6,3,0,-3,16,-2,23,12,-5,3,-6,-1,0,-3,-7,-3,7,-6,-11,-2,1,-4),
	    3 => w(-5,5,10,6,11,0,-2,-2,1,-7,-2,-12,-2,-4,-1,-9,-6,-9,-7,0,14,-5,5,2,-5,0,2,-3,2,13,-7,10,2,-2,-11,-3,7,2,4,-5,8,-3,-2,4,-7,5,0,-5,1,6,0,8,4,5,8,5,-3,2,1,2,0,-4,4,2),
	    4 => w(2,-3,1,11,-3,-3,2,10,0,5,-10,4,4,3,1,2,0,4,0,2,-4,2,-1,1,-5,-2,6,8,-2,11,13,5,-3,-2,-5,5,3,-1,-13,17,1,-13,2,-1,-4,5,-4,-1,-6,3,-1,-11,-1,1,4,4,-12,-4,-2,5,-3,0,1,-12),
	    5 => w(-12,9,-3,4,3,1,9,0,2,-5,-4,3,-5,15,4,11,23,31,2,4,-2,1,-1,-6,1,-7,18,-7,-2,7,11,-7,2,5,-1,-11,6,-5,-4,4,-9,2,4,5,0,0,3,-2,2,1,-3,4,-1,-3,1,-1,-4,-1,2,-4,0,-1,5,4),
	    6 => w(-9,-1,-8,5,-3,4,-8,-10,-5,1,-12,-3,6,-7,-5,0,-11,1,-1,3,4,1,-2,1,-1,-3,-4,-10,-4,-9,-7,2,8,-32,2,0,0,2,3,3,-7,3,1,-2,2,7,-5,1,-6,-4,3,2,-1,-4,-6,1,2,-2,-8,0,7,-7,-6,6),
	    7 => w(26,-6,-3,4,-2,2,-2,4,-2,0,-4,-1,-2,4,-1,1,13,-16,0,7,-6,-1,3,6,-2,2,-1,-34,0,4,4,-2,-7,5,7,-6,0,1,9,4,-2,-9,7,1,0,-1,-1,-30,2,1,-2,-1,-11,-6,1,-21,15,-3,1,2,3,3,8,-2),
	    8 => w(9,-4,8,2,-1,3,-2,0,1,2,-1,5,-5,-7,3,-1,3,-7,7,-13,1,-6,9,-1,4,13,14,-2,7,-9,2,5,2,0,3,-26,0,6,1,2,-7,10,-2,-13,27,1,-3,-3,0,-4,3,-9,0,0,15,10,0,1,-2,5,0,0,6,-2),
	    9 => w(-3,3,-6,11,8,-7,-14,-6,4,-2,-8,4,-3,7,2,0,3,-2,3,-13,-1,-4,-1,2,2,0,-13,-1,1,-2,7,-48,-1,4,0,-11,-8,2,-2,9,-5,4,7,-11,-1,-1,-3,1,6,2,-31,-26,4,-5,-5,3,-14,-8,9,11,11,-6,1,1),
	    10 => w(2,0,-2,7,-5,-4,1,17,-64,4,-5,7,1,4,3,4,-3,-5,-5,-11,-5,9,1,7,1,2,2,9,3,5,3,-1,-3,-1,15,-21,5,-1,1,8,8,4,1,1,6,-9,6,9,-7,16,-1,0,-2,1,1,1,7,12,4,4,-23,10,-9,-12),
	    11 => w(1,14,0,2,2,-7,17,-8,-3,2,-9,-3,3,1,4,-1,-3,-46,14,-6,-11,3,-6,0,20,7,0,14,-6,2,10,-3,2,1,7,0,3,10,-1,2,-11,-5,-4,4,-1,2,1,-16,-8,-5,-2,-3,5,-29,2,7,5,3,-16,-2,1,1,-2,3),
	    12 => w(10,3,-1,4,-23,1,5,5,5,19,-10,4,-7,2,2,-3,4,0,-30,5,-3,-1,-4,6,3,-1,19,11,3,27,12,-1,4,9,-12,2,6,-23,10,-10,6,-8,29,-1,-5,-6,-29,-7,-3,4,2,2,2,-2,7,2,9,4,3,5,10,21,-5,2),
	    13 => w(25,-5,0,-14,6,-3,2,-11,16,6,-11,3,-7,3,5,-11,-2,-1,0,14,-1,-10,-4,-1,1,-8,-10,-2,4,1,1,0,-5,24,-1,-3,13,-19,6,-4,-4,5,1,2,4,2,3,-2,6,-3,5,-4,4,0,-2,-4,4,0,-14,20,-7,1,-17,-17),
	    14 => w(-14,0,0,-1,6,0,-31,-8,-21,7,-22,0,28,13,3,0,-3,9,-1,-8,5,0,-2,14,-1,-2,16,1,2,18,-18,1,-5,10,21,-8,4,-2,0,19,20,10,-9,-4,-8,8,8,-1,12,-4,-5,-7,-6,4,13,4,-17,-4,-4,1,7,1,-5,-3),
	    15 => w(6,-11,8,3,-4,1,3,-4,2,0,-2,10,-3,14,-3,1,-3,6,3,13,15,10,4,8,-16,0,9,-5,2,6,26,29,1,-12,-8,-4,5,-3,-6,2,6,4,-7,-3,0,1,3,0,2,12,7,7,0,4,-14,-22,12,-1,4,7,-2,-13,-12,-8),
	    16 => w(-2,10,14,6,3,-2,4,-3,-3,-5,-5,2,0,-4,-11,-6,10,1,5,1,0,1,-1,-1,0,5,-28,5,-4,-10,5,27,1,6,-4,5,0,10,0,-7,-20,0,1,14,-5,-5,-18,-1,0,-3,7,9,3,-6,5,-2,-5,13,1,1,-1,-4,-16,-6),
	    17 => w(-12,0,2,-6,3,-1,26,-19,1,4,-1,-5,-5,8,18,-11,0,2,12,3,6,5,-5,-2,-3,23,0,-7,-10,-4,-9,2,3,-1,-2,-1,9,-2,-12,-4,-3,0,-8,0,0,6,13,-1,1,-5,-9,-2,6,0,0,-2,1,2,2,-1,-8,5,-4,-1),
	    18 => w(-3,1,-2,-4,-4,2,1,4,1,7,-3,-2,-9,-8,6,-2,24,13,0,-2,-2,-1,3,-7,3,19,-8,8,2,2,12,0,-7,17,2,-6,3,1,-2,-17,0,-19,18,3,-5,0,-4,-1,7,-6,-15,-3,2,0,3,7,-13,-3,2,-3,10,13,3,0),
	    19 => w(-1,2,0,-1,-3,2,7,-5,18,-6,1,14,1,-6,-1,5,-19,1,0,1,-5,7,-10,-2,0,1,2,1,1,-4,1,-8,-9,-9,-4,1,16,-6,-6,0,3,3,-13,0,-6,-2,-2,16,3,2,0,-2,-5,-3,3,-1,-10,-9,1,-1,-5,1,-2,-9),
	    20 => w(-1,-3,0,-2,-2,-4,2,27,-8,4,0,-2,6,-11,-2,7,-11,13,5,1,2,1,3,-7,-8,5,0,-5,4,7,-9,-2,-3,-3,-2,7,15,7,-15,5,3,-10,0,-16,6,-13,7,-12,-65,-9,1,-12,-1,0,-4,-26,26,-9,2,7,0,2,-5,1),
	    21 => w(7,2,2,-5,-10,-1,-7,14,-4,2,-14,-5,4,-3,-7,4,8,-15,5,-2,4,20,7,11,2,-4,-7,-3,-4,-2,0,-4,2,2,-6,29,0,0,-7,-5,5,-10,10,-5,4,1,-3,1,2,7,-3,10,6,1,-2,-5,-6,-12,-6,-11,15,52,1,-3),
	    22 => w(-3,5,-2,27,10,10,1,-27,-28,1,4,-6,-7,-5,2,-5,4,0,8,-9,-9,3,-8,1,-2,-1,7,-12,-3,-1,5,-1,-3,2,2,-28,-20,-4,3,-8,-12,-4,-3,-2,12,-13,1,1,-10,1,-2,12,-10,2,1,-1,5,8,-4,-4,-10,-7,7,7),
	    23 => w(7,-16,3,-6,0,-5,0,-4,1,6,4,1,-4,-4,16,5,-4,-24,28,2,-3,1,4,8,27,3,8,6,-3,7,4,37,1,6,10,14,-6,6,0,2,-47,-3,6,-3,5,6,-8,16,2,23,-2,2,-4,-7,2,13,34,4,-3,-8,12,-7,12,6),
	    24 => w(1,5,-3,-9,15,2,0,11,2,-16,14,10,3,11,7,6,-24,4,22,-3,1,-1,24,-5,0,-5,-11,1,9,-14,-15,3,3,13,11,-1,14,-14,4,-1,-3,-7,-14,3,5,18,27,-2,0,6,-2,-3,13,10,-1,-1,4,7,0,1,14,-4,-4,5),
	    25 => w(0,2,-1,4,4,-3,3,-1,-8,-1,15,9,6,3,9,-3,8,4,-12,16,9,-5,8,4,2,16,-5,14,-10,-3,-2,2,4,-1,5,1,4,7,0,-33,-1,9,6,11,6,3,18,2,2,-17,-2,-2,0,-3,-2,0,-14,2,8,-2,0,6,2,0),
	    26 => w(6,0,-5,24,24,0,-3,-8,0,1,-19,0,-4,1,4,3,2,-2,0,-6,7,-10,2,-3,3,0,19,-12,-3,-14,-8,-2,5,1,-13,0,6,9,-2,8,4,6,5,-1,-1,-4,-12,6,-16,4,-3,-2,-1,2,-5,15,-1,3,15,3,6,7,-4,0),
	    27 => w(-1,39,7,4,4,-1,2,3,-9,8,3,12,-5,-1,3,-4,-1,-7,-6,0,-31,6,-3,0,-6,-5,-7,-4,3,6,6,-17,1,1,21,-8,5,18,17,-1,15,-4,7,1,-7,5,0,-15,-3,-6,17,-1,3,-2,9,10,-7,8,-2,-3,9,-1,3,8),
	    28 => w(2,8,7,-7,3,-2,-6,-6,3,-2,-8,-6,4,-8,1,-10,3,-2,-1,3,-4,0,8,4,-4,2,-3,-5,-2,3,9,3,-9,4,0,1,-5,-4,0,6,-2,8,5,0,-5,1,1,0,-4,2,3,0,1,-2,-12,3,6,15,-7,-2,-4,4,-2,3),
	    29 => w(3,1,6,-15,5,1,12,-11,-7,-2,-4,4,-18,4,6,-21,-2,-2,-8,-9,5,-12,-7,0,-5,20,18,-9,1,0,4,-5,8,-5,0,-6,1,5,-8,-14,-7,-4,2,-1,-17,0,4,1,0,-3,-3,2,-7,1,10,-3,-6,-14,-3,1,-1,-5,-70,-1),
	    30 => w(-1,5,2,-5,-1,9,-2,-8,-3,11,1,-5,-6,-4,-3,4,-2,-2,-1,8,-12,-12,-1,-5,-2,1,-11,2,5,-6,5,0,-8,10,9,-1,1,-1,4,0,-3,-6,-3,-6,1,13,-6,-4,-4,-8,-10,13,13,4,8,3,-5,9,-7,-4,-4,3,5,4),
	    31 => w(9,11,8,-1,0,0,3,-7,4,-4,-12,-3,-5,-3,0,3,1,0,3,2,-8,5,-3,11,1,3,5,-10,1,13,-10,3,2,4,11,3,8,-6,-12,8,0,1,12,0,12,3,2,16,6,3,23,-13,-4,-8,-3,-8,10,-10,-5,5,-25,0,-4,-1),
	    32 => w(29,6,4,-5,-10,1,4,1,4,5,1,6,2,1,-2,0,1,2,-2,-9,-2,1,5,2,-3,4,-4,-4,6,0,-11,-7,3,1,-6,8,-2,-3,-22,-5,0,2,-3,-4,-12,20,2,-2,7,-2,0,-7,1,-1,-1,14,8,-27,-2,1,-4,-4,2,5),
	    33 => w(12,-2,-2,-7,-8,6,-4,-8,-5,-5,9,-4,2,-2,-3,-10,5,5,5,4,5,3,-4,1,1,-8,11,-6,0,-13,-4,1,7,-8,-2,-3,8,6,-19,-6,3,5,41,0,-4,2,-3,-1,-2,2,-3,7,-4,0,0,1,-10,-14,20,-13,12,-6,1,-1),
	    34 => w(-2,2,12,0,-5,-6,7,0,3,9,1,3,-5,-17,10,2,13,4,1,6,-4,3,4,-3,-2,-8,6,22,0,6,-4,-2,-8,-1,2,-4,5,0,-4,3,-1,-1,-1,-5,4,-1,2,-29,-2,-2,-3,2,-6,1,9,2,-3,6,-1,-7,-29,2,13,6),
	    35 => w(11,-26,-5,2,1,12,3,2,-3,0,-9,8,-2,-3,1,4,-17,-25,12,-13,-5,1,2,1,26,-1,-6,-6,2,2,5,-16,-12,-6,3,0,-1,-16,8,-5,-12,-11,-20,-4,-5,-5,-5,-8,-1,7,5,0,-11,6,-2,-6,11,8,-3,7,-8,10,-19,-7),
	    36 => w(-17,-6,3,22,-4,-5,19,-5,2,0,-1,7,12,4,-13,2,-5,11,7,-5,-2,1,26,-5,1,-3,2,-1,-10,-23,0,-4,-2,8,-9,6,4,-6,-3,-4,3,-5,1,0,-2,-8,3,0,-4,1,6,6,8,16,-7,-2,4,-9,-22,0,-11,12,3,-7),
	    37 => w(-3,2,-4,5,-4,-2,-9,-8,-6,3,2,-10,32,-3,-11,-8,-6,-12,-32,4,27,0,6,11,-5,5,-3,-3,2,-15,2,16,8,-2,6,-8,-6,2,5,6,-1,-4,-1,9,-23,-3,-5,2,8,-21,2,2,-4,13,-31,0,13,-11,-1,-10,-13,-8,5,-10),
	    38 => w(-4,-10,3,7,12,9,-20,6,-9,11,-16,4,-3,-1,-3,-1,3,-5,5,9,6,17,13,-5,14,-22,-16,1,4,12,0,5,-13,-13,1,-14,-3,-10,-9,-20,6,-3,-11,20,-2,1,-6,2,1,0,9,-7,10,-8,4,24,2,-10,-14,35,-4,-1,4,1),
	    39 => w(-5,-3,10,18,-11,0,0,-1,1,-1,15,-5,20,-2,2,-6,6,1,1,-4,-4,6,-8,0,2,6,-3,2,0,3,-10,4,1,11,-2,10,-10,-15,-4,-3,5,1,5,-7,3,6,7,-3,-46,2,-12,11,-23,-2,-12,-6,-2,4,-5,-3,4,-10,1,4),
	    40 => w(4,-5,-3,4,-28,1,1,-3,1,5,3,-12,1,-6,1,5,11,-7,-31,2,-2,-1,-5,12,-2,4,5,9,-4,12,-3,-1,7,-8,-1,-8,16,-21,6,3,3,8,-2,-9,0,2,-38,-16,3,-3,10,1,11,-5,2,0,6,3,-14,-1,-1,22,3,-4),
	    41 => w(1,-13,2,-3,3,0,-4,2,9,-1,-8,-7,11,0,-27,-8,-10,-1,-22,-2,5,5,-2,12,5,-15,1,3,-2,-6,0,4,-3,5,-6,-9,-2,31,4,30,0,1,3,-7,-6,0,-28,2,-12,11,6,-7,-2,-6,-11,-3,6,-7,-11,-1,-6,-5,0,-19),
	    42 => w(-6,3,-1,0,-30,4,-14,0,-7,1,14,-1,14,6,1,1,-1,6,2,-4,2,-16,4,8,3,-17,-6,3,-2,-6,0,1,-41,-15,13,-6,2,3,3,35,14,-7,4,-6,0,-2,20,7,12,2,-22,-2,9,-3,17,-6,-11,2,13,13,4,-2,-3,-2),
	    43 => w(5,-4,15,26,-3,1,1,0,-6,-4,-11,-25,8,-12,1,-7,-2,-1,2,3,-18,2,-17,-1,-1,3,2,-1,-2,4,-22,-6,2,1,-17,-4,-6,-3,-5,8,9,-3,0,5,4,3,-5,-15,2,8,-4,-6,-6,-1,-22,1,1,3,-2,1,-3,-9,-5,9),
	    44 => w(36,21,18,3,1,-1,6,4,11,-1,1,-11,0,2,2,-1,-6,0,5,1,1,-8,2,14,-1,14,7,-7,1,8,-25,10,3,7,5,-1,-3,0,-16,-10,-1,0,4,0,-2,36,8,-7,6,-2,-2,-10,7,3,1,16,-12,-22,0,1,1,-15,-17,-18),
	    45 => w(4,4,8,-8,-19,1,-9,-12,6,11,-6,5,1,8,6,17,5,-5,6,11,-4,5,6,-5,1,6,-6,2,1,-2,-2,2,-2,-7,-1,-10,5,5,-18,3,-2,-1,39,9,3,1,7,0,-1,11,-6,2,-14,4,1,1,13,10,-2,-14,29,-13,2,-4),
	    46 => w(5,0,4,2,6,11,12,-16,-18,-1,-1,-5,-7,-19,17,3,1,10,-5,-11,3,-1,2,-7,0,-1,-1,17,14,5,7,0,-5,9,-1,-4,2,7,2,9,-10,4,1,-6,10,-21,-1,-54,-4,-4,3,1,2,3,-2,0,9,-15,3,0,-17,17,-8,5),
	    47 => w(-6,-14,4,5,-1,13,14,4,0,0,4,-2,2,13,-13,9,-23,-1,-1,-17,-1,0,1,0,2,-3,3,8,0,-1,8,4,-16,-6,12,-9,3,-12,10,-1,-12,7,-13,11,-1,5,12,-25,0,9,2,2,24,17,7,20,0,1,3,30,-2,0,-7,-1),
	    48 => w(-10,18,16,7,3,-4,0,-5,-3,9,-2,4,1,4,-2,7,-9,2,4,-2,-1,-9,-8,-6,0,-1,-1,0,-3,-17,-12,6,1,2,4,-3,-11,-4,-25,4,-2,1,-2,15,7,-25,4,-3,-3,4,-7,13,4,1,-4,-10,12,25,-2,17,-2,-7,-20,-25),
	    49 => w(0,-3,-2,-3,-9,13,13,3,-3,-12,-4,4,-4,0,-3,-3,-5,-6,0,-6,0,2,0,-10,-1,0,-11,0,0,4,1,-10,-6,-5,-1,7,-1,-10,-28,-17,-1,-1,19,3,-4,-4,-3,1,1,-2,-4,5,6,1,4,1,-4,0,-2,3,-4,2,1,-2),
	    50 => w(12,0,-2,-4,0,-2,4,0,13,4,1,3,-2,9,25,-4,-4,5,-8,-4,-12,6,0,-12,-2,-3,-5,3,-6,8,-3,0,-4,2,-13,-22,8,5,0,1,-3,-1,-4,0,-19,8,3,-32,3,0,2,-6,1,-2,-3,3,5,0,-1,0,0,23,-2,9),
	    51 => w(-6,4,3,-5,-7,18,6,-8,6,4,-8,-9,1,-9,13,9,-24,-35,16,-11,-9,5,4,-6,17,-2,1,7,2,-12,0,5,-39,-3,0,-2,-5,7,2,-4,2,2,-22,0,3,3,1,24,3,-6,3,-1,-7,-12,2,-30,-25,11,-4,-13,10,-10,6,-2),
	    52 => w(-3,-5,1,-4,-1,-3,-2,0,1,-4,1,3,0,1,-4,3,5,-2,-1,-6,6,1,-4,-2,2,-2,-2,4,5,-15,2,10,9,3,-6,1,8,-4,-1,-7,-8,2,7,11,-5,4,-7,10,5,-3,-1,19,0,0,4,6,4,-10,-2,-9,-3,0,1,9),
	    53 => w(-15,-13,5,-27,2,1,4,4,4,3,5,-1,6,-1,-6,-7,-9,2,-2,-3,2,7,-4,-11,9,-2,-10,21,18,4,-1,-13,3,-19,-1,1,0,4,-3,8,14,0,4,-2,3,7,6,4,-2,-5,2,-3,2,1,-3,18,7,18,16,-7,-3,2,7,8),
	    54 => w(-6,0,-1,-3,1,-13,11,-1,-4,1,-9,3,-2,3,2,1,2,5,0,16,2,-1,6,10,5,4,-5,10,-1,0,8,2,1,-4,14,-1,0,7,5,-14,14,1,-2,15,3,14,1,1,10,3,0,6,0,-4,-1,0,-2,-29,6,4,5,2,-1,-1),
	    55 => w(-12,-1,-5,4,0,1,-13,14,5,-5,-1,-8,2,-5,4,11,13,8,8,-7,-6,-13,-5,-6,5,-1,4,3,-6,-15,0,4,0,-6,1,3,1,2,29,-4,3,6,3,29,0,0,3,-11,3,3,5,-3,-3,6,3,6,-34,-12,8,-2,0,-1,-3,3),
	    56 => w(-4,2,4,8,-17,-3,0,-3,-2,-60,12,7,-14,0,3,5,10,8,-5,-2,2,0,15,-14,-1,-5,2,-25,0,9,-10,2,-2,-2,-5,2,12,13,-4,1,5,6,-7,0,3,3,-9,0,2,-5,-9,-4,-12,-1,2,4,0,-1,1,0,3,-13,-2,-3),
	    57 => w(-6,3,-3,-5,6,3,-6,-2,22,-4,-1,1,7,1,6,16,4,7,0,-32,5,6,-2,10,-1,2,-3,12,5,-11,-2,-2,2,-21,6,1,-42,5,-2,-12,5,-4,2,0,22,-4,13,0,2,28,-3,1,0,36,-4,-4,-3,8,1,39,2,3,6,-9),
	    58 => w(7,4,-5,-6,-5,-7,3,3,3,6,39,-1,10,25,0,-2,-4,-11,0,-7,-4,-2,-14,10,-3,1,-18,-2,0,0,-1,-1,5,-7,4,3,0,0,-2,7,27,-35,3,8,0,9,12,3,-12,4,0,-5,13,-5,1,4,-15,-7,-16,4,-4,0,-2,-2),
	    59 => w(-10,-8,22,-15,0,-2,1,-1,-3,0,6,-14,-1,-8,7,-9,-6,0,-5,1,-34,1,3,3,3,11,1,5,-1,10,11,11,-2,-8,2,-2,3,39,15,0,-14,-1,-8,20,-8,-1,3,-12,-12,-5,1,-1,2,2,18,-6,2,4,-3,-6,14,1,-3,-1),
	    60 => w(16,23,15,11,2,3,-4,6,6,-10,5,23,1,7,5,5,-7,-4,27,11,-1,3,-22,24,1,21,-2,-7,17,-26,19,0,6,5,-3,26,27,8,-6,8,-3,-4,-5,6,-2,-6,7,7,-1,-2,2,-6,-4,7,3,-15,-9,7,6,0,21,-3,-2,16),
	    61 => w(-21,3,29,-3,11,3,20,-15,-7,-2,27,7,4,-1,10,7,7,1,-3,-1,22,-16,-3,24,4,4,14,4,-10,-6,1,12,-6,-9,7,-1,-15,14,-16,3,-2,16,13,6,15,9,5,5,5,13,14,6,2,-11,1,-1,3,8,23,-10,17,-7,3,3),
	    62 => w(4,-5,-19,-7,-25,21,27,0,22,14,17,5,-16,-24,-5,10,-5,-2,1,-1,34,-12,11,28,0,-2,-17,1,1,-6,-3,1,4,26,-4,20,9,-6,6,5,-29,14,2,15,-6,3,-4,9,-5,4,17,1,-1,-7,-1,-11,31,-3,-1,-2,12,4,29,2),
	    63 => w(8,4,-10,-10,6,8,14,-14,-5,4,-8,-15,-4,-21,-1,-4,-3,3,-25,12,-10,7,16,5,-5,-4,-6,5,5,7,-22,-40,10,11,12,-6,3,21,-12,5,-2,16,17,40,-2,-3,0,6,21,7,1,4,10,-10,26,-1,14,3,-18,-3,-4,38,-2,6)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;