library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core8_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core8_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core8_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-38,-11,-2,0,2,0,-3,2,-5,-2,-2,1,-1,-2,3,3,2,2,-4,7,-5,3,2,2,0,-16,6,0,14,33,-12,1,-3,-3,-12,14,-22,-5,-5,-2,0,3,-3,-2,-22,-20,2,9,3,10,0,-1,8,2,-3,-17,-14,-9,-3,-2,-9,-10,-10,-5),
	    1 => w(-11,4,1,-1,-20,-1,-2,-10,1,9,-16,-2,0,-4,-1,-6,0,2,8,3,7,10,2,6,2,-1,-8,-9,0,7,-3,34,0,-9,-1,0,3,-1,-4,-2,-4,-1,10,6,0,0,-3,-1,-1,2,9,21,2,-7,4,-2,-1,-12,13,-11,35,37,0,-9),
	    2 => w(-2,-1,12,11,6,9,6,3,25,3,1,5,-8,-19,-2,-7,9,-9,3,8,-17,-5,-4,-1,-3,6,2,-2,-10,0,-7,-1,-4,1,-17,20,4,1,2,4,-5,-12,-9,-4,16,3,-4,7,-7,2,-2,-3,-1,-2,-5,0,1,-4,-6,-4,-1,-1,-1,4),
	    3 => w(11,-28,-4,0,1,1,-7,5,2,2,-3,1,0,-26,18,-1,-6,5,6,-3,16,2,3,1,18,-2,-1,4,7,-1,2,12,-6,-20,-21,2,3,4,0,3,2,3,-12,5,-1,2,2,1,-2,-7,-3,0,-5,0,8,-18,-6,1,-5,-12,1,6,-5,1),
	    4 => w(1,8,9,2,-3,-1,-1,4,1,2,-5,-2,1,-1,0,0,11,-5,2,7,3,-3,4,1,2,3,6,2,4,-2,-1,-1,-1,4,-6,13,3,0,-16,11,1,7,4,-9,-3,-6,3,-17,-3,1,0,0,3,2,3,9,15,1,-2,-5,-4,32,2,-4),
	    5 => w(6,-1,6,0,-4,6,-16,30,5,24,-17,-1,6,-1,5,6,8,-6,-2,-2,0,3,2,9,4,-1,8,2,1,-10,-4,-4,3,-8,0,-9,-3,-3,41,4,-5,4,-10,-8,-4,-1,1,3,4,5,-9,-2,8,10,-2,3,-8,-9,5,-10,7,1,3,-5),
	    6 => w(-8,-1,8,0,6,4,1,-14,5,-3,-2,0,-1,0,0,3,-4,-11,-1,-1,27,-1,0,-5,2,1,3,-3,-1,3,4,0,-8,15,-3,-6,0,3,3,3,2,6,0,4,-1,-17,-3,0,-2,-8,-5,1,0,3,2,3,4,-3,12,3,-12,-1,0,-4),
	    7 => w(-20,-6,2,3,-5,0,8,6,0,-2,11,2,-2,9,-1,-2,-64,-14,-1,-4,4,1,-2,1,-2,-4,0,-14,-2,8,-1,10,3,-9,-1,12,0,-4,4,2,0,7,12,5,0,2,0,-16,1,8,1,3,5,9,-5,7,-11,0,-28,1,-3,0,-1,-3),
	    8 => w(14,-3,1,9,-7,-4,5,-3,4,6,-1,0,-4,-4,-1,6,10,5,-2,2,0,0,10,9,8,10,8,8,11,33,-3,-7,1,9,-8,3,1,-4,8,3,-4,-4,11,0,9,15,4,6,15,4,-5,3,6,2,6,7,4,4,1,5,-2,16,-1,4),
	    9 => w(17,-7,9,6,5,0,-3,4,6,3,-8,2,3,0,14,-2,-7,0,11,17,4,-3,2,2,4,22,0,-4,-6,-8,7,-11,8,22,3,29,7,-1,4,4,-5,8,8,-3,12,-1,12,1,1,3,10,1,7,4,-2,4,3,-4,-1,38,5,-7,-2,-3),
	    10 => w(4,-2,3,21,26,7,-17,0,-5,3,9,5,39,27,-2,-1,3,7,2,-4,7,12,2,14,0,-5,7,-1,5,5,3,0,-6,-12,2,-10,5,3,-3,23,33,6,-1,-14,7,1,-19,7,9,-6,-1,-3,8,7,10,-4,-18,-7,4,2,6,3,6,0),
	    11 => w(-5,11,17,9,-2,1,4,3,-3,2,13,19,0,22,-2,-1,4,12,0,13,15,3,3,1,6,1,0,-2,-2,5,11,25,3,-3,-15,-1,4,-5,8,6,43,8,10,-1,-3,-4,1,-14,-2,7,-5,-8,3,3,4,-4,9,4,2,-2,-5,1,18,13),
	    12 => w(-11,-3,-2,15,-21,0,7,5,0,-10,2,11,-3,-4,-8,11,-21,2,-9,-5,-2,1,11,7,-2,-2,6,-13,-16,2,0,-2,14,-9,14,-12,-1,-9,5,4,4,2,-3,5,8,1,-19,-8,-2,-2,1,-7,8,-5,4,9,-1,-6,-5,10,-12,4,-9,-2),
	    13 => w(11,7,-6,0,11,2,-8,-6,-14,2,-10,-8,5,0,-6,-11,2,-4,2,12,-14,16,-7,1,0,-6,-20,-5,-4,10,0,2,0,3,2,-13,-5,15,0,3,2,0,0,-4,-19,2,-4,3,-16,-11,-13,1,-11,-5,3,1,-9,-3,-1,-29,6,-14,6,-27),
	    14 => w(5,3,-2,-4,8,-7,-2,-18,-15,0,-9,-1,-12,-1,4,-3,-11,1,0,-6,-8,-2,-19,6,2,-16,-24,-9,4,11,6,2,-39,-2,7,-48,10,-2,5,-7,2,-13,-8,-7,-6,0,3,2,0,12,-16,5,5,1,-6,0,-21,11,-3,-3,-2,6,-13,-3),
	    15 => w(-6,-9,20,17,-5,5,-3,5,-5,8,1,4,5,3,4,3,4,6,2,6,7,-7,-3,6,-8,2,4,0,-3,12,4,-4,-1,2,-15,4,3,-35,-14,0,-11,-7,-7,-8,1,4,-4,-14,-3,8,-6,-1,5,7,3,-10,-4,15,5,-9,1,-23,-4,17),
	    16 => w(15,7,-1,-2,1,-1,4,-7,-2,6,1,-12,2,0,0,-5,-1,1,2,7,-1,5,-1,-1,8,-7,0,5,3,-9,-16,6,-11,-5,-2,6,-3,1,20,-18,-2,10,1,-6,-1,-1,0,-11,1,1,-2,-4,2,0,-8,3,-17,5,1,1,2,-2,8,9),
	    17 => w(35,-10,4,-13,0,-1,1,18,-4,-16,4,-2,-2,5,-1,-13,-4,1,3,-13,2,0,-2,-4,-4,5,-2,3,-2,-4,1,-4,0,-13,1,-11,-2,3,-68,0,-6,-9,-5,-3,-3,1,0,0,1,-11,-12,1,-29,-2,1,-5,-2,1,1,-5,10,3,4,4),
	    18 => w(1,-2,8,1,2,4,3,-3,-17,-2,-6,3,-7,0,-5,1,-1,7,8,-5,14,-4,-2,5,-1,-2,-2,10,2,6,10,0,6,1,-6,7,-3,4,1,-3,-7,2,-5,2,-9,-2,0,-6,1,-7,2,2,0,-1,-1,-5,0,-14,-10,-1,22,-4,-11,1),
	    19 => w(19,-3,-7,2,3,-6,-12,-9,1,-9,-7,-1,1,-5,-8,-1,44,-25,15,3,-2,9,0,8,-8,-1,1,-17,4,3,1,6,-1,20,-3,-29,1,-1,4,-1,5,-3,2,-1,0,0,-4,21,-3,-3,0,-1,-3,-10,-2,18,1,-4,11,11,0,-3,-2,-2),
	    20 => w(1,-1,-12,2,0,-5,-3,3,-3,1,-5,-1,-2,-1,0,2,5,-2,0,11,-3,-2,2,3,9,-9,1,-2,-1,3,8,-1,-5,4,-4,18,-3,4,24,5,1,-12,5,6,5,-3,-2,-13,-1,-4,1,9,-8,0,3,-6,4,-1,2,3,-2,-5,-1,7),
	    21 => w(-8,-6,2,-4,-2,-5,-19,-10,0,6,2,3,0,14,2,9,4,15,-1,-3,3,1,2,5,-1,-4,-7,2,1,3,11,-9,0,-4,-1,0,6,0,8,-1,0,1,1,-3,2,0,-7,1,0,0,-7,-3,-10,-2,2,-7,1,-14,4,0,4,7,8,5),
	    22 => w(5,0,-7,8,-1,-8,-3,5,20,1,9,-9,2,-10,3,1,-1,0,6,-12,6,-6,0,3,1,-1,-3,-2,5,-2,6,0,2,-2,0,8,-2,2,6,6,3,-1,1,-1,-27,3,1,-1,-1,-5,5,0,1,-5,3,0,2,4,5,0,17,9,5,2),
	    23 => w(-13,-2,2,1,-4,2,-4,4,0,4,13,-1,1,-9,1,5,9,-11,-14,2,-4,11,-1,3,-27,1,3,-25,7,0,-1,-6,2,-11,-2,2,1,12,5,-3,8,-8,12,4,2,8,-2,15,1,-4,-1,1,1,9,0,-23,20,0,-15,-5,-3,5,3,1),
	    24 => w(-1,-16,-7,18,3,-1,5,2,1,2,-3,4,-4,-4,-9,-5,4,0,-1,1,6,1,-4,2,-3,-3,-5,12,0,-3,6,-7,8,-17,-12,-5,13,6,-4,0,-11,-1,3,7,1,7,-5,15,3,0,-4,9,-7,2,-8,3,-4,-11,-4,6,-4,-10,7,19),
	    25 => w(-18,-4,6,-5,0,-1,-3,8,5,-1,-14,-8,17,-4,1,-17,-3,1,4,6,-5,77,-11,-2,8,-30,-15,15,19,7,6,2,12,5,4,4,0,-14,8,-4,5,-5,5,-4,7,6,10,7,-3,-1,6,-3,-1,-3,-2,13,12,19,2,7,-9,-6,7,-6),
	    26 => w(-3,1,-6,0,-16,-12,-3,1,0,19,-6,4,-8,7,-4,4,-5,3,2,12,5,1,-6,-5,4,68,25,-5,5,5,-9,1,-16,-8,11,3,6,6,10,-8,3,-3,-7,-2,1,11,-12,-1,1,7,-9,6,9,0,12,-21,4,0,-11,11,-3,-4,-3,-3),
	    27 => w(2,6,9,0,-1,5,-12,14,12,-11,-7,9,1,-22,3,1,11,-2,3,-3,-5,1,2,-6,6,-2,9,-1,-4,-11,-6,-7,7,2,-7,-1,8,-4,17,-5,-7,4,3,3,-6,10,1,-4,6,-3,-3,3,2,1,11,-1,-7,-7,2,-1,0,2,-7,-1),
	    28 => w(-2,-8,0,-9,-19,6,4,-13,1,27,12,11,5,-10,-9,3,3,-4,11,-3,-6,0,-3,0,1,1,2,14,0,-18,-5,1,-7,-5,8,-7,-7,3,-4,2,-7,-11,-14,-5,-7,-9,12,-6,-9,-2,3,-4,0,-3,-9,-2,2,-7,4,1,0,-15,-4,-6),
	    29 => w(11,12,-2,-6,-3,0,-6,0,4,4,-7,-3,-3,-1,-8,-4,-9,-3,-1,-3,1,5,4,4,-4,4,-3,-4,0,2,1,-3,9,2,-1,-5,24,-6,0,5,0,0,-9,-4,-9,-11,6,-2,4,-19,-1,3,6,-8,4,2,-5,-6,-1,-27,16,14,-1,4),
	    30 => w(4,2,5,2,-13,-5,-1,8,-13,-1,2,1,-19,-4,2,-1,-2,-12,-1,-7,-8,15,5,5,0,3,-17,4,1,-9,1,-1,-3,-10,-9,-8,-5,3,-2,-19,-17,1,-4,-1,4,-13,4,-6,-13,8,-7,5,2,0,-1,7,-17,6,-5,-14,-6,3,-5,-4),
	    31 => w(-1,2,-8,-10,3,1,-2,0,-5,-2,8,-15,5,17,0,7,-4,0,-2,-10,7,1,4,2,-3,-7,1,1,6,10,-4,17,-1,8,-16,7,-2,-14,-7,-4,2,-2,-8,-1,-1,4,6,0,10,15,11,-6,-21,4,5,7,2,6,0,1,1,-7,0,-3),
	    32 => w(6,-13,0,-14,-5,-1,-3,-20,-1,-26,-38,3,-3,1,1,-7,6,-1,9,-11,6,-2,6,-2,-1,-1,-2,-3,-5,-7,-16,7,5,6,1,10,-7,-9,-5,-10,-8,2,-17,8,7,24,-3,-11,11,0,-4,-3,7,-3,-8,-1,2,-24,-4,-21,10,-22,7,-19),
	    33 => w(3,1,-2,1,1,1,13,6,5,-4,5,-6,0,-9,3,-5,-8,-4,6,-15,3,2,2,11,1,-14,-9,-8,-3,-6,-7,11,-4,-9,0,1,0,-1,3,3,1,6,-9,-4,1,-6,-3,-3,2,-13,-6,-7,-1,3,0,3,-1,-1,-8,-3,-4,-9,-5,17),
	    34 => w(1,2,3,-11,6,-4,3,-9,7,1,-3,7,-1,-3,0,0,4,-7,-1,-8,-6,-10,9,-8,0,5,9,-14,-3,-2,13,-1,10,19,5,-10,-3,-1,4,-3,3,-13,-11,1,-7,-9,-8,7,-10,10,1,4,0,-4,8,-5,8,1,-32,-2,3,4,1,-8),
	    35 => w(-62,1,4,-2,2,-1,-8,0,-4,6,5,2,2,-2,-2,2,-1,-2,3,-15,4,-2,-9,-7,4,-5,-5,10,-4,-5,0,8,6,14,-7,-2,-1,4,6,-1,11,-8,-2,-1,-4,3,-3,25,6,-2,0,-5,8,-2,5,12,-14,0,5,-8,23,3,-3,-7),
	    36 => w(10,3,-7,3,-5,-1,5,-3,3,17,4,6,-4,1,6,1,6,2,2,-4,1,3,5,-4,11,27,4,-3,6,-6,0,-9,0,1,-1,-24,7,-2,-15,-5,2,6,11,-3,1,5,2,-10,8,6,5,4,1,2,8,1,4,-12,-2,-4,-4,11,-9,-1),
	    37 => w(8,-2,5,-1,0,2,0,-10,21,-20,1,4,3,-4,-1,-3,-5,15,9,-10,17,-3,1,4,4,2,2,13,-5,-6,10,7,0,-1,2,-2,0,1,-10,1,10,5,6,-3,2,9,4,8,-1,0,-9,-3,10,13,-3,4,5,18,-1,0,10,-4,-2,7),
	    38 => w(3,-1,-1,0,9,-11,-1,-5,-6,2,1,0,2,2,-6,2,-8,5,2,14,5,5,0,10,1,2,0,-6,2,-5,0,-2,-2,3,18,7,2,3,-1,2,5,5,2,3,-20,-8,1,-5,6,7,2,0,3,-7,1,4,-2,2,-3,7,-3,1,-1,-2),
	    39 => w(2,8,2,12,4,-4,27,8,1,-6,1,4,0,6,-1,-3,9,1,-5,5,2,1,0,-6,3,-1,0,-5,-3,0,10,-3,9,6,1,-10,4,8,16,1,8,-2,6,-2,0,-3,0,12,3,7,5,5,5,-3,-4,-2,18,-5,38,4,8,7,8,1),
	    40 => w(20,-9,7,0,-5,0,7,9,10,8,1,7,-6,-2,2,-1,-4,-1,5,-11,5,-6,-2,2,2,-6,4,-2,-15,31,-11,6,4,2,14,-12,-12,-2,4,-8,-2,11,13,7,-4,1,9,6,34,4,-1,-3,4,-2,-2,43,20,23,-5,2,0,-5,0,-2),
	    41 => w(-8,2,1,7,-23,0,1,3,-13,3,-22,-7,-10,5,3,-15,1,-21,0,7,-6,-6,3,13,-2,2,-7,3,-8,-4,6,-2,-2,-12,2,-40,4,0,3,8,3,1,-10,9,3,-2,-7,-1,4,-3,-12,-7,8,9,-2,6,32,7,-31,-11,14,15,-4,-17),
	    42 => w(3,0,9,-17,17,-8,-2,6,-13,-3,-12,0,-5,-1,2,-1,-2,0,-3,-6,1,-1,-1,0,-4,0,-1,7,-4,36,-3,-1,-6,-3,10,-1,7,4,-1,7,9,3,2,1,6,-13,10,-2,6,5,1,-2,-9,-6,7,0,1,-35,8,-6,-6,7,-4,-3),
	    43 => w(4,-7,7,-1,1,4,-8,-17,4,6,-1,4,0,6,8,6,-7,28,2,-8,18,-11,-1,-6,-11,-1,0,6,-6,-2,15,24,1,-5,-1,21,0,-12,1,0,42,5,-9,-5,3,-7,10,1,1,-25,7,-4,4,19,-2,6,22,1,6,-5,3,-6,-13,9),
	    44 => w(14,1,3,-8,-7,-5,0,-10,1,-16,1,17,-1,-11,7,0,15,0,-14,5,-2,-2,-15,-2,-3,5,-23,-11,-4,12,15,-6,3,19,-2,4,0,71,2,-4,1,-1,1,5,5,-1,-4,-6,1,11,21,0,-20,1,24,-9,-2,7,2,-1,-10,6,1,9),
	    45 => w(8,-13,5,-16,-7,-1,8,-3,-7,4,2,-7,8,-1,3,10,7,-5,-20,1,8,73,-34,7,0,4,-1,-9,-4,11,0,-11,4,-2,1,6,-5,39,1,16,0,-4,9,-14,-5,1,5,3,2,8,6,0,2,4,0,-2,13,0,-15,12,1,-8,5,3),
	    46 => w(2,-7,-1,4,14,-3,9,5,-5,1,1,1,17,-9,-2,8,1,5,2,1,7,0,-7,10,2,-17,14,1,-1,25,9,0,1,6,5,17,-1,-5,6,17,-4,-12,6,9,5,36,-7,9,5,-1,26,-2,-1,-18,-3,2,2,-1,9,2,-3,2,2,5),
	    47 => w(7,9,-2,8,3,-5,5,-3,16,-2,6,20,-1,0,0,-4,5,5,-6,19,11,4,30,-3,7,1,8,3,2,-8,7,3,0,-3,-7,6,-15,-15,1,5,4,7,-2,-1,15,-10,12,6,2,-19,0,26,14,0,13,1,10,-5,-2,18,2,10,6,3),
	    48 => w(5,5,-5,4,3,-5,-8,5,1,-4,-10,-7,-1,10,1,4,-1,4,0,-4,4,1,7,0,-6,-7,-3,-20,7,-7,-18,17,5,3,-6,0,16,-2,4,-1,-2,-17,7,5,7,-8,2,9,8,7,1,2,-3,1,6,6,-1,0,0,7,-4,-1,-6,4),
	    49 => w(-4,14,-2,3,-3,1,15,-15,1,-3,-16,9,-11,18,-3,8,-2,-5,0,-5,-22,-3,-2,-8,1,-11,-1,7,-4,-34,-12,32,0,5,-1,1,-2,-3,2,-9,9,0,1,-5,-2,5,1,1,2,2,-4,-4,2,5,10,23,-3,0,5,6,-19,0,7,-7),
	    50 => w(4,1,-5,4,4,-14,8,-7,-14,1,3,-12,0,2,6,-2,27,4,0,-1,-3,6,1,12,-5,-5,2,9,3,3,-8,0,-9,-24,10,-5,1,-4,1,10,-1,1,-4,-8,2,2,3,4,-6,1,0,10,-4,8,6,2,1,5,13,-1,1,3,3,1),
	    51 => w(1,11,7,-14,-1,-8,-6,17,-1,-5,12,2,3,-16,-2,5,5,4,6,8,11,-1,1,-4,3,1,3,6,-3,-2,14,-1,-5,7,-8,-4,2,0,25,-2,2,-9,5,6,-2,28,0,7,4,1,-5,4,-1,1,5,15,-28,-3,3,5,13,-7,-5,7),
	    52 => w(-4,7,4,-2,-5,3,-2,1,-4,7,-8,13,2,0,-1,0,3,5,-8,7,-3,1,-5,-3,-9,6,-7,2,-7,-1,-5,4,3,-4,-3,5,-3,2,-3,-1,-4,-15,3,-3,-2,-4,-4,-3,-6,-1,0,-6,-7,1,-3,-6,-9,2,2,-3,2,-9,8,5),
	    53 => w(-4,5,-3,-2,-4,1,12,-15,-5,-10,-3,2,-3,6,-1,12,-6,-1,3,7,-3,-4,3,4,-1,-2,13,-15,1,12,7,0,-3,-4,-1,-11,0,6,-4,-7,1,-3,2,3,3,-1,4,-1,3,-9,-4,0,2,-17,4,-3,5,2,-1,-9,2,-8,3,17),
	    54 => w(-8,-1,-6,-4,1,8,-9,-3,6,-1,-8,-3,-6,-12,-2,-3,-6,3,0,6,13,-10,2,-3,1,2,-7,-13,4,-5,5,0,3,16,-6,-12,-1,-3,3,8,-9,-9,1,0,-1,5,-3,6,-8,-3,2,3,-3,-1,-6,-8,2,3,6,-1,-5,-4,9,0),
	    55 => w(-4,-6,-1,-7,-2,-5,-1,-5,0,2,5,-1,-3,-10,-5,3,-12,-14,2,-5,-15,1,5,5,4,4,-3,-19,0,6,-11,-5,-1,9,-6,7,3,14,-10,3,9,-5,1,3,0,-4,0,8,2,-1,-3,0,0,-5,0,-4,18,-3,-1,1,-8,-5,-2,-1),
	    56 => w(13,2,8,-6,1,-2,-3,-21,-3,-21,-4,5,-1,3,0,-3,4,-5,-12,11,-5,0,0,5,1,0,3,7,1,-2,-3,3,-5,0,-1,16,-13,-21,-3,10,4,-5,0,3,-9,14,-10,12,6,8,-1,-3,1,-2,-7,-25,-28,2,-3,-4,2,-5,-2,-1),
	    57 => w(-24,-12,1,-14,3,-2,1,-15,-19,-13,-11,-2,-2,1,-1,4,-7,6,1,-14,2,-9,-8,9,-2,-7,2,-3,1,-3,-1,-1,-8,-10,2,-3,-6,-4,1,10,-7,-2,-2,-4,0,-2,-7,0,2,6,-4,1,2,-11,-4,10,-11,-16,4,-20,17,-14,-3,-8),
	    58 => w(-4,0,-31,-9,-11,-3,0,-21,-4,7,1,2,-5,-24,-4,1,-9,1,1,6,11,-17,4,3,-3,5,-1,3,-5,20,-3,2,-7,5,2,-2,-1,1,-1,-3,-12,-17,4,-2,-17,-25,2,-2,-5,-6,3,-12,-10,-7,-9,3,-12,-7,-5,0,-4,-6,8,6),
	    59 => w(-4,-11,-15,6,0,-3,1,-15,3,-8,3,3,1,2,-8,2,2,-1,-35,1,-7,4,-1,3,-18,-5,-10,-8,5,-5,-6,-17,1,-5,7,-15,-4,-12,-8,2,-31,1,5,13,4,-6,-11,-6,4,-7,1,0,12,-5,1,-38,-12,-5,-1,17,-3,9,-12,-10),
	    60 => w(4,-16,-18,2,-10,-4,-2,-8,1,-4,29,-9,1,16,-1,-5,-3,3,4,4,4,-3,7,-7,1,6,9,-7,16,-10,-13,-11,2,10,-3,6,18,-6,-7,0,-2,-17,-6,3,3,-2,6,6,3,7,2,2,0,4,6,5,6,-13,2,-8,-5,-3,27,26),
	    61 => w(-6,-23,-1,0,2,-2,-12,28,-5,3,-5,7,-8,-14,4,1,14,-4,3,14,-19,-13,1,4,3,-7,4,0,8,-12,25,25,0,4,-2,0,4,-3,0,-14,5,-3,6,-6,0,3,-5,-1,-1,-1,0,3,-7,9,11,12,-1,-2,4,2,-11,0,-2,-1),
	    62 => w(-6,0,-2,5,8,-22,12,-9,3,2,-8,2,2,3,-6,-1,-26,1,-1,-25,1,-2,-7,8,-3,1,8,-4,0,1,2,-2,2,-6,14,-18,3,-1,-2,10,2,3,-5,-5,-1,4,0,0,-10,2,3,6,0,2,9,1,5,-1,-2,-4,-5,-7,9,-2),
	    63 => w(3,18,9,-1,1,-2,4,17,-5,1,-15,3,5,-7,2,-1,-4,-5,3,12,9,-1,0,-1,3,0,1,3,-4,-5,12,2,6,-23,0,3,2,4,20,2,9,12,-7,9,-4,28,-3,23,7,1,-7,4,-2,-1,6,-20,4,-3,-3,-1,-11,-4,-5,10)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;