library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core6_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core6_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core6_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(33,-15,-1,-5,-4,-3,3,-6,4,6,1,13,-5,49,3,2,7,-2,1,-1,-5,2,1,1,3,10,1,1,6,3,4,-2,-22,-2,4,-2,1,-5,-10,6,-4,5,5,-11,-7,-1,2,3,-14,-1,-34,-2,-25,0,5,-2,-5,3,62,6,-2,1,-3,-17),
	    1 => w(-2,-21,-5,6,-8,4,6,1,4,-3,-7,-38,2,-20,-3,-4,2,-5,1,2,-2,1,-3,0,-3,2,7,3,3,5,66,11,1,5,28,-3,3,0,-3,45,3,0,5,1,-25,2,53,11,2,-2,-7,-8,9,-8,0,9,0,-1,4,1,-3,-11,-2,2),
	    2 => w(-2,1,-9,-31,-1,-3,3,-2,-7,5,-3,0,-2,1,-6,-32,-18,0,-4,11,5,3,5,-2,4,68,-2,-11,-1,-1,-5,13,16,-25,15,-8,-5,-14,39,-1,5,-22,28,-1,0,4,-2,4,-6,3,-2,3,2,0,-9,7,10,8,2,5,-14,-5,65,8),
	    3 => w(7,-6,-22,3,15,6,5,-1,-6,8,-41,-1,-2,1,-4,-1,3,-2,-7,3,-3,10,-3,9,5,-1,-2,0,-1,1,-13,8,12,1,1,31,3,-2,-3,5,-8,1,12,3,-4,1,4,-1,-15,1,15,2,10,-16,-1,-5,-3,-3,3,1,-33,8,-6,-1),
	    4 => w(2,1,3,10,-17,-6,31,-8,7,3,-9,3,4,-4,6,1,-16,25,-2,-1,31,-1,-4,-3,-20,11,7,5,4,-8,-9,1,1,0,3,-12,-2,-9,-2,6,-5,5,7,18,-2,0,-10,-2,-5,-9,-1,18,8,-4,6,8,7,11,2,4,-1,-1,-8,-2),
	    5 => w(-8,-9,-6,10,2,1,-3,-3,6,3,1,0,5,-1,-2,1,0,-3,10,1,-7,6,-7,-5,2,-4,8,16,-6,-5,-2,8,2,-3,13,1,0,-2,1,-3,9,4,15,-6,-1,3,5,-1,1,-4,-2,-3,7,-6,-4,-11,3,-4,-4,0,-10,21,8,-5),
	    6 => w(3,6,-3,-3,-48,-4,-2,12,-21,-6,-42,0,-4,16,9,0,-2,13,1,6,7,-5,1,-13,19,-3,-5,6,-1,1,-9,13,-1,-7,11,0,4,4,-5,-3,-1,-1,-1,-35,7,-1,-21,3,-4,-1,-6,8,11,-5,32,0,-7,1,-3,2,56,-3,-1,-7),
	    7 => w(0,-3,-3,1,-5,-2,-9,1,-7,-1,3,0,-21,-2,-6,11,14,-1,-14,11,1,0,-15,12,3,0,13,3,4,1,-1,-26,5,-4,-8,-3,-7,2,33,1,11,-3,2,-17,-6,5,-5,-2,-3,-10,-6,-3,3,5,3,0,4,2,-16,-3,-2,-10,-12,-3),
	    8 => w(1,2,-13,3,-6,9,11,9,-1,-3,-1,3,-3,3,-5,2,-8,-6,2,5,0,-5,-3,1,-35,0,11,-2,12,-1,-15,5,-7,0,-1,3,2,7,16,-2,8,0,5,11,6,2,-13,-6,2,2,3,-6,-1,6,3,-1,12,-9,1,1,0,1,-1,0),
	    9 => w(-6,9,1,13,1,17,10,1,-1,-2,-2,1,0,1,-7,-1,2,-3,10,-1,4,-1,-5,-4,1,0,1,4,6,-1,1,-14,-2,-1,-16,-1,13,-7,10,-2,4,-3,17,-1,-1,2,-6,-3,5,-12,-2,-13,-1,-6,-7,-15,-2,3,5,-5,-11,17,12,1),
	    10 => w(0,3,-4,-2,-3,4,-5,-6,-15,-4,-4,7,0,-3,5,-1,-1,0,-2,-3,-2,-17,-1,-8,-16,-3,7,4,4,2,-8,-16,10,-4,-1,-6,9,-21,-3,-4,4,1,1,1,-4,4,0,-19,-5,-1,0,-6,5,6,3,-2,-3,2,3,3,6,1,-4,-3),
	    11 => w(2,1,-2,2,9,-2,1,5,26,0,3,3,4,-32,-1,0,13,-5,-8,2,-10,-8,-6,4,0,0,-13,-1,5,-21,-1,8,-30,6,-25,-1,-6,-20,15,11,0,-18,1,-5,-3,1,-5,5,-2,-6,10,-2,0,-7,4,-4,-12,6,-1,4,0,1,0,-3),
	    12 => w(8,-1,-2,-19,3,-1,0,9,-3,-23,2,-1,-7,5,11,1,11,-5,3,-5,2,-4,34,4,4,3,-2,11,-5,8,-4,-1,-17,-11,4,-4,-9,7,10,-3,-1,-1,10,3,-4,1,-9,3,1,0,1,-10,4,-4,8,-3,1,-15,-3,26,1,8,5,-3),
	    13 => w(1,-2,-17,0,-1,9,41,0,-7,15,-8,1,-13,1,-20,-6,-2,-7,5,3,-8,-7,18,-1,1,9,-6,4,42,-20,2,-1,4,8,27,-3,12,24,-1,0,-3,12,-6,5,1,-3,9,-8,-58,2,3,6,-18,13,2,3,0,-10,11,3,1,-27,-11,1),
	    14 => w(5,-2,-12,3,-21,2,-33,36,5,56,15,-2,13,-2,0,-9,-6,-6,-2,-6,-6,3,3,5,0,6,3,-16,2,1,1,-5,0,-2,6,-4,-16,18,-1,0,3,-2,-1,9,-14,7,13,0,12,-17,-5,6,11,1,-2,5,4,-17,5,8,1,-15,9,-13),
	    15 => w(-12,4,7,2,-5,5,6,-23,-1,10,-1,1,-10,0,0,11,4,-2,-2,3,2,22,5,-13,11,2,7,-7,-3,9,4,55,-18,12,4,-2,12,-1,2,9,14,16,3,11,0,-3,4,3,4,7,5,-2,-1,4,-3,21,-3,1,15,11,-12,-9,2,6),
	    16 => w(2,2,1,5,-4,5,1,-56,-3,7,53,3,3,8,13,-1,-19,21,-7,4,-11,-13,3,2,8,6,16,-8,9,6,1,1,-7,9,0,5,3,5,-4,0,-2,7,18,-5,0,-3,-2,-12,-1,2,2,7,-1,-1,-3,-2,10,-15,6,2,-16,3,-5,5),
	    17 => w(17,0,-3,22,1,-22,-14,-2,-8,2,-15,0,-49,-1,2,-3,-25,-18,-13,4,-19,25,-18,8,3,4,4,-11,-3,0,9,-6,0,-32,1,-6,28,27,4,-3,14,-7,4,-3,4,4,1,2,-5,36,-19,25,16,-7,0,-5,-2,6,10,1,23,4,-29,23),
	    18 => w(-1,1,-11,1,4,-2,2,-10,-20,4,-18,-3,4,0,-16,1,0,4,-2,2,4,6,-21,-2,44,-1,1,2,1,4,28,-5,2,-2,0,-6,0,3,-6,23,14,3,-1,-8,-17,-12,1,6,0,-1,-6,18,7,9,-7,-3,23,-8,-28,2,-1,-3,-10,-6),
	    19 => w(3,14,-2,-1,-28,29,5,-6,-1,-10,0,-1,11,14,0,-18,11,4,-22,-9,-1,1,-12,21,1,13,6,4,2,-3,-2,-7,-9,-3,-4,5,1,-5,-3,10,-16,-2,3,-4,-21,4,1,-3,1,-3,7,-15,2,-6,-3,0,17,2,-17,-7,1,10,-13,3),
	    20 => w(2,1,8,0,-22,6,-1,-5,0,0,-2,0,4,2,5,-6,-1,-19,11,-1,7,2,1,3,-11,5,-10,4,0,-1,-4,0,2,-23,-2,-1,-2,18,6,-4,3,2,18,-6,-7,8,-5,-3,-2,9,-1,-4,12,5,1,5,-9,3,8,-11,1,0,2,0),
	    21 => w(-6,-1,-1,-8,4,3,5,1,3,6,5,2,19,4,9,0,10,4,-7,-2,-1,-19,-14,-9,0,4,-1,4,-1,9,0,-7,-2,6,3,-2,2,1,4,1,2,14,-9,-2,5,-1,4,-5,-7,-6,4,12,-12,2,-3,-6,-2,-5,16,1,18,16,3,-12),
	    22 => w(-10,2,-12,4,-6,1,-3,7,6,-15,-4,1,1,1,16,-3,0,5,3,-7,-5,0,-5,-3,1,7,-3,18,1,-2,-10,-20,-7,6,-1,7,-3,2,4,-4,11,-3,-1,-9,-6,-3,3,1,5,-2,3,-4,0,1,0,0,6,0,10,-7,-3,-18,-4,-12),
	    23 => w(8,9,0,3,7,2,-3,3,-5,8,0,25,2,12,8,-3,2,0,-2,-1,7,-5,-1,-23,6,2,-1,0,1,2,-4,6,-4,-1,14,6,-13,1,4,-1,8,-3,-1,-4,5,2,4,-21,1,-4,-5,-8,-1,6,-3,1,4,2,2,0,2,8,2,-1),
	    24 => w(3,-1,3,9,8,5,-6,0,5,-4,5,5,-2,8,6,5,14,4,-1,-4,-3,-1,1,-2,21,8,-6,2,4,5,4,-2,-4,6,3,-4,-4,-19,1,5,-12,1,-12,3,-5,0,4,13,1,-17,6,3,11,5,13,-8,9,-15,-2,6,-1,-1,-8,-4),
	    25 => w(-7,-2,0,0,-3,0,-44,-1,-11,3,-11,-1,2,5,7,-5,-6,2,5,2,-2,5,-4,4,-1,2,-3,7,-4,-7,1,9,2,12,66,-2,12,10,2,1,0,-8,22,3,-6,-6,7,-1,12,-4,7,-3,-5,-68,2,9,0,3,-18,3,4,9,0,-3),
	    26 => w(8,1,-1,3,-45,-3,24,3,2,11,-25,0,-1,2,-18,-4,2,-1,-2,6,8,-1,18,2,-15,3,-7,-5,-1,-1,2,-2,8,-1,8,-1,32,16,-1,-2,-3,-1,2,0,4,6,1,4,2,17,-2,7,6,-4,-6,2,-2,19,-2,3,60,3,5,2),
	    27 => w(1,-5,3,3,7,-3,6,35,-63,-5,3,-13,-41,-3,-1,11,6,5,9,12,12,6,4,2,-2,-2,2,-4,2,-9,-3,-17,-7,7,-10,-2,4,0,-5,0,10,-3,-1,-2,0,-3,4,3,-5,1,0,1,0,-7,1,0,-5,-1,-2,3,-6,-1,-1,-1),
	    28 => w(1,-1,9,-5,7,-16,-8,12,6,-13,1,11,9,2,-6,-3,-2,2,-4,0,-19,3,4,0,-5,5,-6,-2,-5,7,-5,3,3,5,1,10,0,0,-5,1,6,-4,-1,21,4,-2,12,2,-6,-8,2,7,4,-3,4,-5,-8,7,1,-8,3,-3,-7,8),
	    29 => w(-2,-8,5,-16,-3,-3,0,2,9,2,4,-4,18,2,3,5,4,5,15,-4,-2,-8,15,-1,-5,-1,0,4,2,18,3,5,-2,-5,-10,11,-3,1,-6,-2,-3,-9,-11,-6,-1,1,-3,-1,6,-9,-14,-1,3,11,2,14,4,0,-24,-3,-1,-23,-8,-4),
	    30 => w(4,-3,-2,-3,30,0,-5,-5,1,-20,-3,-1,3,-1,15,3,2,-1,12,13,12,-9,-2,-1,32,-5,9,-6,-2,-7,4,11,2,6,5,-6,-10,-11,0,-10,0,0,0,-17,2,-12,-1,-5,1,-17,4,-4,4,-10,-2,6,10,-20,3,-4,9,6,-4,-11),
	    31 => w(-1,2,0,0,-11,-1,-5,-25,-27,0,2,-18,-11,-10,3,6,-3,-7,-4,-20,1,-3,4,-3,-2,2,2,-1,-1,-10,2,-21,18,1,0,10,-5,2,27,9,-7,-5,5,7,16,-2,-4,-1,-1,3,-21,20,4,0,2,-11,-2,0,4,4,0,13,9,0),
	    32 => w(-4,-4,-3,-9,6,7,2,11,-4,4,7,5,0,-8,2,10,16,24,-2,6,0,-10,2,-4,29,0,0,-4,-1,-7,20,0,-5,11,-2,4,0,-15,-3,-3,-20,-4,6,-6,2,4,12,3,-1,-26,-1,0,0,-15,-2,3,23,-1,-1,-8,0,-3,-1,-7),
	    33 => w(6,3,8,7,1,12,9,-4,3,2,7,2,-10,-4,6,5,-4,1,19,3,1,-5,-6,2,3,-10,-3,-1,8,1,2,-5,2,9,15,4,18,-5,0,-3,2,-7,2,-1,-2,-16,3,2,-1,-5,-2,20,-8,-33,7,12,0,2,-2,0,2,27,7,2),
	    34 => w(6,-1,4,-2,16,-1,-2,-8,25,-12,-3,-5,0,3,-2,-1,1,-35,-3,7,-6,-12,23,11,-7,0,5,-4,2,-8,0,5,-2,-3,-3,-2,0,15,-1,-8,-3,2,-1,10,-2,55,-3,17,5,0,-1,10,-6,16,-8,0,8,-1,-28,-2,13,5,-8,5),
	    35 => w(3,4,0,-4,-28,-1,-4,-2,-12,-1,0,-16,-4,1,1,29,-4,3,-3,-1,14,4,1,11,2,3,3,2,4,-2,0,5,-1,1,9,3,15,10,-5,-4,-15,21,-2,12,-1,2,-2,-1,-3,-10,6,5,2,4,8,0,-52,-2,1,3,1,21,-7,2),
	    36 => w(1,1,0,-1,-3,8,-3,-2,1,6,-6,11,4,2,9,4,0,-14,5,2,-11,-1,2,5,6,0,-5,-1,5,-4,1,2,-6,-2,1,2,4,-2,8,-3,21,10,-21,-3,-4,-3,5,-7,2,0,0,4,0,7,-7,1,1,-1,0,7,2,0,2,2),
	    37 => w(2,1,-7,0,1,-8,-5,-7,-1,1,0,4,-2,-2,-4,-2,-2,0,-4,-1,3,5,3,1,1,4,3,-12,3,-2,1,23,-2,-5,7,-6,6,-2,2,-3,-14,-3,-10,-1,1,2,-7,3,5,1,-2,8,-11,-1,2,-8,-1,-2,0,1,-1,8,6,5),
	    38 => w(13,-3,-5,1,-10,1,-3,-8,43,3,4,3,-1,4,12,1,0,5,-2,-20,3,3,-8,1,-12,-1,-16,0,1,6,20,-11,3,2,-1,-2,-2,-8,0,-1,7,-1,-1,-6,-1,-6,-13,-15,5,-6,7,13,4,-3,8,-1,2,2,-6,14,-9,0,-2,6),
	    39 => w(-3,-17,0,-5,7,0,-4,-2,-3,-1,-1,9,8,11,9,-17,-4,4,-1,7,5,-7,0,2,2,13,1,-2,-1,-15,1,-5,-6,-3,-10,1,-9,0,4,-2,-3,-12,0,-2,-7,6,1,10,1,1,3,-4,0,3,1,4,11,1,-1,-1,-1,4,6,4),
	    40 => w(-1,1,1,4,7,-6,3,13,-5,-1,0,-21,-2,3,-8,-2,12,4,3,5,18,3,1,1,8,-4,4,-3,8,0,3,3,1,0,-3,9,2,9,5,-1,1,-3,2,5,4,1,4,-5,-1,-1,1,-7,-4,2,-3,-2,4,-15,-4,-9,0,0,1,9),
	    41 => w(-1,-6,-2,0,-3,-6,12,2,0,3,-2,-1,5,-3,-6,1,-1,1,1,-4,6,-4,6,-1,2,4,1,-39,4,-1,1,-18,-4,-12,7,-1,10,3,0,1,-5,12,8,4,-2,-2,-8,-1,-3,-2,-5,-3,-1,-2,1,16,-3,6,19,-2,-1,-19,3,1),
	    42 => w(-5,-7,-7,1,4,4,-1,-8,6,-15,-8,3,3,-6,-1,0,1,-1,-3,-13,-2,-42,7,-3,-12,2,8,7,2,-15,-2,-22,5,8,0,4,6,6,-1,10,7,-2,2,0,-9,2,2,5,7,-3,-2,-11,5,-11,-9,-1,-16,2,-8,0,-34,4,-9,-1),
	    43 => w(-1,2,-3,-2,-13,-1,-4,-7,-18,5,-1,-1,6,-13,3,5,-9,-10,30,-3,-8,5,-2,6,1,4,18,0,1,13,1,2,-11,-4,-15,-4,4,-10,9,52,-4,-5,-1,7,-5,-4,-2,-4,-1,-5,-4,0,-3,8,7,4,5,-3,3,-1,0,2,4,-1),
	    44 => w(0,16,13,-4,2,18,18,17,4,-1,3,20,4,-1,-7,-1,10,13,10,-3,-5,-1,15,-7,20,-8,2,3,22,6,4,-7,16,6,-3,23,4,10,4,2,-3,0,20,7,-8,-9,0,-19,4,-2,10,0,3,-1,-5,0,-3,15,-1,17,-3,6,-8,7),
	    45 => w(2,2,18,-5,-7,2,4,0,16,15,-17,5,3,-1,-16,-4,-5,1,12,2,5,-8,21,-2,-4,-3,5,17,25,-13,6,24,7,-8,11,-10,33,4,3,-1,1,6,15,9,3,1,24,10,11,9,4,14,2,21,-5,12,0,-4,30,8,8,53,14,6),
	    46 => w(0,-5,8,2,9,-2,1,9,13,-4,31,0,7,-1,-27,1,8,2,-9,-1,-24,5,-7,-11,-7,12,3,59,-5,-2,1,7,1,28,3,7,17,48,2,1,12,8,-4,8,3,10,2,20,15,10,-3,9,11,-2,19,4,-16,6,-1,6,-5,-8,-10,1),
	    47 => w(0,-4,15,5,12,4,2,12,7,7,-2,8,11,11,-4,16,-17,0,7,13,6,-11,-6,-9,-6,-12,5,4,1,7,15,-19,27,14,4,17,18,6,17,6,16,48,-5,-11,-5,8,7,-1,11,14,-3,4,-3,17,5,10,13,6,-5,11,1,2,-7,5),
	    48 => w(5,0,-4,13,18,-5,-21,29,-5,-1,-31,-23,3,-5,-1,3,14,-9,10,-1,-2,1,1,1,-13,-9,-10,4,-2,-2,-2,6,-8,-1,0,4,3,37,3,-8,-12,-5,-12,84,9,2,9,-3,5,-3,-10,-8,2,-7,-5,1,14,3,-8,4,-8,3,9,9),
	    49 => w(-8,-5,-14,-18,-8,-1,-22,1,-9,3,7,-4,15,5,-7,-3,30,16,-9,-6,11,-2,-17,-8,1,2,4,-1,-15,-8,-10,-14,-4,-22,-34,15,-19,-21,8,0,-11,0,-3,-6,-2,-2,4,-8,-7,-22,-7,-22,-4,9,-3,1,-2,0,-16,0,-16,4,2,0),
	    50 => w(-4,-13,3,3,12,9,6,-4,0,-8,-10,2,-3,-4,24,-3,-2,9,-2,-9,3,2,9,-8,29,3,27,1,1,0,-28,10,-9,-7,-3,3,8,3,0,1,-25,-11,-3,-5,2,-17,3,-7,17,6,0,31,-8,-9,5,4,7,-13,38,-8,13,10,-2,-5),
	    51 => w(0,-19,2,5,28,0,-12,0,14,-2,-1,0,-2,3,3,13,3,16,6,0,-8,-6,19,-8,-2,-6,-5,-5,1,2,-1,-9,-24,-2,-2,3,-3,0,-14,-12,-1,-16,-1,5,50,-4,-1,4,-7,-1,13,42,-1,-11,0,4,8,4,24,4,-5,-1,34,-3),
	    52 => w(4,2,4,-3,2,3,4,-1,1,-2,-2,4,-2,11,-1,-6,0,-4,4,-2,10,-2,0,0,11,2,18,-7,-7,-2,-13,-1,0,-1,1,1,-4,3,15,-1,21,2,-8,0,5,-19,6,-4,-3,9,-1,-9,7,12,1,-6,-6,0,1,4,1,-1,3,-4),
	    53 => w(-2,-3,-5,-2,3,-5,-3,13,-2,1,-1,-2,1,-3,-2,2,-7,2,-3,-1,1,-10,-12,-4,-3,-3,5,7,-2,1,7,-12,-5,14,-9,-2,-20,3,-1,4,-11,5,6,-3,7,17,-1,-2,-4,4,7,11,-9,16,0,0,-2,-9,21,0,-26,26,-9,3),
	    54 => w(-6,-7,-6,2,16,3,3,-5,-56,-3,-5,-1,6,-2,13,-1,-2,1,-8,-6,0,-5,3,10,-24,6,4,5,1,8,10,-17,0,5,1,3,-6,7,-1,1,18,1,0,5,-4,-7,4,25,2,-6,-2,40,-3,-5,4,2,7,1,-5,2,2,-5,-5,3),
	    55 => w(-2,-3,0,-2,16,1,2,-1,4,2,-2,8,-5,3,-10,13,2,2,10,-3,9,-5,-4,-12,4,4,-3,2,-2,2,2,-5,-3,-1,-1,3,3,3,9,-5,-4,-3,1,-2,0,-4,2,-2,8,-2,-1,2,0,-1,-8,-2,-5,2,1,-4,-5,1,9,1),
	    56 => w(-2,0,-2,-11,-1,-3,-14,-4,0,-8,14,-6,2,-18,0,4,-1,3,3,6,-5,-1,2,-1,2,0,2,9,-12,-6,6,0,26,-3,-1,9,4,2,8,-3,3,-7,7,-24,4,1,-2,-4,-1,5,-1,-10,0,-3,-1,19,-4,-15,-1,-5,-1,-1,0,-1),
	    57 => w(8,5,-4,3,-1,-2,-6,3,13,-4,5,1,-14,-3,8,4,-5,-4,12,-2,1,1,9,4,-3,-17,0,-6,8,6,-2,-4,0,11,-52,-2,-20,1,-12,-1,-4,0,-12,-4,3,3,3,-3,6,7,-1,7,0,26,3,-52,3,-1,2,1,9,-40,16,-5),
	    58 => w(5,-4,7,-2,2,2,-3,3,8,7,2,-2,-1,3,22,2,0,-8,-1,8,2,-4,-6,7,3,0,0,-8,-1,-2,2,55,4,0,-2,0,0,-12,-2,5,12,1,1,-1,-2,-5,7,-7,-3,2,0,8,-2,-5,57,-8,3,-9,-2,-3,-43,1,-2,1),
	    59 => w(1,14,1,1,4,4,-6,0,-28,-1,-1,-3,-21,0,4,-5,-5,-10,-3,-9,-5,-9,7,0,4,2,3,1,2,6,0,0,2,-2,-10,2,3,-3,73,-2,17,-13,1,-4,-4,-2,-5,-5,-3,-3,2,-8,-4,13,-1,1,-2,2,11,-4,3,0,-3,-1),
	    60 => w(0,2,-4,4,-1,-11,2,-14,1,-7,-7,-9,-2,0,-7,0,-2,-6,-2,-1,-5,3,0,14,8,2,1,1,1,0,-2,1,-1,3,0,0,0,-5,1,-1,12,3,-24,3,3,5,1,1,-2,-1,-3,2,-1,2,-1,0,3,-9,1,-1,4,-4,0,-2),
	    61 => w(1,1,-2,-2,-2,7,-8,0,2,1,-2,1,7,0,3,1,-3,6,3,6,-12,1,17,8,-2,-1,0,5,1,2,0,0,0,3,0,25,-13,1,-1,2,-3,-2,0,-1,2,2,7,5,2,-7,-3,-4,-5,-11,0,-1,0,-4,2,1,-2,12,3,-2),
	    62 => w(2,-7,0,-1,16,-1,0,-1,17,2,-7,3,-1,2,-6,-1,0,1,37,1,6,4,-5,-13,34,1,1,6,-1,2,1,-1,-4,2,2,-1,-2,7,1,-8,8,1,1,-2,-5,14,-1,-1,2,-1,-20,76,-9,6,0,3,0,2,1,5,-5,1,2,4),
	    63 => w(-3,-6,-1,2,0,-3,-5,3,9,5,5,-8,-10,-7,4,5,-1,0,-6,-14,-6,1,4,5,1,6,-2,-1,2,1,1,-2,1,4,1,-1,-2,3,-7,19,7,4,2,0,5,-3,-1,14,3,0,-2,3,0,1,-2,5,-4,-4,-3,4,0,-2,14,-3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;