library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core4_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core4_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core4_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-7,11,-3,2,9,2,-3,-2,-6,-4,-5,18,-2,10,2,4,-13,2,2,-8,6,6,-3,-19,10,-11,3,-11,-8,8,-21,2,-4,1,6,7,-12,2,-6,-9,1,5,-21,-8,2,-8,-4,-6,10,8,0,3,-5,5,0,-1,-1,-3,0,-7,-11,1,14,-8),
	    1 => w(-1,16,-3,-1,7,3,-14,19,-14,-5,-4,3,-5,3,-3,16,3,-10,9,-17,1,-13,2,2,-3,-9,-20,10,3,-2,7,-4,-6,-14,0,-7,-7,-7,-4,22,-5,6,-7,1,2,-4,0,-3,4,8,-11,0,14,-19,-6,2,3,-7,-22,0,14,26,0,-4),
	    2 => w(0,2,-21,16,0,-3,1,11,-7,7,-4,0,-20,-8,1,0,15,-6,2,-4,-10,-13,2,0,3,-12,-7,-13,-7,6,6,0,-6,-3,-28,-7,5,2,3,-4,-12,5,-11,4,4,2,4,2,-14,11,-13,-7,-1,3,-10,-1,1,5,-7,-11,-9,1,1,6),
	    3 => w(-7,-2,-10,-4,5,18,-17,-16,1,7,-3,2,0,-4,12,5,-9,-31,-4,-16,-3,-4,-5,-6,32,-2,-2,22,-4,-6,2,18,1,0,-12,22,2,1,6,-4,-8,-17,-6,5,1,-7,3,12,-3,-25,2,-4,-23,-4,5,16,-1,-2,-6,-6,6,11,2,5),
	    4 => w(20,2,6,8,0,-1,1,-9,-7,9,-18,3,-2,7,1,-4,19,-1,-8,9,-1,1,8,9,-6,6,11,4,-34,11,16,2,-2,-2,-5,-7,-12,-15,6,11,-3,9,25,3,15,-10,-11,9,-6,8,11,6,4,2,16,-38,-3,-2,3,3,-8,11,7,-3),
	    5 => w(-5,7,-4,-2,4,0,12,3,13,-1,-16,2,-10,-4,-9,-17,1,1,-3,-3,1,-22,7,0,-2,5,3,4,9,6,1,-11,12,14,1,18,0,16,-2,-11,-4,1,5,-6,7,-5,-8,1,5,4,-7,4,-6,-14,2,0,2,-3,-23,13,12,-35,-3,-4),
	    6 => w(-1,1,-17,72,21,25,-44,-1,-24,2,5,-3,26,19,-7,-5,6,-6,1,12,16,-18,-5,6,-5,3,16,3,8,-17,-10,2,-5,-5,19,14,81,0,5,14,14,-17,-3,23,5,-8,14,5,10,-9,1,-25,-2,-1,0,10,-23,18,-4,-3,0,-3,-5,0),
	    7 => w(0,6,39,-9,-2,-3,-1,9,-1,-10,8,11,-2,14,-6,1,1,10,-17,16,14,7,13,-3,-2,-4,-8,13,0,-1,0,25,-2,12,-5,-6,0,6,4,-1,26,5,9,-21,5,-1,23,-7,1,-53,3,4,-52,9,-20,0,5,-7,-9,15,-6,-46,-8,13),
	    8 => w(6,6,0,-1,16,1,-15,0,4,4,-8,-6,3,-1,5,-5,10,-2,8,0,0,-1,-1,3,1,-1,-10,2,-9,2,5,2,4,21,3,0,1,-3,3,3,-28,-2,7,3,6,6,-10,-3,8,-8,3,-10,-41,26,-3,7,2,-4,-6,-5,11,-9,3,10),
	    9 => w(-14,-9,9,1,-1,0,7,5,3,-3,-2,-5,30,-2,-46,8,5,5,33,8,7,-9,-2,-10,3,24,-1,-6,2,-9,3,1,-14,11,8,5,2,-20,-3,2,-4,2,0,1,-23,2,16,-11,-2,1,8,-4,-5,-9,-4,2,2,7,-1,-8,-3,8,-6,3),
	    10 => w(-1,-16,1,0,8,6,4,6,13,-14,3,-1,6,-2,0,-9,0,5,-1,-6,-1,-10,24,-7,-16,14,-1,-2,4,11,2,3,-3,10,7,5,5,2,10,-3,3,26,33,-5,1,-4,23,3,2,-5,44,1,-3,-2,4,21,-31,-2,16,-27,9,-3,4,-1),
	    11 => w(2,14,1,4,-7,3,-2,-1,-11,-2,2,-14,-5,-12,-5,-1,-7,5,8,16,5,0,9,1,1,6,5,-1,-5,4,7,3,7,1,16,-4,-14,-11,-1,0,1,-1,11,3,-1,-1,-1,-9,5,7,12,0,21,0,9,-4,4,-2,-3,-6,-4,0,5,5),
	    12 => w(0,4,-3,2,-6,-4,0,0,2,15,0,-18,-4,-2,4,3,16,-2,-1,-1,-3,4,9,-16,1,-9,8,6,5,-4,3,-7,-3,5,9,4,12,-1,-5,3,6,5,6,1,2,-12,5,-20,-5,-1,5,-1,-3,0,11,-2,14,0,-2,-5,-2,1,0,-2),
	    13 => w(20,-10,0,11,-2,1,-1,2,1,11,5,5,4,7,0,7,12,-8,0,5,4,8,1,15,5,2,-9,11,1,3,12,4,1,7,-2,16,2,-2,-5,8,4,10,3,1,6,5,7,4,1,-5,4,-13,-21,9,-2,-1,-10,5,8,0,13,20,-9,7),
	    14 => w(-5,-1,-19,15,1,3,5,1,7,4,8,0,4,7,-6,3,-5,4,-1,-10,-3,9,5,9,1,0,-1,-7,-6,14,3,-1,-2,-2,9,11,5,-1,-2,1,14,11,6,-2,2,8,1,0,0,-6,4,-2,2,-4,-5,9,4,6,7,7,1,-5,9,4),
	    15 => w(-9,6,9,10,4,-13,-4,8,-4,-4,2,4,-1,2,7,-5,3,-11,13,11,5,-2,-3,6,-12,2,2,-10,2,2,5,1,1,-9,7,9,-1,6,16,1,-8,-10,1,4,-1,-2,-1,-15,2,7,9,8,9,-7,-3,-4,0,2,18,-9,1,-1,8,3),
	    16 => w(-2,-9,-6,-10,0,1,-5,2,3,-7,0,-6,-4,4,0,-3,10,2,-12,2,-3,2,1,-3,-3,5,8,0,1,10,-3,8,2,6,-7,12,7,1,-1,13,3,0,9,-11,-5,-1,2,-9,0,0,-3,-5,-2,1,4,1,-10,7,1,-2,1,-8,7,-9),
	    17 => w(-3,-6,0,-1,2,1,2,7,-6,-6,0,1,0,12,2,-2,-8,25,4,15,0,0,0,-1,3,4,13,-4,-3,4,12,-6,-2,4,-1,-3,10,-3,3,-3,-12,1,3,1,6,0,2,1,-1,-1,-5,10,8,7,-1,-2,8,-8,-2,0,-1,14,4,1),
	    18 => w(-7,1,-8,4,-9,9,-9,-9,0,-2,-3,-4,4,-2,-2,1,-6,5,-3,6,10,-10,4,-3,1,-2,7,3,-1,-1,-5,1,-7,0,5,-5,-3,-5,2,1,10,-5,-6,-4,1,15,3,0,4,-3,2,6,-2,-2,-1,6,-5,2,3,1,7,-4,2,2),
	    19 => w(1,-2,8,3,-1,13,3,-6,-2,-6,13,3,0,11,-1,4,0,-22,-4,-3,10,-7,1,3,2,1,-1,-33,-2,4,11,-1,-7,0,5,-3,-2,-4,-9,5,-6,-12,0,1,1,3,1,-7,2,6,-2,-1,-10,-4,10,-10,0,2,-6,-5,0,7,-4,1),
	    20 => w(18,2,3,0,4,-1,-4,-7,7,1,2,-6,3,-9,3,5,-3,-3,7,1,7,0,-3,-17,-1,-1,-5,5,-2,-10,-14,6,6,-5,-11,2,-11,3,-2,1,-4,12,-8,-5,-11,4,9,0,-7,5,-4,13,0,2,-9,0,17,-5,0,-2,5,-10,-4,4),
	    21 => w(13,-4,-3,-18,-35,0,4,-8,24,-12,6,-2,5,3,-5,-10,-3,5,2,-5,3,-10,1,-5,7,-17,-10,15,10,-5,0,-17,1,-8,2,7,2,-5,-34,-4,-15,-1,-2,5,0,2,-6,-1,-9,-9,4,6,-4,-3,2,16,-1,-20,3,1,0,1,-2,14),
	    22 => w(-1,-1,53,-4,9,-15,4,-29,14,-6,-8,5,-8,-12,4,3,-4,-3,2,3,5,-10,2,-7,1,4,-2,9,-3,9,9,0,5,-5,-13,0,-2,2,0,-2,-2,2,-5,1,-1,16,-6,-1,-11,5,-5,-2,-3,1,-5,-3,-4,-19,-5,-1,11,-4,-4,9),
	    23 => w(-3,-4,6,0,2,0,-15,21,3,1,-2,-6,0,13,16,-1,-8,0,6,3,-4,-3,-6,-9,-15,-4,-5,4,0,-7,-3,-9,-6,-13,3,16,1,6,16,-6,-30,-5,-8,7,-1,-6,-8,-4,1,-8,-3,2,-3,-6,-5,-6,-26,-8,0,31,3,2,-7,-4),
	    24 => w(0,-4,4,4,1,-2,-1,-2,-3,-8,0,12,-1,-2,-1,10,1,-3,-9,3,4,2,-1,-3,-3,13,-3,3,-1,1,-2,5,2,2,-6,-20,-2,-9,13,3,-3,-11,0,6,-5,-12,5,-12,5,-1,-1,10,-3,0,1,-2,2,-18,0,-9,-9,-13,-3,3),
	    25 => w(14,1,-14,-7,-7,3,-1,-8,12,8,-8,-2,0,1,2,12,-8,7,-3,0,5,3,-3,-4,3,-2,-6,7,6,5,-2,-18,-2,-6,-1,-8,-6,-6,-12,-3,3,15,1,1,1,0,-4,0,-10,16,-8,-3,9,-1,-1,1,12,21,0,-20,-2,2,-2,3),
	    26 => w(3,-1,12,-5,-1,-15,-5,27,0,-1,-6,-6,-2,-13,-1,0,3,8,1,26,-5,-11,1,1,4,-3,-1,-5,-5,7,4,-1,-1,19,-11,-11,-3,1,2,0,-7,-9,-1,2,8,2,-6,-2,6,-1,-2,3,-1,-2,3,-5,-2,-10,0,-1,-8,0,-12,-2),
	    27 => w(-1,-12,6,7,2,2,-34,6,0,10,-2,2,0,-14,15,2,22,-2,1,3,2,-5,-1,-6,10,-6,-1,-1,0,-6,3,-12,-3,-23,-4,-1,-1,5,2,-7,0,-3,0,12,-1,-5,-7,1,2,0,2,-7,-3,-3,5,-7,-13,-2,6,12,1,4,-10,-12),
	    28 => w(16,7,-3,-14,6,-3,5,8,5,6,-3,-33,1,-8,7,-2,-1,-8,4,2,-1,-1,-1,1,-5,3,4,-4,-8,8,-13,-7,5,7,0,-4,-6,-7,-1,-7,-6,3,-10,-1,5,-14,1,0,-27,28,1,-1,-3,-2,4,1,1,5,3,-2,-9,-6,10,-2),
	    29 => w(-9,-4,23,-7,5,1,-3,-3,7,2,1,-1,-1,0,0,8,7,2,2,18,-5,-9,10,8,0,-7,6,-4,-3,9,-1,-10,2,-6,1,2,5,-20,-1,-10,1,12,-1,24,8,1,-9,1,12,0,4,2,4,2,-2,-3,-4,-5,-6,-13,10,-12,5,-4),
	    30 => w(7,2,-5,65,4,12,0,1,1,3,-1,1,-8,-4,-2,0,4,11,3,-1,1,-13,-5,8,3,-4,4,1,-2,14,13,-3,4,2,17,7,-17,3,3,-6,-13,-7,-3,4,5,-14,-9,4,10,0,2,-2,6,-2,8,-2,-8,17,-15,-1,-9,-1,0,-2),
	    31 => w(-5,2,8,-2,-7,-3,2,2,0,-7,2,1,-8,10,-4,4,-2,-8,-2,13,11,0,-11,-2,1,2,32,-10,1,-3,3,-10,-3,-6,3,-19,-3,14,3,0,-18,1,1,0,0,10,-27,-6,5,-58,-5,0,-49,-5,-1,2,-5,4,-2,17,-3,-8,-3,11),
	    32 => w(4,-5,-3,0,-5,2,3,-2,3,-2,17,-4,-1,0,-39,4,-6,-3,4,-3,0,-1,9,1,-1,3,53,-4,9,-10,-7,-7,-1,-25,12,-1,8,80,4,-8,43,1,-18,-8,1,-2,-7,-9,-1,5,-10,-3,0,1,-22,2,4,-8,-13,1,6,9,7,-5),
	    33 => w(5,-3,3,10,7,-1,-10,3,3,-2,5,21,13,-4,-14,24,15,-1,-45,1,0,68,1,9,2,-68,4,5,1,1,2,5,44,11,-34,-3,-9,6,8,0,3,10,0,2,11,0,-53,6,2,2,-1,-2,-4,-2,3,-1,-4,-5,-1,-5,2,-2,-5,10),
	    34 => w(1,4,1,1,14,3,8,-15,7,4,2,4,-6,3,-4,3,-2,-2,-2,-8,-9,-4,30,-1,3,56,33,-1,-1,-4,-1,-1,-4,-12,-5,30,5,4,12,-11,1,17,-29,-2,-5,-8,14,5,-13,-4,33,-1,11,8,0,-25,24,-5,-3,15,-1,-1,-4,-2),
	    35 => w(-3,7,-16,-3,5,-2,1,0,-4,-2,1,3,-1,-4,1,-3,-1,2,3,7,-17,5,-36,2,-3,2,4,2,1,0,-2,3,7,2,10,-1,21,3,6,0,-11,-6,-3,5,-8,0,2,12,5,-5,9,-6,18,-1,-4,0,6,-1,-1,2,10,-4,-6,10),
	    36 => w(8,-1,-16,11,7,-4,1,-6,1,-6,-3,-2,5,-1,1,2,5,3,-9,-2,-5,2,0,-9,-4,-8,1,12,-1,2,12,4,9,-1,-2,-3,-8,-1,-19,-4,1,-6,4,-12,6,1,0,-15,2,4,-5,28,4,-1,4,-3,-10,-5,-1,0,10,2,-3,-15),
	    37 => w(8,-2,1,8,-13,-1,-12,1,16,6,1,-1,4,4,9,-13,21,1,-8,-4,2,-1,-4,18,3,0,-5,3,-2,-4,1,-12,0,10,2,5,-3,3,13,1,4,-6,10,6,3,1,1,1,-4,6,-5,1,-1,0,-1,-1,16,1,1,-5,7,-1,4,-4),
	    38 => w(4,-1,10,8,5,17,-6,18,-16,2,8,3,3,1,0,1,16,-10,7,19,-18,8,0,-7,-3,-12,3,0,-5,-4,-8,0,24,15,-2,7,1,4,0,3,-1,5,6,0,-3,11,-7,3,2,5,2,2,2,-3,8,-9,2,2,-7,-1,9,0,8,8),
	    39 => w(-6,9,-9,-1,-7,-4,-5,10,-3,8,-14,1,4,23,6,-6,-22,-1,20,8,4,2,0,-2,17,-1,-2,2,5,-5,-9,-6,1,16,20,-4,-5,-2,-32,0,-11,-8,5,-1,-1,3,-8,-3,-6,5,-2,-2,-5,0,-4,-4,-6,-5,-1,-1,7,-3,3,-5),
	    40 => w(-1,-9,4,-13,-2,-2,-4,5,3,-1,1,-3,4,-8,-4,-2,15,1,2,1,1,0,6,4,-2,1,-12,4,-3,-4,3,23,9,7,2,-9,-2,-14,-3,-3,-5,-1,2,13,6,1,-2,6,8,0,8,6,4,4,-11,2,-6,2,-1,-2,-5,1,-10,-11),
	    41 => w(-11,2,6,-5,4,1,1,-4,-6,6,-1,-6,-12,2,0,-20,-4,0,0,-4,4,-24,-4,-5,9,11,-22,-8,3,2,-12,-4,6,1,3,7,3,4,-5,-6,13,-1,-1,-1,-19,8,2,6,2,-4,8,-1,2,-7,4,22,11,11,-10,4,-10,-2,8,-2),
	    42 => w(3,3,-2,-3,-7,-6,-2,4,0,4,1,-6,-8,-8,5,3,21,6,2,8,3,-8,0,2,-3,0,-7,7,3,5,-3,0,-6,7,10,1,2,3,7,-8,-7,-6,15,-4,0,14,-6,3,6,8,-10,4,12,0,11,9,3,6,3,-5,8,6,-7,0),
	    43 => w(-5,7,8,5,0,-3,-1,13,10,-11,-3,3,-4,-1,2,6,-8,0,1,2,-4,-7,0,-3,6,-5,5,1,-1,-13,2,2,-6,-3,16,8,-7,-9,6,-2,-2,3,-12,2,18,15,3,2,2,3,24,-6,4,3,-1,4,-35,-9,7,6,-3,1,-5,-8),
	    44 => w(-10,29,7,-2,2,-2,-3,-3,-1,-13,-4,-2,1,1,2,-5,-2,-2,-4,3,2,2,-6,-2,17,-9,-1,3,-6,15,15,8,4,0,-5,3,4,-6,10,0,-2,-16,5,-1,7,-6,-6,38,-2,0,-5,11,-1,-2,-1,-7,-1,-8,2,-1,-5,-7,25,24),
	    45 => w(-13,-2,-3,-4,-18,7,-2,-14,20,0,-9,-4,-3,0,0,10,-15,-6,-4,-4,-6,-5,-1,-4,1,0,15,17,-5,-5,1,-15,1,-1,1,4,-2,-5,-19,-1,0,-4,4,-3,-3,-1,-4,-2,3,7,4,-6,18,-14,-2,-2,5,-7,-3,-9,-2,-12,-6,-3),
	    46 => w(-3,0,12,-1,-9,-8,-7,24,22,-3,-6,6,3,-20,-3,0,-5,4,-5,14,-1,-16,2,-7,0,0,-1,8,6,3,-3,0,-10,0,-8,-10,-3,-1,1,-7,-8,-5,-1,1,-17,-8,-2,-9,8,1,0,-4,-4,2,2,-3,-3,-5,-5,-1,-8,-3,-7,4),
	    47 => w(1,-13,2,-1,2,4,1,10,3,-4,1,2,-6,-12,-8,-8,2,20,-15,-3,11,5,1,-6,-14,-4,0,-5,-1,-4,-5,-13,3,0,-1,4,-1,0,12,-1,-5,-8,12,3,3,-4,-3,0,-3,6,-5,-8,-6,22,-1,5,-2,-6,-3,-3,-3,-1,-8,-11),
	    48 => w(-12,0,2,-11,-17,4,-11,6,-1,20,2,1,5,2,-8,-4,-6,-3,-17,5,1,-1,-9,7,-2,-6,22,12,-8,-26,-2,5,-6,14,1,1,12,7,-6,6,47,-1,-5,-3,2,28,-16,9,25,-1,-39,-4,-20,0,-11,23,-3,-8,4,2,11,4,1,19),
	    49 => w(7,0,7,13,4,-1,6,4,4,-4,2,-10,-27,-1,8,4,-12,2,-13,-5,-8,22,-4,-9,-2,-1,6,-16,9,0,4,8,-19,27,-4,-28,20,-35,1,-10,3,1,11,-2,1,-3,-6,4,-4,2,-5,-4,1,-3,28,3,-4,3,-12,9,-9,24,3,-10),
	    50 => w(0,4,-3,-4,3,8,-4,2,-8,-20,-5,-3,15,11,-2,-1,-7,-6,3,4,7,20,8,15,3,24,50,-3,0,7,-7,1,-18,-8,19,-20,13,3,5,24,9,36,21,8,16,3,4,-3,13,-2,-5,-6,-8,18,1,14,11,-7,2,-12,-1,0,9,-1),
	    51 => w(4,6,3,-5,5,-1,6,-5,9,0,8,-25,-4,20,5,2,13,-7,7,11,1,-1,-33,0,12,8,5,2,1,5,-40,20,2,15,-18,0,9,15,1,1,18,6,8,-17,-36,-7,4,-4,36,-1,3,-32,3,-9,14,5,12,-4,-1,-6,-5,-7,11,6),
	    52 => w(0,16,6,4,12,2,-1,12,3,-12,4,-6,3,1,-5,2,-14,-1,18,-4,-1,2,6,-4,-5,1,-11,-11,4,-19,-12,4,-1,-9,3,6,-1,19,-2,5,-2,7,-21,-6,9,6,23,-2,14,-6,-4,-21,0,-2,-5,6,6,0,-3,-1,-7,-21,-3,0),
	    53 => w(2,-10,-5,17,8,1,-14,-5,-31,-1,24,1,8,-1,0,15,8,0,6,-10,6,11,0,9,2,4,11,-13,-4,-6,0,8,3,-21,3,3,-5,7,-3,-2,7,5,8,0,0,4,0,1,-5,-7,-3,2,2,0,1,6,-8,4,1,-3,18,7,0,6),
	    54 => w(-7,-1,-7,10,1,20,23,0,4,8,22,1,-22,-10,1,5,-4,-7,-2,7,-11,2,-1,5,-1,12,-4,-5,0,-13,22,-1,30,23,-21,-3,0,-1,1,-10,-27,4,8,1,-9,16,-11,3,0,5,1,10,1,-1,-12,-8,10,-2,-14,-1,12,5,0,5),
	    55 => w(-3,17,-9,0,6,0,1,4,-2,-4,12,-5,-1,0,-3,-3,0,-11,4,-12,-26,-4,1,4,0,0,-4,-3,1,-6,-15,-23,-1,8,28,-14,-9,14,-32,-5,22,4,6,19,-2,15,-5,0,-1,-8,-3,-7,1,-1,15,16,14,-4,3,2,10,16,6,13),
	    56 => w(0,2,3,5,3,-5,9,3,-1,-4,5,-1,4,-6,-50,2,4,3,3,3,2,-2,10,-2,5,-2,9,4,2,3,12,2,8,7,-1,7,2,-8,2,-4,14,1,1,0,1,4,-9,0,-3,1,-1,-5,-6,7,-4,0,2,-4,-14,0,6,-4,-3,-8),
	    57 => w(-7,5,0,10,-1,1,3,3,3,2,5,29,7,1,-17,-2,-13,-3,-16,3,17,0,-6,4,1,6,-8,-2,4,0,1,1,13,-3,-17,0,-8,-10,-2,-12,-2,5,2,3,-15,1,-71,15,2,3,2,-2,2,-5,2,0,5,-3,-9,-7,5,-1,-6,-5),
	    58 => w(-6,-17,-6,4,2,-3,6,7,5,14,6,-2,8,-3,5,4,-5,1,3,9,7,7,68,1,-12,8,23,1,0,-2,2,1,-14,-13,5,0,1,-2,1,-2,1,-20,-24,2,-2,5,1,3,2,-1,71,0,3,-1,-7,-6,-22,-6,-2,13,-5,4,1,2),
	    59 => w(-7,-7,13,22,-4,-4,1,1,8,-6,2,21,1,5,-4,-4,8,1,5,-2,2,1,-27,4,1,8,0,-7,-5,-1,-7,4,1,5,10,-2,31,5,-4,2,-2,2,10,10,-1,-6,5,-1,-18,0,-2,-6,3,0,-18,12,2,0,1,4,0,-12,2,-4),
	    60 => w(7,-8,-11,2,5,-3,1,-1,2,-3,8,-2,-1,-3,-1,8,8,3,-1,-2,11,1,2,-16,-4,-45,-2,8,0,-2,-4,2,8,4,-11,-3,4,0,16,-12,-1,-5,5,18,8,-10,8,-1,-3,-4,0,2,-1,1,4,15,4,-9,3,0,-7,-19,-5,25),
	    61 => w(-10,9,2,-23,0,12,8,5,9,12,1,1,4,-1,3,21,-9,9,-3,-12,6,-4,1,-1,8,3,-7,26,16,17,-6,-10,-3,1,4,0,-4,4,8,-3,9,4,5,1,6,3,-1,0,-7,12,-7,4,12,3,2,8,-14,5,-6,-3,-12,7,-1,6),
	    62 => w(-1,0,18,-1,-2,-16,2,-7,-3,0,-7,-5,9,-26,2,3,-2,7,0,-5,-6,-5,3,7,3,-5,-4,8,-5,6,3,0,-3,5,-16,-11,0,9,-1,-7,-20,0,2,2,19,8,-2,-3,10,3,5,5,3,-3,-7,1,1,1,5,5,-22,1,-34,-3),
	    63 => w(-1,-10,14,3,4,-5,19,11,4,0,10,-8,1,-14,12,6,13,-9,3,3,-3,-3,1,-7,6,-8,-1,3,-6,-4,-4,-7,6,16,-9,6,-3,11,27,-5,8,-2,9,10,2,-6,-5,-7,4,4,-1,1,2,-11,-2,-2,-32,-8,-4,13,2,11,-16,-3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;