library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv20_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv20_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv20_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-15,-5,12,-21,-18,18,-18,2,6),
	    1 => w(12,2,9,10,21,16,15,1,-4),
	    2 => w(-6,-4,-5,-6,-3,-5,-7,-5,-5),
	    3 => w(3,11,2,5,21,2,2,0,2),
	    4 => w(2,10,1,5,38,1,1,0,0),
	    5 => w(8,0,-5,23,-11,-5,5,-2,-4),
	    6 => w(4,7,5,8,25,7,2,1,1),
	    7 => w(13,11,11,17,6,17,8,-5,6),
	    8 => w(0,6,0,1,36,1,0,-2,0),
	    9 => w(8,5,7,2,31,0,4,3,4),
	    10 => w(37,-3,1,-2,-1,2,-1,2,-6),
	    11 => w(-8,-7,-7,-10,-1,-8,-7,-5,-6),
	    12 => w(15,1,-19,21,5,-28,11,3,-17),
	    13 => w(3,7,3,0,36,-1,0,-6,0),
	    14 => w(2,4,2,0,-10,1,-9,-11,-8),
	    15 => w(1,3,0,2,36,3,2,-2,0),
	    16 => w(-1,-3,-1,-3,13,-3,-4,-24,-4),
	    17 => w(2,12,-1,12,32,9,0,10,-1),
	    18 => w(1,-1,0,1,29,0,1,3,0),
	    19 => w(4,31,3,-9,-3,-9,-3,-9,-1),
	    20 => w(17,3,15,14,33,12,5,-27,6),
	    21 => w(-3,16,5,19,32,6,-28,19,12),
	    22 => w(-8,-4,-6,-7,-8,-7,-6,-5,-5),
	    23 => w(-1,-5,-1,-6,-15,-5,0,-5,0),
	    24 => w(-6,-7,-6,-5,-5,-5,-6,-5,-5),
	    25 => w(2,0,3,-5,-13,-4,-4,-7,-3),
	    26 => w(3,3,1,1,33,0,0,-1,-1),
	    27 => w(-10,-3,-9,-12,65,-16,-6,-9,-5),
	    28 => w(-10,-15,-8,-17,62,-16,-10,-7,-9),
	    29 => w(-11,-29,-11,-6,-4,-5,14,38,9),
	    30 => w(-20,-4,-20,-14,1,-15,-18,-4,-17),
	    31 => w(-9,-8,-9,-4,1,-3,-6,-19,-3),
	    32 => w(8,2,5,2,32,2,3,6,2),
	    33 => w(3,-1,4,10,27,-8,12,27,3),
	    34 => w(-1,-1,0,3,12,2,-8,-22,-7),
	    35 => w(12,9,13,3,37,1,17,-3,17),
	    36 => w(-11,-9,-8,-7,-11,-7,-10,-6,-9),
	    37 => w(12,25,13,-8,-10,-8,-3,-3,-3),
	    38 => w(-7,-17,-7,-9,49,-9,-4,3,-5),
	    39 => w(-1,8,-1,-1,18,-1,1,20,1),
	    40 => w(-11,-21,-10,-2,46,-5,3,14,2),
	    41 => w(-8,-9,-8,-12,-14,-9,-8,-8,-7),
	    42 => w(-5,15,-6,-4,48,-7,-12,-19,-10),
	    43 => w(2,9,0,3,38,3,1,7,0),
	    44 => w(3,13,3,5,22,1,1,3,1),
	    45 => w(8,19,6,6,33,4,-1,-16,-1),
	    46 => w(2,11,-3,4,28,7,9,10,3),
	    47 => w(7,27,7,-2,-14,-2,-9,-18,-7),
	    48 => w(-10,-9,-10,-10,-5,-9,-9,-1,-8),
	    49 => w(18,37,13,14,54,16,-2,-12,-3),
	    50 => w(11,10,13,29,4,24,7,8,7),
	    51 => w(26,17,25,5,-23,4,2,-31,3),
	    52 => w(3,-5,3,2,18,2,3,21,1),
	    53 => w(-9,-5,-8,-5,1,-5,-9,-7,-9),
	    54 => w(-7,-7,-6,-8,-2,-6,-3,-7,-2),
	    55 => w(-6,-7,-5,-5,-4,-4,-6,1,-6),
	    56 => w(2,-2,2,3,30,1,1,4,-1),
	    57 => w(-1,-2,-2,1,33,-1,1,0,0),
	    58 => w(-8,-7,-5,-5,-2,-5,-5,-6,-4),
	    59 => w(4,12,3,5,27,3,5,-3,4),
	    60 => w(1,3,0,3,32,1,0,0,0),
	    61 => w(13,6,15,9,9,3,14,15,15),
	    62 => w(15,9,18,17,32,14,1,19,2),
	    63 => w(10,-28,11,27,15,26,16,29,15),
	    64 => w(17,-19,17,22,21,21,12,16,9),
	    65 => w(-7,4,-6,-8,50,-10,-7,-10,-8),
	    66 => w(2,8,0,2,32,1,-1,-1,-1),
	    67 => w(-2,-15,-1,4,-21,4,5,9,5),
	    68 => w(0,13,-1,-6,-7,-5,-7,-7,-5),
	    69 => w(2,-14,4,11,10,10,9,23,7),
	    70 => w(4,27,4,1,15,-2,6,-7,7),
	    71 => w(-11,3,8,-24,10,9,-15,2,6),
	    72 => w(-5,-11,-4,-9,-9,-8,-7,-8,-7),
	    73 => w(-13,-23,-13,-19,27,-23,-13,-21,-13),
	    74 => w(4,-1,8,9,17,4,5,0,10),
	    75 => w(4,1,5,5,36,1,7,8,6),
	    76 => w(4,11,2,13,24,11,5,12,4),
	    77 => w(3,1,4,4,32,1,1,7,0),
	    78 => w(-8,-12,-7,-11,1,-11,-9,-8,-6),
	    79 => w(3,8,3,4,34,3,2,2,2),
	    80 => w(5,-8,6,3,-41,6,6,10,5),
	    81 => w(0,10,-1,1,25,0,-1,0,-2),
	    82 => w(-9,-4,-9,-3,-6,-4,-9,-2,-6),
	    83 => w(1,-9,2,-7,-10,-7,-4,-7,-3),
	    84 => w(-4,-20,-1,-19,-27,-20,-1,-12,1),
	    85 => w(2,6,1,0,29,-2,-1,-7,-1),
	    86 => w(6,6,5,7,29,6,0,-4,-1),
	    87 => w(-4,-12,-3,-9,-11,-9,-5,-5,-4),
	    88 => w(-13,-9,-10,-10,-7,-9,-7,-6,-5),
	    89 => w(16,2,-6,20,-12,-11,7,-2,-11),
	    90 => w(-11,-8,-9,-11,-8,-9,-5,-6,-3),
	    91 => w(-5,-4,-5,-8,84,-11,-7,-9,-6),
	    92 => w(-2,-2,10,-7,-8,14,-6,2,12),
	    93 => w(-8,-5,-7,-5,-3,-5,-10,-4,-10),
	    94 => w(1,6,1,4,21,2,5,6,5),
	    95 => w(16,-1,6,6,5,25,4,-5,17),
	    96 => w(-6,-9,-4,-8,-5,-8,-9,-6,-8),
	    97 => w(19,22,6,34,-9,-58,13,22,14),
	    98 => w(-1,-3,-2,-2,33,-3,0,-4,0),
	    99 => w(-13,-9,-12,-6,-7,-6,-8,-7,-7),
	    100 => w(1,-7,2,7,-43,9,7,12,7),
	    101 => w(-4,0,-4,-6,-9,-6,-8,-5,-7),
	    102 => w(2,6,0,1,26,0,6,6,4),
	    103 => w(9,49,5,-9,-25,-8,-3,-22,0),
	    104 => w(-2,-1,-2,-1,-22,1,-2,0,-1),
	    105 => w(1,-8,1,-4,94,-9,-3,-6,-5),
	    106 => w(-22,-22,-21,2,1,3,15,24,14),
	    107 => w(1,1,0,-1,32,-1,0,0,-1),
	    108 => w(-5,-18,-3,1,-3,2,7,19,7),
	    109 => w(-3,-2,11,-7,-13,10,-1,1,9),
	    110 => w(-8,-14,-5,22,-14,-16,31,3,8),
	    111 => w(9,12,8,8,35,4,5,6,6),
	    112 => w(13,-4,11,9,26,10,8,-2,5),
	    113 => w(4,11,0,21,28,-15,-2,6,-1),
	    114 => w(-1,6,13,-9,-17,16,-6,-2,12),
	    115 => w(-7,-11,-6,-7,-3,-7,-7,-3,-7),
	    116 => w(-10,-9,-9,-5,-5,-5,-8,-5,-7),
	    117 => w(5,1,-9,-11,-11,-1,50,-5,4),
	    118 => w(7,18,4,7,41,10,4,10,-2),
	    119 => w(-2,7,13,-13,3,23,5,12,10),
	    120 => w(6,-16,6,16,-30,17,15,34,13),
	    121 => w(7,-5,8,2,50,-4,7,3,9),
	    122 => w(10,-8,10,6,20,5,6,-3,5),
	    123 => w(2,11,3,9,13,7,3,8,2),
	    124 => w(17,9,1,27,-39,-5,14,10,5),
	    125 => w(0,1,-11,5,7,-19,-1,0,-6),
	    126 => w(9,12,8,8,38,7,7,9,4),
	    127 => w(-7,-5,-6,-5,-5,-5,-4,-6,-4),
	    128 => w(-6,-11,-4,-3,-27,-3,2,7,2),
	    129 => w(-6,-14,-5,-10,33,-10,-3,13,-2),
	    130 => w(9,14,9,11,33,9,6,10,6),
	    131 => w(-15,-21,-14,-3,15,-2,0,7,0),
	    132 => w(-8,-10,-7,-7,-7,-7,-5,-6,-4),
	    133 => w(21,7,15,1,48,7,21,2,14),
	    134 => w(6,12,5,6,34,2,2,1,1),
	    135 => w(0,4,0,5,31,1,0,2,1),
	    136 => w(-10,-10,-8,-10,-12,-10,-7,-7,-6),
	    137 => w(0,-9,1,1,-27,2,9,2,9),
	    138 => w(-8,-2,6,-1,-8,-6,-2,-2,47),
	    139 => w(6,24,5,13,29,9,3,-12,4),
	    140 => w(-6,-5,-5,-6,-7,-5,-4,-5,-3),
	    141 => w(-15,-16,-12,4,8,4,4,11,4),
	    142 => w(-6,-1,21,-15,-11,28,-14,-1,16),
	    143 => w(8,21,4,16,28,14,6,13,4),
	    144 => w(1,3,0,7,36,5,6,23,5),
	    145 => w(13,5,12,1,-40,2,3,-6,2),
	    146 => w(3,-21,3,1,-26,1,16,24,15),
	    147 => w(-5,-16,-2,-15,-6,18,0,9,25),
	    148 => w(3,6,2,5,37,4,3,2,3),
	    149 => w(-1,-3,-1,1,35,-3,3,12,1),
	    150 => w(-7,-7,-6,-6,-7,-6,-6,-4,-4),
	    151 => w(-10,9,13,-11,15,8,-3,-15,-7),
	    152 => w(4,12,5,10,20,5,3,7,3),
	    153 => w(-15,-9,-6,-13,8,11,-10,-6,-5),
	    154 => w(-8,-6,-7,-10,-15,-10,-2,-2,-2),
	    155 => w(-4,-11,-3,0,-2,0,9,16,8),
	    156 => w(7,4,5,2,22,3,7,0,4),
	    157 => w(-6,-5,-5,-8,-6,-6,-5,-4,-4),
	    158 => w(-4,-6,-4,-6,39,-6,-4,-4,-4),
	    159 => w(-10,-14,-8,-15,0,-15,-13,-16,-11),
	    160 => w(5,8,4,6,31,4,6,1,5),
	    161 => w(-2,14,-4,-2,53,-3,-7,-14,-7),
	    162 => w(-6,-15,-5,-3,29,-4,2,10,1),
	    163 => w(-10,-6,-8,-5,1,-5,-7,-7,-7),
	    164 => w(6,3,6,5,31,1,2,6,3),
	    165 => w(-14,-12,-10,-9,-8,-6,-10,-10,-2),
	    166 => w(-5,-13,-4,-2,-15,-1,0,2,0),
	    167 => w(11,7,22,0,6,4,0,-1,9),
	    168 => w(-2,7,-3,8,28,7,1,4,0),
	    169 => w(1,7,0,4,33,1,0,-1,1),
	    170 => w(10,10,9,-10,23,-11,11,13,9),
	    171 => w(0,-8,-1,-9,-11,-6,-10,-4,-10),
	    172 => w(3,3,3,4,34,3,2,-2,2),
	    173 => w(-25,-3,30,-20,-9,28,-22,-2,21),
	    174 => w(16,17,15,21,24,16,11,-9,11),
	    175 => w(-8,-9,-6,-15,-13,-15,-5,-10,-3),
	    176 => w(-7,-8,-6,2,41,-2,2,7,3),
	    177 => w(-31,-42,-27,-2,58,-2,15,-10,12),
	    178 => w(-3,12,14,-11,16,31,-1,6,-2),
	    179 => w(-1,-9,7,-4,0,32,-3,-7,-4),
	    180 => w(-3,-5,-3,-4,-4,-3,-10,-5,-9),
	    181 => w(-5,-9,-4,-7,-15,-7,-3,-3,-3),
	    182 => w(24,-11,21,16,5,16,2,-10,3),
	    183 => w(2,4,1,4,37,2,2,2,1),
	    184 => w(0,7,1,10,36,6,0,9,1),
	    185 => w(0,-1,0,1,31,0,1,1,1),
	    186 => w(2,-1,2,0,37,-5,2,-1,1),
	    187 => w(6,5,3,5,33,7,5,8,3),
	    188 => w(-10,-16,-9,-9,-5,-9,-13,-14,-9),
	    189 => w(-8,-9,-8,-6,-15,-5,6,-3,6),
	    190 => w(-8,-3,-7,-4,-10,-3,-9,-2,-9),
	    191 => w(-2,10,-1,-5,1,-4,-11,-19,-11),
	    192 => w(8,19,6,2,28,-1,-3,-2,-3),
	    193 => w(-5,-3,-4,-2,9,-2,9,23,7),
	    194 => w(7,1,7,8,-60,10,7,17,5),
	    195 => w(-12,-12,-10,-3,6,-4,-1,9,-2),
	    196 => w(4,6,2,5,41,1,-5,-10,-7),
	    197 => w(0,1,-1,1,34,0,0,-2,0),
	    198 => w(14,-3,12,-1,-57,4,-2,-14,-4),
	    199 => w(6,-2,6,3,-55,5,2,5,3),
	    200 => w(-6,-7,-6,-9,-4,-8,-5,-3,-3),
	    201 => w(1,11,-1,8,35,3,3,1,2),
	    202 => w(-2,-1,-2,-4,-12,-4,-5,-2,-4),
	    203 => w(6,-9,5,1,31,2,4,9,3),
	    204 => w(6,10,6,-1,18,-3,5,7,4),
	    205 => w(-3,-4,-2,-2,-14,-2,-2,-7,-1),
	    206 => w(2,4,3,6,29,3,1,6,0),
	    207 => w(-4,5,-4,-6,41,-7,-6,-11,-6),
	    208 => w(3,6,2,1,29,-1,3,2,2),
	    209 => w(-12,-7,-10,-11,-8,-10,-12,-8,-10),
	    210 => w(-7,-5,-7,-4,-14,-4,-7,-1,-6),
	    211 => w(-6,-11,-7,-13,-11,-10,-9,4,-9),
	    212 => w(19,12,17,3,38,2,7,-2,5),
	    213 => w(-7,-16,-6,-13,-8,-10,-9,-2,-9),
	    214 => w(22,14,5,16,-6,-8,6,10,1),
	    215 => w(-6,-8,-5,-6,-7,-4,-2,-3,-2),
	    216 => w(-7,-11,-7,-5,6,-5,-4,3,-4),
	    217 => w(-5,-3,-5,-4,-4,-4,-3,-5,-1),
	    218 => w(14,22,12,-6,25,-6,2,-8,1),
	    219 => w(-14,-4,-14,-6,3,-5,-17,1,-17),
	    220 => w(0,-5,1,-2,-28,-1,2,-2,3),
	    221 => w(7,9,6,9,35,6,5,6,5),
	    222 => w(-17,-11,-14,-12,-7,-10,-6,-9,-3),
	    223 => w(-1,6,-1,4,28,1,0,1,0),
	    224 => w(2,5,1,2,33,-1,2,-2,1),
	    225 => w(-2,16,-4,14,22,10,6,4,5),
	    226 => w(-1,8,-2,1,34,0,3,-1,2),
	    227 => w(3,9,2,7,42,2,2,-2,2),
	    228 => w(10,20,7,3,27,2,-2,-10,0),
	    229 => w(17,-17,15,9,-70,8,20,19,18),
	    230 => w(-12,-11,-11,-9,0,-10,-6,1,-6),
	    231 => w(-8,-1,-6,-4,56,-6,-4,2,-4),
	    232 => w(-19,-20,-16,-7,-10,-6,-15,-2,-14),
	    233 => w(3,-12,4,8,42,6,5,-15,5),
	    234 => w(-11,-6,-10,-9,-8,-8,-9,-5,-7),
	    235 => w(-20,-14,-12,-19,62,29,-6,46,33),
	    236 => w(12,22,8,11,34,6,10,6,14),
	    237 => w(3,1,2,7,28,5,2,4,1),
	    238 => w(15,19,14,-20,25,-20,18,9,17),
	    239 => w(3,8,3,8,29,5,4,4,4),
	    240 => w(-3,-3,1,45,31,-20,26,-6,-21),
	    241 => w(-14,-5,-12,-2,-20,-2,-10,-8,-9),
	    242 => w(4,7,1,7,37,5,1,2,0),
	    243 => w(-15,-7,-15,-7,-3,-5,-6,0,-5),
	    244 => w(5,-11,6,10,8,9,8,33,6),
	    245 => w(9,5,8,3,19,1,8,5,7),
	    246 => w(-8,-16,-6,6,-20,6,8,21,7),
	    247 => w(4,9,4,4,29,4,5,6,5),
	    248 => w(-8,-6,-6,-7,-7,-6,-3,-5,-3),
	    249 => w(-6,-8,-5,-7,-5,-6,-6,-3,-5),
	    250 => w(6,18,5,0,10,-2,1,16,2),
	    251 => w(-11,-1,-10,0,2,-1,-10,-3,-9),
	    252 => w(-9,-7,-7,-8,-3,-7,-9,-8,-8),
	    253 => w(3,3,3,3,31,2,0,-4,0),
	    254 => w(-10,-10,-6,-10,2,-10,-11,-11,-10),
	    255 => w(-6,-6,-5,-4,-9,-3,-6,-2,-6)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;