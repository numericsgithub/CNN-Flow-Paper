library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv22_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv22_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv22_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(7,11,5,10,23,2,3,3,4),
	    1 => w(1,-2,7,16,35,3,4,11,4),
	    2 => w(8,11,6,12,30,2,12,1,13),
	    3 => w(-1,-8,-1,-11,-23,-5,-4,-12,-3),
	    4 => w(-7,-6,-5,-5,-2,-4,-6,-3,-6),
	    5 => w(15,-15,-4,16,-12,-2,31,7,2),
	    6 => w(-6,-8,-4,-9,-9,-5,-8,-6,-6),
	    7 => w(-12,-11,-8,5,11,1,8,14,5),
	    8 => w(13,30,5,10,16,5,-1,-3,2),
	    9 => w(7,8,5,9,13,4,2,3,2),
	    10 => w(-7,-5,-5,-7,-6,-5,-7,-7,-4),
	    11 => w(-2,-3,18,-8,-24,11,4,5,23),
	    12 => w(-11,-7,-8,-9,-5,-7,-8,-4,-7),
	    13 => w(-4,-8,-1,3,32,-6,0,6,0),
	    14 => w(7,14,4,12,25,3,0,-3,3),
	    15 => w(-9,-9,-6,-7,-9,-5,-7,-4,-6),
	    16 => w(-36,-2,18,-29,16,30,-33,-14,17),
	    17 => w(4,18,0,3,18,-2,-10,-14,-4),
	    18 => w(-10,-8,-8,-8,-4,-5,-11,-7,-8),
	    19 => w(-10,-7,-7,-10,-7,-6,-8,-8,-6),
	    20 => w(-6,-9,-4,-9,-7,-7,-5,-5,-2),
	    21 => w(9,12,6,27,42,7,1,14,-2),
	    22 => w(16,12,13,12,32,1,14,6,14),
	    23 => w(-10,-6,-7,-8,-4,-5,-6,-5,-4),
	    24 => w(10,17,6,15,25,5,7,8,8),
	    25 => w(-21,-11,-18,-9,8,-10,-18,-3,-15),
	    26 => w(-8,-8,-6,-9,-3,-8,-6,-6,-4),
	    27 => w(-3,-24,3,12,25,5,9,18,5),
	    28 => w(20,28,11,3,-22,8,-8,-15,-6),
	    29 => w(-1,-8,26,-42,-29,23,13,-3,26),
	    30 => w(5,3,4,3,-6,4,11,19,6),
	    31 => w(8,14,5,17,21,8,-3,-4,0),
	    32 => w(-15,-7,-12,-8,-6,-5,-13,-9,-11),
	    33 => w(10,22,9,20,46,4,17,10,17),
	    34 => w(-6,-6,-4,-6,-3,-4,-4,-5,-2),
	    35 => w(9,14,8,11,26,-1,7,6,8),
	    36 => w(-17,-8,-14,-8,-3,-7,-14,-9,-11),
	    37 => w(-10,-8,-6,-11,-8,-8,-9,-6,-6),
	    38 => w(-7,-7,-4,-6,-2,-4,-6,-4,-5),
	    39 => w(-14,-12,-9,-8,-4,-8,-13,-9,-10),
	    40 => w(22,48,10,-13,-3,-6,-12,-16,-10),
	    41 => w(-5,8,0,20,27,7,17,12,15),
	    42 => w(-6,-9,-4,-9,-5,-6,-3,-6,-2),
	    43 => w(-8,-7,-4,12,28,3,12,10,9),
	    44 => w(15,1,11,-4,-33,6,3,-9,2),
	    45 => w(-5,-1,-3,15,42,-1,8,11,6),
	    46 => w(7,3,8,4,5,3,21,7,6),
	    47 => w(-7,0,7,-13,-13,20,-1,3,4),
	    48 => w(-9,-6,-6,-6,-6,-4,-6,-6,-3),
	    49 => w(-7,-13,-6,-11,-21,-3,-1,-2,-1),
	    50 => w(12,16,5,-3,-33,8,0,-8,0),
	    51 => w(0,-16,0,-3,-53,13,13,14,6),
	    52 => w(4,12,1,13,31,4,1,7,1),
	    53 => w(13,20,7,13,23,5,6,-8,8),
	    54 => w(12,9,10,7,7,4,11,6,10),
	    55 => w(1,10,-3,13,29,3,1,9,-1),
	    56 => w(-11,-9,-8,-9,-8,-7,-6,-4,-4),
	    57 => w(-1,-3,-5,15,5,-9,27,3,-7),
	    58 => w(-12,-22,-6,1,5,0,10,24,3),
	    59 => w(8,7,7,11,21,4,5,8,4),
	    60 => w(-2,6,-1,10,33,-3,-2,-1,2),
	    61 => w(-15,-13,-10,-12,-7,-9,-13,0,-11),
	    62 => w(9,21,4,19,37,1,-2,5,-2),
	    63 => w(3,8,1,13,26,5,6,8,5),
	    64 => w(15,9,8,-5,-65,11,7,-2,4),
	    65 => w(18,11,13,12,7,9,-4,-7,-2),
	    66 => w(2,8,1,11,26,3,0,3,0),
	    67 => w(19,18,13,-2,-40,7,-1,-11,0),
	    68 => w(-7,-34,-1,-26,-47,-16,-5,-11,-4),
	    69 => w(-8,44,18,-18,52,11,-42,-19,-26),
	    70 => w(12,21,8,21,17,11,-2,6,1),
	    71 => w(2,6,2,9,27,0,0,3,1),
	    72 => w(8,7,5,7,12,4,6,7,4),
	    73 => w(4,14,2,11,30,1,1,5,2),
	    74 => w(-18,-8,-12,-4,-5,-4,-6,-2,-5),
	    75 => w(7,15,3,13,19,6,8,6,5),
	    76 => w(11,11,7,14,22,6,6,-16,9),
	    77 => w(-7,-5,-5,-6,-4,-5,-5,-5,-4),
	    78 => w(-13,-13,-9,-11,-7,-9,-12,-8,-9),
	    79 => w(-15,-2,6,-18,16,15,-15,-2,11),
	    80 => w(1,15,2,15,28,3,14,7,13),
	    81 => w(-5,26,-9,13,72,-7,-6,-10,0),
	    82 => w(-4,4,1,18,32,6,6,17,3),
	    83 => w(-11,-9,-7,-9,-7,-5,-6,-3,-5),
	    84 => w(-9,-6,-10,-9,-1,-6,-14,-10,-15),
	    85 => w(-8,-5,-6,-7,-8,-4,-4,-4,-3),
	    86 => w(-1,-1,35,0,-4,1,-3,-1,0),
	    87 => w(6,6,5,9,40,-6,3,-5,5),
	    88 => w(-7,0,23,-9,-9,13,-3,-2,15),
	    89 => w(3,5,4,12,27,-1,4,4,6),
	    90 => w(14,16,9,13,26,2,5,-6,9),
	    91 => w(-10,-8,-7,-11,-3,-9,-7,-10,-5),
	    92 => w(2,-5,2,-7,-22,-3,-10,-22,-8),
	    93 => w(-11,-15,-8,-15,-13,-11,-13,-11,-9),
	    94 => w(-7,-6,-5,-9,-10,-5,-13,-6,-10),
	    95 => w(-10,-8,-7,-10,-9,-5,-5,-6,-4),
	    96 => w(7,7,5,8,23,2,9,8,6),
	    97 => w(15,-1,11,-6,-37,5,6,-7,4),
	    98 => w(-11,-6,-8,-8,-7,-5,-4,-5,-2),
	    99 => w(10,15,7,12,17,5,7,9,5),
	    100 => w(8,18,6,16,15,8,5,-14,9),
	    101 => w(-8,-9,-5,-7,-8,-5,-5,-4,-3),
	    102 => w(-28,-5,-27,-14,-4,-10,-6,-15,-5),
	    103 => w(-1,15,-3,17,32,7,7,6,5),
	    104 => w(13,43,2,16,3,16,-1,-19,6),
	    105 => w(-9,-8,-7,-10,-11,-7,-12,-10,-8),
	    106 => w(8,15,7,15,24,5,7,2,8),
	    107 => w(-10,-8,-7,-10,-9,-7,-12,-8,-8),
	    108 => w(-14,-23,-7,2,-14,9,14,15,8),
	    109 => w(-7,-8,-4,-7,-11,-4,-2,-2,-3),
	    110 => w(15,24,8,13,8,10,-7,-6,-5),
	    111 => w(-4,-11,0,5,22,-2,9,8,7),
	    112 => w(3,7,4,10,25,0,2,5,4),
	    113 => w(10,11,3,4,19,2,8,7,6),
	    114 => w(5,10,4,10,17,3,0,7,0),
	    115 => w(-6,-7,-4,-7,-8,-4,-4,-6,-3),
	    116 => w(-10,-10,-7,-11,-1,-9,-7,-8,-5),
	    117 => w(4,-3,5,16,25,6,5,8,4),
	    118 => w(4,24,0,4,32,-4,-28,-35,-20),
	    119 => w(9,5,9,7,8,7,9,4,5),
	    120 => w(-3,-7,-2,-6,-11,-2,-3,-3,-2),
	    121 => w(34,-20,-20,36,6,-34,29,-16,-18),
	    122 => w(-10,-11,-6,-11,-3,-8,-14,-9,-10),
	    123 => w(-6,-9,-3,-9,-8,-7,-2,-7,0),
	    124 => w(-18,0,8,-6,7,7,-12,2,4),
	    125 => w(8,17,5,13,13,6,6,8,5),
	    126 => w(10,15,8,14,30,6,7,11,6),
	    127 => w(-8,-10,-5,-9,-13,-4,-5,-5,-3),
	    128 => w(6,21,2,11,20,4,8,-7,9),
	    129 => w(5,16,0,2,3,3,-14,-16,-9),
	    130 => w(-8,-4,-7,-5,2,-4,-9,-5,-7),
	    131 => w(-4,20,-21,18,32,8,7,15,3),
	    132 => w(3,10,1,13,26,5,2,8,2),
	    133 => w(-13,-6,-10,-8,-6,-7,-13,-2,-12),
	    134 => w(-10,-11,-7,-12,0,-9,-8,-9,-7),
	    135 => w(-8,-5,-6,-8,-5,-6,-7,-7,-5),
	    136 => w(-9,-9,-5,-7,-11,-4,-3,-3,-3),
	    137 => w(2,7,2,8,30,-4,0,1,1),
	    138 => w(-9,-12,-6,-10,-3,-8,-5,-7,-3),
	    139 => w(-12,-13,-9,-16,-14,-13,-7,-10,-6),
	    140 => w(-5,-7,-3,-8,-8,-5,-3,-6,-2),
	    141 => w(7,12,4,15,33,5,5,10,3),
	    142 => w(6,-3,-8,20,6,-16,9,-1,-9),
	    143 => w(-6,-7,-4,-7,-8,-3,-4,-4,-4),
	    144 => w(-10,-6,-8,-7,-1,-6,-10,-6,-8),
	    145 => w(-2,-2,1,10,13,3,9,17,6),
	    146 => w(13,10,14,19,40,2,9,16,8),
	    147 => w(0,4,1,9,33,-3,3,2,5),
	    148 => w(1,10,0,13,24,3,1,7,3),
	    149 => w(-8,-7,-5,-7,-5,-5,-7,-5,-5),
	    150 => w(-7,-11,-5,-13,-15,-7,-10,-13,-8),
	    151 => w(10,11,6,17,25,9,4,9,3),
	    152 => w(-11,-23,-4,3,3,2,6,10,3),
	    153 => w(-7,-8,-5,-10,-6,-6,-6,-9,-4),
	    154 => w(15,25,-4,25,27,15,17,10,17),
	    155 => w(-9,-12,-2,9,26,0,10,27,3),
	    156 => w(2,-29,5,24,-30,28,23,33,13),
	    157 => w(-6,-8,-4,-9,-4,-7,-7,-6,-5),
	    158 => w(-8,-11,-2,8,58,-10,1,1,3),
	    159 => w(3,16,2,19,33,3,3,9,7),
	    160 => w(-11,-7,-5,4,55,-11,-5,-2,-2),
	    161 => w(11,4,9,8,23,2,10,1,9),
	    162 => w(21,5,19,7,27,-3,3,12,4),
	    163 => w(4,15,2,14,16,9,3,10,1),
	    164 => w(1,4,3,11,28,0,0,8,0),
	    165 => w(-9,2,7,-4,5,19,1,14,22),
	    166 => w(-29,-4,-1,-1,0,1,0,1,0),
	    167 => w(0,11,-1,13,29,2,0,9,1),
	    168 => w(-4,-7,-2,-8,-8,-5,-4,-7,-3),
	    169 => w(1,7,-1,11,19,5,10,16,5),
	    170 => w(-12,-16,-8,-2,-10,1,11,9,7),
	    171 => w(-6,-7,-4,-8,-7,-4,-6,-5,-5),
	    172 => w(12,19,7,20,27,6,-1,9,4),
	    173 => w(-12,-11,-10,-12,-5,-8,-9,-6,-9),
	    174 => w(-9,-7,-5,-8,-7,-6,-6,-6,-4),
	    175 => w(-2,9,-2,4,33,-7,-9,-10,-4),
	    176 => w(20,34,11,22,-19,21,-7,-12,-2),
	    177 => w(-9,-2,-6,-1,0,-4,-7,-3,-5),
	    178 => w(-13,-6,-11,-11,-4,-8,-10,-7,-7),
	    179 => w(-10,-25,-3,7,7,4,-1,19,-5),
	    180 => w(4,15,1,18,24,9,0,6,1),
	    181 => w(-20,-11,-17,-11,-9,-6,-16,-10,-13),
	    182 => w(-7,-3,-5,-4,-2,-4,-5,-3,-4),
	    183 => w(5,9,4,11,16,5,4,5,4),
	    184 => w(14,25,10,19,24,8,2,22,-1),
	    185 => w(26,-8,-17,27,-35,-14,32,-13,-16),
	    186 => w(4,8,3,11,27,1,3,-1,6),
	    187 => w(17,5,-7,27,-15,-8,4,0,-8),
	    188 => w(4,14,2,19,19,12,3,12,2),
	    189 => w(5,-3,-16,19,18,-20,3,-9,-13),
	    190 => w(9,13,4,12,22,4,-4,-4,-2),
	    191 => w(-23,-5,-17,-8,-6,-7,-20,-5,-16),
	    192 => w(0,9,-1,12,22,4,2,5,2),
	    193 => w(8,11,7,11,37,0,12,4,13),
	    194 => w(-4,-5,-2,-9,-4,-6,-9,-3,-7),
	    195 => w(-13,-9,-10,-7,-5,-5,-10,-5,-8),
	    196 => w(-3,0,2,11,33,-1,9,10,8),
	    197 => w(20,30,12,12,8,8,8,9,7),
	    198 => w(2,8,1,9,28,-1,-2,-1,0),
	    199 => w(-4,-8,-2,-9,-12,-3,0,-2,-2),
	    200 => w(19,-1,17,9,15,4,0,15,-1),
	    201 => w(-25,-14,-14,-31,-17,-30,-18,-12,-15),
	    202 => w(-16,-5,24,-27,-13,47,-1,-12,13),
	    203 => w(13,10,10,7,27,-1,16,-6,16),
	    204 => w(-7,-10,-5,-11,-8,-8,-6,-8,-4),
	    205 => w(-6,-7,-5,-9,-5,-5,-5,-7,-4),
	    206 => w(0,6,1,11,32,-1,3,1,4),
	    207 => w(-9,-10,-6,-13,-8,-9,-6,-7,-4),
	    208 => w(19,-4,16,10,12,8,3,3,3),
	    209 => w(12,19,9,17,18,9,5,18,4),
	    210 => w(-9,-7,-7,-10,-5,-7,-7,-9,-5),
	    211 => w(-5,41,-9,49,31,32,47,48,36),
	    212 => w(-5,-6,-5,-6,-8,-2,-4,-5,-4),
	    213 => w(-4,-7,-3,-9,-6,-5,-6,-5,-5),
	    214 => w(-1,13,-2,1,34,-9,-12,-15,-6),
	    215 => w(-7,-6,-5,-8,-6,-5,-4,-2,-4),
	    216 => w(0,5,20,5,5,13,6,4,19),
	    217 => w(13,19,9,10,36,-1,-8,-7,-2),
	    218 => w(-18,-15,-13,-9,3,-7,-5,2,-5),
	    219 => w(1,17,-3,10,42,-4,-12,-10,-6),
	    220 => w(-3,9,-5,15,32,4,2,5,1),
	    221 => w(3,3,1,-6,-8,-3,-11,-7,-10),
	    222 => w(-6,-9,-5,-5,-5,-1,-6,-5,-6),
	    223 => w(-30,-5,21,-20,1,35,-31,-3,19),
	    224 => w(-9,-10,-5,-8,-7,-5,-8,-4,-6),
	    225 => w(-17,-8,-14,-9,-6,-5,-12,-4,-10),
	    226 => w(8,21,4,15,21,6,6,7,5),
	    227 => w(-4,-5,-3,-4,-7,-1,-4,-3,-4),
	    228 => w(-5,-6,-4,-10,-8,-7,-3,-7,-1),
	    229 => w(-8,-11,-4,-10,-9,-8,-6,-4,-4),
	    230 => w(-17,-24,-8,2,9,-2,2,14,0),
	    231 => w(22,30,14,25,41,1,-24,-1,-10),
	    232 => w(-5,-9,-3,-7,-11,-3,-1,-1,-1),
	    233 => w(-6,-18,-2,4,-13,7,10,20,4),
	    234 => w(7,16,3,16,25,5,2,7,3),
	    235 => w(18,3,15,9,9,6,10,5,9),
	    236 => w(4,10,5,15,28,3,0,6,1),
	    237 => w(5,10,3,15,21,8,1,10,0),
	    238 => w(7,15,4,7,17,3,7,0,7),
	    239 => w(-7,-7,-5,-7,-3,-6,-7,-6,-5),
	    240 => w(21,6,-1,14,4,-1,21,5,3),
	    241 => w(-6,-7,-4,-6,-9,-1,-3,-1,-4),
	    242 => w(10,8,10,1,2,5,9,7,5),
	    243 => w(-12,-10,-9,-15,-12,-10,-11,-3,-8),
	    244 => w(15,4,13,11,8,7,4,5,3),
	    245 => w(-7,-15,-1,4,29,-3,7,14,4),
	    246 => w(-13,-12,-9,-1,4,-2,-1,8,-3),
	    247 => w(6,9,5,6,23,-3,4,4,4),
	    248 => w(11,20,7,26,26,14,10,8,10),
	    249 => w(0,2,1,8,22,-1,7,12,5),
	    250 => w(-7,-5,-6,-6,-6,-6,-10,-7,-6),
	    251 => w(2,1,3,8,24,-1,8,4,8),
	    252 => w(3,8,2,11,28,0,1,5,3),
	    253 => w(-4,11,-3,4,42,-9,-13,-16,-6),
	    254 => w(-11,-9,-7,-11,-7,-7,-5,-3,-4),
	    255 => w(11,21,5,13,13,7,10,5,10)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;