library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-1,-4,-8,-19,1,-1,1,-4,1,5,0,-2,-10,-2,30,4,-14,1,-1,-8,0,-2,-33,0,5,-1,-26,2,8,-16,-1,3,0,-40,0,0,-11,20,-1,-11,-23,-5,-5,-2,-3,-6,-1,-7,4,5,-2,-2,13,-48,10,0,4,-3,106,1,3,-7,-1,-7),
	    1 => w(3,12,0,18,0,0,4,2,2,-2,-1,29,-41,0,21,2,4,3,-13,-6,-17,-8,-14,-14,0,4,-2,4,4,-12,-1,0,7,-7,0,3,-6,-21,3,-25,4,4,-3,2,14,-4,10,24,5,-4,-4,-1,-6,1,30,0,-16,-2,7,-1,4,4,-1,-3),
	    2 => w(8,20,0,-5,6,-1,0,-9,-3,27,-11,-1,3,-8,-1,23,-2,-4,-2,-2,-5,1,-34,-5,24,-4,1,4,1,-2,-1,-1,-5,-7,11,13,1,-3,2,16,5,40,3,1,-6,-5,-9,3,-4,1,50,7,-19,3,10,-22,-12,-21,-4,77,-1,4,-4,0),
	    3 => w(-7,4,-8,-23,7,3,-2,5,-11,1,-10,-15,-3,15,-1,7,-5,1,3,1,-23,-1,43,5,-9,1,3,-6,3,2,10,10,0,1,-9,-2,18,22,-17,-3,-7,-6,-3,5,1,0,5,-1,12,4,-18,-8,-6,-2,-39,1,-8,1,-3,4,3,4,-2,-8),
	    4 => w(-2,-14,3,-2,-1,-4,3,-1,0,-8,-1,-9,-3,-3,-1,3,0,0,-3,0,3,-1,-3,-1,-5,5,-3,0,-1,5,10,-6,4,0,-2,-25,4,6,12,0,-3,-4,8,0,3,-10,-5,-8,1,1,-2,9,1,-2,-7,1,-1,-4,3,-12,5,-7,10,2),
	    5 => w(2,-12,3,-10,-2,8,-17,4,14,4,-4,-5,-1,-7,-5,1,-6,-1,-2,5,1,4,-1,0,3,-5,-11,21,16,14,10,-9,-7,5,-1,2,-7,9,12,1,-12,-1,6,0,-4,0,3,-4,-5,3,-3,6,17,-6,2,8,-10,18,8,3,-10,-6,-7,0),
	    6 => w(5,2,1,0,0,-4,-5,-1,-1,-3,-4,7,7,-8,-9,-4,-15,-5,-2,33,-10,-5,0,-1,-4,-6,-1,17,-9,-1,1,1,-9,-1,-5,-15,-1,2,-4,-3,-8,-8,-1,2,3,-1,0,-5,6,8,0,1,-3,1,-1,-4,-4,6,-3,-2,-8,-9,11,-2),
	    7 => w(-8,-4,1,1,5,9,-36,21,0,-2,-2,0,-2,-8,-1,-5,13,0,0,-7,0,1,-1,-11,6,-5,1,-6,-4,-4,0,-4,10,13,-1,4,-6,6,18,-5,-7,-22,25,-2,1,-4,-1,-5,0,9,-2,-1,-6,9,1,-3,-6,-4,26,-1,1,-2,-8,-3),
	    8 => w(8,4,0,-4,-14,0,11,-1,0,-9,0,3,-9,1,-8,5,-17,0,3,-4,1,-2,-4,-1,1,0,-7,0,13,10,-9,0,2,-7,6,0,-8,-7,3,-4,-11,-9,-15,-10,-9,-4,-34,-22,-4,-3,-12,-13,16,11,-19,-4,2,-2,-7,3,12,-4,-4,-1),
	    9 => w(-4,-9,-3,-2,-1,1,-12,0,-3,-5,-11,-3,-12,-1,-24,6,-2,-1,12,-3,-4,13,5,-2,-1,-7,-3,-3,0,-1,0,7,-1,-4,2,-1,23,7,2,9,-1,1,3,0,4,0,-16,-4,-1,-16,2,-5,4,3,0,1,10,-1,-11,-3,-6,2,-3,-11),
	    10 => w(-2,-15,-4,-1,1,-11,1,-6,2,9,-17,-1,3,10,1,-7,-3,-2,0,-5,-1,-13,12,17,21,-1,18,0,-5,4,3,0,1,-9,8,-11,2,-2,-1,-42,-1,-21,-23,-2,-2,-8,-18,0,-2,3,-11,0,-8,-9,-13,1,-21,4,-3,-6,-6,-1,-1,2),
	    11 => w(-4,3,0,-21,0,-3,2,0,0,2,-7,7,5,10,1,-7,-1,-3,-3,9,-14,-3,-46,2,-10,7,2,0,-3,7,5,4,0,-7,1,1,-2,-9,7,1,3,0,-5,-7,4,-8,-4,-12,3,-2,-8,-6,-1,4,5,-2,-5,8,4,-2,6,-6,-4,-5),
	    12 => w(3,-20,-9,-14,-8,1,-3,-4,0,-1,-5,-1,9,-3,-5,-1,9,-2,-12,4,-3,0,5,0,-2,-1,-15,8,-6,1,5,-18,3,1,-8,2,-10,-14,1,5,-5,8,5,-7,0,0,-14,8,0,-1,5,3,7,-4,-17,6,-4,-19,-8,-7,4,7,24,-6),
	    13 => w(-4,6,5,0,-2,-2,-4,14,2,-1,-11,-10,-6,-13,3,-21,2,6,-12,0,10,3,0,-6,5,9,-2,1,22,-5,19,-2,4,-14,-2,-6,5,5,7,-14,1,1,2,-2,-17,3,0,-2,3,-1,1,-2,-2,-5,-5,1,-3,-3,-4,9,-16,-6,-6,-6),
	    14 => w(7,3,-3,-18,-4,-6,-8,0,0,5,7,1,-7,-8,-6,-3,-15,-20,-2,6,-7,-5,-1,-13,-7,10,-10,-18,-2,-4,-17,2,-14,-6,4,-13,-1,1,2,-5,-1,-10,6,-1,-1,4,-3,-7,20,-4,-10,-2,-2,-7,1,9,3,-10,17,-13,-3,-12,2,5),
	    15 => w(-12,-3,2,10,2,2,-11,3,3,-9,-2,-5,0,-7,-4,-3,-1,-5,4,-1,0,0,-3,0,6,-2,-2,0,0,-8,-4,6,13,5,-1,1,3,-10,-11,3,0,-1,2,4,-1,-2,-2,6,-2,4,2,-15,-2,-4,-2,-6,4,-15,-12,1,-7,-15,2,-2),
	    16 => w(0,-7,-5,15,1,-1,-5,7,-1,6,-16,-19,3,2,0,0,7,3,-6,1,-2,3,1,-2,-4,4,8,0,0,13,7,9,-1,-2,-5,7,6,-2,-1,5,-1,-7,3,0,-3,-3,-7,-3,-7,4,-1,-5,-1,3,3,11,-7,7,-1,5,-2,0,3,-4),
	    17 => w(-9,-2,-4,-2,0,2,8,-3,-4,-8,1,2,-4,18,-1,-3,13,38,-10,9,-2,7,-2,0,1,4,11,5,-6,7,14,-12,5,2,0,-9,-5,4,0,-19,-10,-2,0,1,1,1,-1,0,-1,8,-7,11,3,-2,3,-4,1,-5,4,-4,0,2,3,-7),
	    18 => w(-10,-1,-5,2,-8,13,-5,-8,0,2,3,-5,-2,-7,-1,1,-5,7,-2,1,8,0,-1,5,1,-5,-22,2,-2,-4,0,0,-4,-9,5,-9,1,4,3,-5,-10,-7,5,-5,0,12,1,0,-3,-6,-1,11,3,-3,-1,0,-6,7,-8,0,3,-1,0,3),
	    19 => w(-1,-9,3,-2,0,8,-2,-1,0,0,-16,-2,0,-1,-1,0,5,-16,-11,9,-4,-5,0,4,7,1,1,-44,0,1,-4,4,-6,3,4,3,7,-6,13,4,4,-5,6,1,2,-1,2,-11,-3,1,6,-3,-7,-2,-2,-25,-2,-1,-1,0,-9,-1,3,2),
	    20 => w(3,2,-12,2,6,-4,-1,4,1,5,-6,-6,1,-5,-1,-11,1,4,3,13,-3,19,0,-9,-4,-42,-3,3,-3,-15,-24,-1,-7,-6,1,-13,-8,0,-9,0,1,23,-17,-24,-1,3,1,11,0,-2,2,5,-1,-4,-2,-1,10,-15,-2,3,2,2,-9,-7),
	    21 => w(13,-7,1,-6,0,1,-22,-3,-7,8,-2,0,0,8,0,-31,-3,35,-3,0,-8,-9,3,6,-6,-5,19,-2,12,-2,12,7,-1,-7,0,-12,0,0,-3,5,-3,-10,7,2,-6,3,-3,-4,-1,-22,-11,19,-1,9,2,-2,-12,-23,8,-1,-1,-11,1,11),
	    22 => w(-1,2,12,1,6,-9,4,5,-13,-2,-1,-2,-3,8,-10,1,1,-8,2,-5,-3,-5,0,-14,-1,2,-6,-10,-4,-4,-10,1,13,-23,-11,-6,-3,2,0,-11,-3,-2,3,2,11,-2,-4,1,-4,-8,0,-3,-2,-2,4,-2,-1,5,-4,-3,0,-10,1,16),
	    23 => w(3,14,3,-5,2,-6,12,5,-1,-5,-7,-3,-3,7,0,0,-5,5,-10,-4,4,12,-3,12,8,0,2,-6,2,3,-7,-2,-3,11,-8,-8,-7,2,-15,4,0,6,-16,-8,-1,3,-1,25,-3,0,-2,1,-6,23,-3,6,10,-5,-9,-1,-10,-3,1,-12),
	    24 => w(5,-7,-12,11,16,-1,-3,-1,4,-9,8,12,-6,-12,3,7,0,-8,2,-5,-2,0,-4,10,-6,1,9,-3,-2,-2,-11,-3,3,0,-5,8,5,4,-6,8,0,-3,-26,-5,-1,-3,7,-4,-11,-2,8,-12,-1,1,6,-1,-1,-7,2,6,-19,19,-5,-7),
	    25 => w(4,7,-3,-3,-10,3,-9,-4,-2,-2,-12,0,10,-2,-2,7,14,4,5,-7,9,0,0,20,1,1,-6,-18,-2,19,0,-10,-3,-17,0,-2,-4,-15,1,0,-8,4,2,-2,-3,1,4,0,10,1,3,4,-12,12,2,-4,12,-6,-13,-15,-5,-18,8,0),
	    26 => w(4,0,13,5,6,5,6,-2,11,7,0,2,-4,10,7,-4,-2,0,1,-13,-1,-5,-2,-1,5,-4,-14,4,-1,19,2,-1,-4,-11,-14,-14,-5,2,-2,-3,-5,-18,-8,9,1,-12,21,3,4,5,3,9,0,-11,-1,-1,-2,5,-5,-2,-4,2,-4,1),
	    27 => w(-8,0,5,-3,4,-4,7,-3,-5,1,27,-9,-7,6,7,1,17,-7,-2,2,8,-6,7,3,6,-5,1,6,-1,7,-15,48,2,2,-4,-13,-2,4,5,1,-5,-3,-4,9,0,-4,2,-12,-1,9,8,9,-1,-13,-1,11,-3,7,-7,17,-5,-1,7,-7),
	    28 => w(-1,-1,0,4,-3,4,5,-13,6,3,-54,-2,8,14,3,0,-6,-8,9,-3,-4,3,3,3,-1,8,7,8,22,6,0,-4,2,8,2,-8,6,1,8,-16,1,9,-19,3,-2,10,7,9,-8,3,-1,0,5,5,12,-2,14,2,6,-7,-10,-3,2,17),
	    29 => w(4,-13,6,-21,8,1,-15,-6,-7,2,2,-4,-6,2,-3,0,-43,-3,-1,15,-7,5,-2,2,0,5,7,9,-7,2,6,-7,0,5,2,11,3,2,7,-35,5,-1,3,1,2,-1,6,1,3,-16,-6,1,2,-7,5,-3,-6,11,3,9,0,3,-8,-9),
	    30 => w(0,-3,5,8,-6,0,0,-8,-5,2,-18,-1,-10,0,1,-2,4,0,1,-16,-6,-6,-1,-8,-2,11,-4,2,1,4,12,-1,-2,26,14,17,3,7,-1,3,-4,7,5,-8,5,1,1,1,-3,-3,-1,20,6,4,-3,-1,3,0,0,3,2,1,-2,-3),
	    31 => w(-21,18,6,15,1,-2,1,-3,-4,1,-5,-7,0,5,0,-1,-10,0,-1,-12,-8,-7,-5,-1,-5,-4,-1,3,3,-2,-5,1,3,9,6,8,-1,7,-6,0,10,2,1,-6,-3,8,3,-41,4,-15,11,1,-1,1,-1,-2,6,-1,6,2,56,17,0,3),
	    32 => w(-2,3,0,0,-6,-2,-2,-1,0,-2,-3,-5,0,-3,3,-5,5,0,-1,1,-1,-5,-6,5,26,12,-4,-1,-6,6,14,-3,0,-2,-11,-15,3,-4,-8,12,0,2,6,11,-3,-21,-8,-13,1,5,-4,9,-3,-1,0,-7,0,-9,0,-9,-5,14,0,-16),
	    33 => w(-13,1,1,0,-6,1,21,-4,20,6,1,1,-1,12,-1,-1,3,0,-4,-2,-3,-1,-3,-8,2,1,-1,-6,1,-15,1,-6,2,-5,0,2,-1,-3,-9,1,0,2,-11,1,1,3,-8,0,-4,4,3,-2,-21,1,-2,7,3,0,0,-5,4,5,4,4),
	    34 => w(-4,-1,3,-4,-5,-7,-12,13,11,7,6,2,10,-2,5,1,-1,15,1,-10,4,-1,0,-1,-2,-3,3,7,14,-2,-1,2,1,11,15,-9,2,-2,4,-10,-6,-3,-4,2,-15,-9,3,0,8,-8,-5,3,-1,-2,4,-2,-4,-3,8,1,-14,11,-15,-8),
	    35 => w(2,2,3,-1,-5,16,14,8,-2,-3,3,-1,-1,-2,-11,-5,-22,17,-9,3,10,7,4,-3,-16,-1,2,-8,1,-4,-10,-10,3,-2,-1,-18,-1,1,-9,0,3,26,-7,-2,4,-6,-1,0,2,3,-1,-2,-8,7,-1,5,1,1,8,4,-5,0,-3,-8),
	    36 => w(-6,-3,-4,4,-5,3,3,7,1,-2,-3,12,-12,-2,-31,1,9,-1,14,-2,-2,0,-41,-6,2,1,33,-5,-8,-4,6,-2,2,5,-6,0,-13,15,-2,-5,15,16,27,-4,-4,9,-9,-2,-8,-6,41,-4,57,-33,-10,5,-3,-1,35,-1,-1,5,-8,0),
	    37 => w(-3,-5,-9,-2,-6,2,-8,4,0,5,4,22,-2,-3,-20,0,3,-1,0,-20,-6,-4,13,-8,3,-13,-6,-5,-5,17,1,3,40,0,7,-13,6,28,3,13,5,11,2,6,-7,2,-43,42,-16,-8,-8,-2,2,-4,54,-1,6,4,-17,-1,-5,8,1,4),
	    38 => w(5,6,2,0,-11,0,3,8,0,63,15,-2,7,-8,5,23,-14,8,2,-2,4,-2,-8,5,-40,14,-10,-9,-2,-12,-7,-4,-2,-4,-6,-23,-15,3,-7,37,-13,-37,-3,4,7,1,55,2,3,6,86,-11,-22,-5,-21,44,27,15,11,-3,-5,-1,1,3),
	    39 => w(2,-2,-23,5,9,-6,-5,-5,1,1,13,-11,-10,-4,2,-7,4,-2,-1,2,5,0,-20,-7,7,-3,-15,7,-2,8,6,-11,0,-5,-14,1,-5,-12,6,1,17,-3,-15,14,3,6,-6,-19,46,-5,7,-10,-20,-5,2,-7,6,3,-2,-5,6,-5,6,2),
	    40 => w(4,-2,1,6,0,1,2,-1,1,11,-7,-9,-2,3,-6,8,-10,0,11,-3,3,0,-15,-2,2,-3,15,6,2,-14,0,3,-2,3,7,6,6,1,0,7,17,-8,0,-2,-1,14,-26,7,16,-2,26,0,27,13,11,-3,10,-8,-10,-5,2,-5,5,15),
	    41 => w(11,-4,-2,-2,4,-1,8,0,3,-2,-4,-10,-4,0,19,0,-9,1,8,9,-3,-3,-6,4,2,-8,-3,-2,4,-24,-2,11,18,6,7,4,7,-39,1,-10,3,2,3,2,22,1,14,1,4,6,-2,-2,1,0,10,-2,4,0,-7,23,-17,7,2,-17),
	    42 => w(-3,1,0,1,8,-6,-3,3,3,8,-21,-1,-5,16,0,12,4,-1,3,-4,7,8,3,-4,-6,-24,-36,7,3,8,13,-1,-6,3,5,2,9,5,-26,39,18,-14,-33,-1,3,4,-6,-2,2,-3,-12,7,-5,6,9,10,22,-17,-1,-3,-5,2,0,0),
	    43 => w(-3,12,9,8,9,-6,9,2,15,9,6,17,6,-13,3,-1,8,8,-1,-10,0,-4,10,3,2,-7,5,-9,-3,3,-10,16,7,3,34,0,12,-15,8,1,-1,0,5,4,16,8,-2,9,9,7,0,5,4,-4,-10,-2,-5,-3,3,-3,-4,1,-4,7),
	    44 => w(-4,-1,-9,-2,-23,3,5,-2,-2,-12,0,-4,-1,-3,-25,7,0,5,-15,1,5,-2,-9,-3,1,-1,-3,0,-15,-3,0,-2,-1,16,-12,-3,-14,-8,-10,-2,3,-20,-3,2,0,-13,9,4,-7,7,-4,-1,1,32,-22,-6,-1,-2,-38,3,4,-3,0,-15),
	    45 => w(0,0,-11,2,5,-1,1,-4,-3,-1,7,-28,13,-2,-4,-6,-1,-2,-7,2,-14,-8,9,-1,-3,-2,6,-9,-4,1,-1,-13,8,0,-4,-2,1,-3,0,-16,7,-5,3,7,-41,-6,1,-5,17,-2,8,1,0,6,-14,1,-19,-2,7,8,-9,-15,3,9),
	    46 => w(7,-17,-1,-7,9,8,-13,3,6,1,-12,2,4,10,-4,-4,4,-11,0,1,-7,17,9,-2,-32,-13,-4,-6,-6,5,1,5,3,6,-2,-1,-9,-10,3,-7,6,-4,7,3,-1,-5,-10,2,-3,0,13,-6,0,1,5,-12,-24,-3,2,-11,-9,2,6,-1),
	    47 => w(3,5,20,20,2,-6,0,-4,-3,3,2,10,1,2,-1,0,-6,-7,-4,-9,-12,-7,-2,3,-7,1,1,-7,3,6,-12,11,-2,1,-12,2,-19,7,-8,2,-8,-2,-7,-4,-2,-1,-2,-1,-32,0,-18,18,-5,-7,13,-2,2,1,0,3,5,-2,2,-8),
	    48 => w(0,-14,-14,-6,5,3,4,8,-1,3,-12,-8,-2,-3,5,1,-10,-3,3,-4,1,4,7,-1,7,-4,3,-4,2,-8,3,-12,0,-2,-7,3,7,-9,-4,-2,0,5,-5,-7,0,11,22,-11,11,0,8,-2,2,2,-6,7,0,-13,4,-3,-7,-7,23,0),
	    49 => w(-3,-11,-5,-4,3,-2,-8,11,-13,0,25,2,5,-7,3,-1,-9,2,5,13,18,-1,0,-3,-1,0,3,12,8,8,15,4,-5,-4,4,-1,2,6,9,0,16,12,8,-4,0,1,1,-3,1,0,13,-1,-6,-4,1,7,3,-1,8,0,-6,1,-9,8),
	    50 => w(9,2,-5,4,-2,-2,5,2,11,3,5,7,-5,6,-1,0,-7,-5,-1,17,-1,5,4,-4,-2,6,4,-1,-3,-6,4,-1,13,-21,11,3,-3,-2,-1,1,1,15,-1,-2,2,3,0,0,17,6,-10,0,5,-4,3,0,10,4,-11,8,1,-8,-8,-4),
	    51 => w(0,7,7,5,2,-4,-9,0,-5,3,16,0,-4,-4,-4,0,9,1,-10,7,-11,-3,7,2,2,0,0,1,2,0,-11,-3,9,17,13,-5,1,5,-4,-2,9,2,-3,10,0,-2,-2,0,-2,11,2,0,-7,-4,-4,-3,15,-3,-2,-2,4,7,0,3),
	    52 => w(-1,7,4,0,-9,3,8,7,-1,6,-7,-17,5,3,2,-3,-1,7,-2,0,0,-7,1,0,20,8,2,4,3,0,-6,1,-2,4,-6,3,5,0,-6,-4,-3,-7,7,0,2,-3,6,8,4,6,-1,-1,1,1,9,2,-8,23,-1,22,3,8,2,3),
	    53 => w(-5,5,1,13,4,0,7,-4,-4,0,2,1,-3,17,4,7,0,3,-2,9,4,-3,4,-5,2,3,-2,-2,-5,0,-4,-3,0,4,0,0,11,2,-9,-6,-1,0,3,-2,2,-1,0,-1,4,-10,4,-1,-1,2,8,6,-1,21,7,2,-7,-7,-6,7),
	    54 => w(-3,-2,-7,7,13,8,0,2,3,-5,-2,4,-2,-8,4,0,11,9,-4,-4,0,-6,-1,4,2,1,8,9,2,-2,-3,1,11,7,1,6,0,-3,0,5,-2,-3,-4,-3,-2,9,-7,-2,-16,-6,6,-2,-2,-4,-3,-1,1,8,-9,2,-9,8,-4,-1),
	    55 => w(-18,9,2,8,1,18,7,-1,-1,-4,9,0,-3,-7,-5,2,4,2,0,9,-13,-1,0,2,-2,0,3,-12,0,0,-2,-3,-2,-2,-1,-3,4,9,11,2,1,6,-2,-4,-1,4,3,6,8,-1,-4,0,7,-7,4,-7,-8,1,5,-7,-3,4,5,4),
	    56 => w(-2,-5,0,-14,-18,2,2,1,-5,0,1,24,2,-2,-3,8,-1,-5,-3,-9,0,1,-9,-2,-1,-1,0,-13,9,-20,-6,2,2,2,5,4,6,15,-1,4,0,-3,-8,-6,3,-3,-3,-20,-6,8,-4,-11,5,-5,-10,-13,11,-17,-3,14,2,-9,5,1),
	    57 => w(6,-2,-3,17,-2,1,-3,4,-2,-5,-13,-5,6,0,4,-4,11,-9,5,5,12,-4,-2,5,-2,-1,1,-12,-9,1,1,6,-2,-4,1,2,3,-4,0,-22,1,1,5,3,2,-5,7,-1,18,-7,-14,3,5,6,6,4,-5,-6,-11,2,-9,1,-5,-4),
	    58 => w(9,-1,-6,-12,1,6,13,1,14,4,12,-1,-4,-3,4,-4,-1,3,0,-12,0,12,-6,10,3,5,-2,-12,2,12,-4,0,0,3,2,6,13,4,-1,2,2,9,10,8,-2,-9,1,5,2,4,4,-1,-2,0,-7,0,-1,-6,-4,-7,-8,7,-2,-2),
	    59 => w(-1,3,-11,-4,2,2,2,-3,5,2,10,11,-2,12,4,10,9,2,-1,9,8,3,-1,1,-1,-2,-3,6,0,11,1,-8,3,-1,-32,-5,-5,2,-2,-1,8,-1,2,6,3,-3,21,0,3,-39,15,12,-17,-1,12,14,-1,3,1,-1,19,-21,-6,1),
	    60 => w(-1,4,6,-4,2,-2,4,4,-1,-4,0,0,0,-5,-8,-5,12,-1,-8,-2,2,0,3,-1,-2,3,48,5,2,-6,3,12,1,-5,-4,1,-7,69,-4,-3,25,-3,2,11,8,-2,-4,0,1,1,-7,8,-2,5,4,3,-1,4,0,2,8,-2,-10,-5),
	    61 => w(-13,-7,1,-5,4,0,10,-3,6,6,-10,-4,6,3,15,-4,2,1,-3,4,3,48,-1,1,3,9,-9,0,-3,9,-5,5,9,-2,-6,2,4,-13,2,-1,-4,-3,0,0,-4,3,-3,5,-4,-3,-1,5,1,0,1,3,2,0,0,-4,-9,0,-2,-1),
	    62 => w(0,2,0,5,-11,0,3,11,-4,5,-2,-1,1,9,2,-1,14,11,-1,-6,-6,-8,9,1,-2,0,28,2,3,0,7,1,-1,1,1,-4,2,1,5,6,-8,12,-6,2,0,-2,2,2,-1,0,-3,4,-1,-2,1,-8,13,1,5,-1,4,2,0,5),
	    63 => w(-3,3,-1,-2,-3,-1,2,4,17,-1,-3,-2,1,-6,-3,-3,-8,1,3,-1,-12,-1,-11,-1,0,2,2,0,0,-4,-9,-3,-6,1,14,-6,42,1,-9,-1,-7,4,-1,7,-12,5,3,5,0,-9,-2,-6,6,0,-2,-2,-16,-3,4,2,0,0,0,-5)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;