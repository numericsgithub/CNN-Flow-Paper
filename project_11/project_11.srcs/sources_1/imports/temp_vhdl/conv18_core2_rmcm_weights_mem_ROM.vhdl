library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv18_core2_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv18_core2_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv18_core2_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(2,6,1,7,27,5,3,9,2),
	    1 => w(-1,11,-1,7,37,3,-5,-11,-4),
	    2 => w(-7,-7,-7,-6,-7,-5,-4,-4,-4),
	    3 => w(-2,-7,-13,-9,-7,-10,-7,-7,-17),
	    4 => w(11,27,9,13,15,13,10,-21,12),
	    5 => w(2,3,2,-2,32,1,8,9,7),
	    6 => w(17,19,15,12,19,9,9,-8,9),
	    7 => w(-4,-34,0,7,114,-2,-9,-14,-5),
	    8 => w(5,6,17,4,20,12,16,9,-3),
	    9 => w(5,-10,-7,9,-33,1,13,11,10),
	    10 => w(6,7,4,5,36,6,10,7,9),
	    11 => w(-2,-1,0,7,28,2,8,27,1),
	    12 => w(10,12,11,1,-2,1,-12,-20,-9),
	    13 => w(-4,-9,-6,-26,-9,-20,-4,-4,-7),
	    14 => w(3,24,4,12,11,10,7,-10,5),
	    15 => w(-3,2,9,-6,-4,20,-3,-4,5),
	    16 => w(-12,-3,11,-6,-10,11,-4,3,13),
	    17 => w(12,9,13,14,-28,14,13,17,13),
	    18 => w(0,-8,0,-9,-5,-8,-6,-2,-6),
	    19 => w(-4,-6,-3,-9,-10,-8,-3,-9,-3),
	    20 => w(3,6,1,6,30,3,2,0,1),
	    21 => w(-7,-14,-5,-10,-18,-9,-5,-9,-4),
	    22 => w(-4,2,35,-6,-6,14,5,-6,-2),
	    23 => w(-2,7,8,-2,-27,18,-1,2,9),
	    24 => w(-2,-4,-2,-9,-13,-8,7,39,1),
	    25 => w(-7,-12,-5,-10,-5,-9,-6,-7,-5),
	    26 => w(-1,8,-3,1,16,-3,-13,-16,-12),
	    27 => w(0,-7,-2,-16,-40,-5,4,-17,5),
	    28 => w(0,-1,-1,7,41,3,9,14,8),
	    29 => w(4,6,3,6,29,4,0,5,-1),
	    30 => w(-7,-9,-7,-7,-6,-6,-6,-7,-5),
	    31 => w(-19,-17,-17,-9,-9,-7,-4,1,-3),
	    32 => w(-29,-13,-4,-3,14,-2,-2,0,0),
	    33 => w(20,14,0,-6,35,-3,2,5,17),
	    34 => w(-8,-7,-7,-8,-11,-6,-6,-8,-5),
	    35 => w(21,-5,-19,31,-5,-26,19,-9,-13),
	    36 => w(3,-3,3,6,28,5,3,12,2),
	    37 => w(3,4,2,4,33,3,2,0,1),
	    38 => w(-12,-36,-11,-5,39,-7,1,8,0),
	    39 => w(-11,-18,-14,-7,-7,-8,-12,-13,-11),
	    40 => w(11,4,9,6,29,8,3,4,0),
	    41 => w(-1,12,0,-11,47,-11,-18,-35,-18),
	    42 => w(9,2,11,13,6,20,11,-4,10),
	    43 => w(7,31,7,-1,2,-1,8,6,8),
	    44 => w(-9,-21,-8,14,-11,15,1,8,1),
	    45 => w(6,10,6,-6,36,-6,3,21,4),
	    46 => w(4,2,4,5,31,1,6,3,5),
	    47 => w(11,16,12,4,8,2,-12,-32,-13),
	    48 => w(-7,-1,-4,-7,6,31,-1,-4,7),
	    49 => w(6,4,5,4,33,1,1,0,1),
	    50 => w(10,8,8,8,22,7,1,-1,3),
	    51 => w(-3,-2,-2,-2,37,0,0,2,1),
	    52 => w(5,5,4,8,34,5,3,0,4),
	    53 => w(5,19,3,0,30,-3,-4,-16,-3),
	    54 => w(2,6,1,6,34,4,5,6,4),
	    55 => w(-11,-5,16,-7,-16,7,12,7,27),
	    56 => w(3,-15,6,7,29,5,4,9,3),
	    57 => w(-12,-14,-11,-4,-12,-7,-8,-12,-10),
	    58 => w(6,7,7,-2,4,-1,9,22,8),
	    59 => w(-5,-5,-5,-11,-9,-10,-7,-3,-7),
	    60 => w(3,4,3,5,30,1,2,4,2),
	    61 => w(-2,-6,3,-4,-8,-2,16,5,19),
	    62 => w(-6,-28,-3,-20,-2,-18,-17,0,-17),
	    63 => w(4,5,4,7,22,5,3,3,3),
	    64 => w(-1,-15,0,-6,70,-9,-1,-5,-1),
	    65 => w(-10,-24,-10,-2,21,-1,-2,0,-3),
	    66 => w(-6,-10,-5,-9,-10,-8,-4,-8,-4),
	    67 => w(1,5,0,4,30,5,0,-5,-1),
	    68 => w(-1,10,-2,7,30,6,3,10,4),
	    69 => w(10,-5,-7,19,-16,-7,7,3,1),
	    70 => w(1,-7,-6,22,-14,-9,3,-8,-8),
	    71 => w(-4,2,-5,-6,0,-6,-11,-14,-9),
	    72 => w(-15,-13,-12,-14,-8,-13,-16,-12,-14),
	    73 => w(-1,0,-1,1,34,-1,0,-3,1),
	    74 => w(4,11,2,-9,4,-9,13,34,8),
	    75 => w(1,5,2,7,33,2,-1,6,-1),
	    76 => w(10,18,8,0,2,1,-2,-8,-1),
	    77 => w(10,14,10,4,31,3,2,-10,2),
	    78 => w(5,6,6,8,53,4,9,4,10),
	    79 => w(2,6,2,4,33,-1,3,1,2),
	    80 => w(-7,-10,-7,-13,-29,-9,-10,-10,-8),
	    81 => w(-8,-6,-6,-9,-6,-8,-7,-6,-6),
	    82 => w(-2,-11,-1,1,-4,1,9,19,10),
	    83 => w(5,10,3,8,32,4,4,7,2),
	    84 => w(-9,-5,-7,-5,-20,-5,-12,-6,-11),
	    85 => w(23,40,20,38,-52,39,26,32,21),
	    86 => w(13,4,-2,8,11,-10,3,-5,-3),
	    87 => w(-43,36,14,33,20,-6,13,-3,-7),
	    88 => w(1,18,16,-10,-12,12,-5,14,21),
	    89 => w(4,0,2,1,30,1,2,0,0),
	    90 => w(6,6,6,23,29,18,12,-9,9),
	    91 => w(7,12,5,8,25,7,7,-3,7),
	    92 => w(-8,-9,-6,-8,-18,-7,-8,-7,-6),
	    93 => w(-9,-8,-8,-10,-7,-9,-8,-12,-7),
	    94 => w(-7,-5,-7,-11,-8,-9,-4,-4,-3),
	    95 => w(-7,-8,-7,-1,-7,2,-6,-3,-4),
	    96 => w(-12,-2,-12,-6,25,-6,-12,-13,-11),
	    97 => w(0,-8,0,-3,-24,-1,9,15,7),
	    98 => w(-3,-6,-2,-5,-14,-4,-2,-4,-1),
	    99 => w(20,24,16,12,-24,16,22,2,20),
	    100 => w(1,8,2,5,33,2,-1,-1,-1),
	    101 => w(0,9,0,7,43,6,4,4,4),
	    102 => w(8,22,7,17,-27,15,10,13,9),
	    103 => w(17,0,5,21,2,0,13,-2,5),
	    104 => w(6,5,6,2,29,-2,6,2,6),
	    105 => w(11,19,9,2,-33,3,1,-11,1),
	    106 => w(11,29,7,9,46,5,7,-8,7),
	    107 => w(3,2,2,2,30,-2,4,-1,3),
	    108 => w(4,-13,6,7,-15,6,12,25,11),
	    109 => w(7,12,9,14,38,7,7,9,8),
	    110 => w(-5,2,-8,-7,-36,-2,-8,-13,-9),
	    111 => w(1,6,1,7,34,4,0,4,0),
	    112 => w(-17,-19,-15,-11,-6,-12,-14,-14,-12),
	    113 => w(1,3,1,2,-52,7,9,35,8),
	    114 => w(12,13,12,-2,16,-1,15,1,13),
	    115 => w(-8,-9,-6,-9,-11,-9,-6,-12,-5),
	    116 => w(-5,-8,-5,-7,-10,-5,-7,-9,-7),
	    117 => w(-1,10,-1,-4,63,-4,0,-1,0),
	    118 => w(-7,-13,-8,-13,-12,-12,-7,-11,-7),
	    119 => w(3,7,3,4,30,1,2,1,3),
	    120 => w(4,-18,6,1,115,-8,-7,-44,-3),
	    121 => w(2,3,2,-1,32,0,0,0,0),
	    122 => w(-2,-2,-2,-1,40,-5,-2,-3,-1),
	    123 => w(10,24,11,1,-22,4,-4,-2,-3),
	    124 => w(-2,-8,-3,2,-11,3,9,14,8),
	    125 => w(-8,-12,-9,-10,-7,-11,-4,-19,-4),
	    126 => w(1,6,1,4,34,2,2,3,2),
	    127 => w(-20,-11,-17,-13,-31,-10,19,33,16),
	    128 => w(-5,-2,9,-21,5,23,-3,2,2),
	    129 => w(3,6,2,-4,33,-5,2,2,2),
	    130 => w(8,2,9,8,32,6,8,6,8),
	    131 => w(-15,-11,-14,-12,-11,-11,-9,-11,-9),
	    132 => w(-8,-27,-5,2,13,1,-1,16,1),
	    133 => w(8,3,7,4,38,0,5,4,5),
	    134 => w(-10,5,-8,-10,-5,-10,-9,-15,-9),
	    135 => w(-7,-10,-6,-8,-12,-8,-4,-6,-5),
	    136 => w(3,-3,1,-10,-4,4,-8,4,27),
	    137 => w(10,13,9,9,20,6,15,-6,15),
	    138 => w(-23,-4,-24,-8,-33,-1,24,12,21),
	    139 => w(-2,-6,-2,-4,55,-5,-3,-2,-2),
	    140 => w(-1,-1,15,0,-5,4,3,-2,25),
	    141 => w(12,11,9,0,-4,0,4,-1,3),
	    142 => w(25,10,22,2,9,2,30,7,30),
	    143 => w(5,8,4,9,22,6,5,5,4),
	    144 => w(15,-20,-17,26,-20,-12,-7,17,12),
	    145 => w(4,9,6,-10,23,29,3,10,3),
	    146 => w(3,5,2,1,36,-2,2,7,2),
	    147 => w(3,5,2,5,36,0,3,1,2),
	    148 => w(27,-11,-18,56,-17,-31,15,-5,-14),
	    149 => w(-3,7,1,-5,33,-1,-10,-14,-8),
	    150 => w(4,-7,2,2,39,0,5,8,3),
	    151 => w(-10,45,-14,-28,-35,-28,8,0,9),
	    152 => w(8,37,8,-1,12,-4,22,1,19),
	    153 => w(4,4,5,5,29,4,4,5,3),
	    154 => w(-12,-13,-10,-7,-16,-7,-7,-12,-8),
	    155 => w(4,17,2,-2,22,-1,-3,-13,-2),
	    156 => w(-5,-12,-5,3,-14,4,9,17,10),
	    157 => w(-7,-4,-6,-6,-4,-5,-7,-5,-7),
	    158 => w(-11,-4,-1,-16,1,6,-9,-5,0),
	    159 => w(17,-1,-1,18,-25,-3,9,-1,-2),
	    160 => w(5,-12,7,29,0,25,12,-16,14),
	    161 => w(-2,-3,-2,-3,32,-4,-2,-3,-2),
	    162 => w(-10,-16,-8,-1,-9,-1,-10,-6,-9),
	    163 => w(-12,-16,-10,-14,-8,-13,-12,-12,-10),
	    164 => w(-12,-14,-10,-13,-20,-9,-9,-11,-7),
	    165 => w(-9,-9,-10,-9,-7,-9,-5,-6,-4),
	    166 => w(48,-18,-23,82,-42,-43,3,-9,-3),
	    167 => w(-10,-14,-7,-9,-20,-7,2,-4,2),
	    168 => w(1,2,0,7,28,3,8,4,7),
	    169 => w(24,1,1,10,-4,-4,-2,-6,-2),
	    170 => w(-8,-7,-7,-8,-11,-7,-5,-13,-4),
	    171 => w(0,6,0,7,35,3,-1,3,0),
	    172 => w(-14,-11,-12,-9,-11,-9,-10,-6,-10),
	    173 => w(10,8,2,28,14,-5,8,6,2),
	    174 => w(6,-2,4,8,41,6,3,14,1),
	    175 => w(3,18,3,-4,-4,-4,-6,-25,-5),
	    176 => w(8,36,7,7,-5,7,-1,-2,-2),
	    177 => w(6,10,4,7,25,2,11,-7,13),
	    178 => w(23,-4,0,37,1,-11,17,-7,2),
	    179 => w(7,2,1,14,19,-1,-1,9,9),
	    180 => w(3,4,2,0,1,17,0,6,17),
	    181 => w(2,-9,-24,-2,40,34,-9,21,23),
	    182 => w(6,1,9,13,29,10,7,-8,9),
	    183 => w(-2,-2,-2,-2,-24,0,1,1,2),
	    184 => w(-2,7,-2,8,23,8,0,8,-1),
	    185 => w(6,4,11,21,11,16,5,24,4),
	    186 => w(-2,-3,-2,-5,-16,-3,-5,-3,-5),
	    187 => w(31,0,0,18,12,-3,-3,-4,2),
	    188 => w(6,27,4,-11,14,-9,-3,-9,-3),
	    189 => w(-4,-5,-3,-7,-5,-7,-2,-8,-1),
	    190 => w(0,2,8,1,18,14,10,10,2),
	    191 => w(-1,-6,-1,0,42,-4,-1,4,-2),
	    192 => w(4,2,4,4,30,1,2,0,1),
	    193 => w(18,-15,-4,75,-22,-55,29,-19,-8),
	    194 => w(0,-4,0,2,40,-2,4,6,3),
	    195 => w(4,-12,1,9,-39,2,9,9,7),
	    196 => w(8,7,7,7,30,4,-3,-8,-2),
	    197 => w(13,35,-37,-8,22,30,-6,-2,14),
	    198 => w(-2,-5,-2,-5,64,-7,-2,-9,-1),
	    199 => w(0,5,-1,13,16,12,1,5,0),
	    200 => w(-3,-16,-1,-15,-21,-13,-8,-5,-9),
	    201 => w(-7,-9,-5,3,-21,4,7,3,7),
	    202 => w(7,5,6,10,26,8,-2,-6,-1),
	    203 => w(5,10,5,4,-33,3,-2,-10,-3),
	    204 => w(2,7,3,3,28,2,4,2,3),
	    205 => w(4,2,3,2,16,3,2,12,3),
	    206 => w(-9,-21,-4,10,46,8,1,13,1),
	    207 => w(2,5,4,6,32,4,-1,2,0),
	    208 => w(-3,29,-6,-6,29,-8,-11,-18,-10),
	    209 => w(4,5,5,6,30,3,9,4,8),
	    210 => w(7,-10,7,13,-11,13,9,26,10),
	    211 => w(0,2,0,4,34,-1,-1,-4,-1),
	    212 => w(4,-1,4,4,57,2,-5,-2,-8),
	    213 => w(-5,-16,-5,-7,65,-9,-1,-1,-2),
	    214 => w(10,10,8,9,38,6,-1,-19,1),
	    215 => w(-10,-5,-10,-9,-11,-6,-8,-9,-7),
	    216 => w(2,5,1,4,34,2,2,-1,2),
	    217 => w(-7,-10,-7,-11,-26,-8,-5,-8,-6),
	    218 => w(0,-3,0,3,22,3,10,19,10),
	    219 => w(-14,-10,-10,-10,-12,-9,-9,-6,-8),
	    220 => w(0,-3,-2,-6,58,-7,-2,-9,-3),
	    221 => w(2,29,2,7,5,7,4,-9,4),
	    222 => w(-11,-5,-9,-5,-14,-4,-2,-5,-2),
	    223 => w(2,6,1,5,34,2,3,0,4),
	    224 => w(2,-10,1,-4,35,-2,-3,20,-3),
	    225 => w(6,5,8,9,43,3,6,5,6),
	    226 => w(5,6,5,6,33,5,-1,3,-1),
	    227 => w(-8,-18,-7,2,-3,2,-4,5,-4),
	    228 => w(26,4,26,17,30,10,12,11,7),
	    229 => w(2,3,2,2,30,0,2,1,2),
	    230 => w(-10,-23,-11,-24,35,-30,-12,-23,-12),
	    231 => w(6,19,6,1,-22,1,-4,-10,-4),
	    232 => w(10,-5,10,32,8,23,7,-3,8),
	    233 => w(8,-4,5,21,12,17,3,0,4),
	    234 => w(-7,4,14,-12,-2,13,-10,-5,2),
	    235 => w(-14,-22,-12,8,-5,8,6,29,6),
	    236 => w(13,-23,17,11,23,8,-1,1,-2),
	    237 => w(6,39,6,-4,-5,-2,3,-4,3),
	    238 => w(-4,-5,-4,-2,37,-1,-1,-3,-2),
	    239 => w(0,-4,3,5,32,1,2,9,0),
	    240 => w(8,11,6,15,32,12,9,16,5),
	    241 => w(15,4,-5,12,36,1,-11,10,16),
	    242 => w(-5,-7,-9,8,-21,-5,10,5,4),
	    243 => w(5,4,6,5,33,2,3,10,3),
	    244 => w(4,9,3,5,31,4,4,3,3),
	    245 => w(2,2,1,3,35,0,1,0,-1),
	    246 => w(1,-2,31,-3,-9,1,-4,0,5),
	    247 => w(2,8,1,5,31,1,0,1,0),
	    248 => w(5,10,2,0,-4,-2,-14,-27,-11),
	    249 => w(-11,-9,-10,-7,-12,-7,-10,-3,-10),
	    250 => w(2,-8,4,7,34,4,10,16,6),
	    251 => w(-2,-17,-2,-4,44,-5,-1,3,-1),
	    252 => w(-6,7,3,-14,44,0,-10,-12,-5),
	    253 => w(10,-2,-6,21,-3,-12,3,-1,-1),
	    254 => w(-20,-13,-15,2,15,-1,-2,13,-1),
	    255 => w(3,7,2,9,39,4,0,3,-1)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;