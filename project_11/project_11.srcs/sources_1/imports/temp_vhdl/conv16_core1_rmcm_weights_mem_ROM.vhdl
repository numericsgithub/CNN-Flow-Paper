library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv16_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv16_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv16_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(7,-7,1,37,-33,-16,13,-11,0),
	    1 => w(0,-6,-1,-6,41,0,0,0,1),
	    2 => w(-10,-5,-6,-12,-11,-4,-8,-20,-8),
	    3 => w(-4,5,2,40,5,3,5,9,3),
	    4 => w(-20,-18,-1,0,-12,6,6,24,11),
	    5 => w(33,40,5,-102,49,19,23,30,7),
	    6 => w(-2,-2,-2,-7,-10,-6,-5,-4,-5),
	    7 => w(-1,-5,-5,12,7,-8,10,9,0),
	    8 => w(3,19,1,2,17,0,0,-7,-1),
	    9 => w(-10,-10,-8,-11,-12,-10,-8,-11,-8),
	    10 => w(8,14,6,12,19,10,9,9,9),
	    11 => w(-1,12,14,9,40,0,9,-1,2),
	    12 => w(-4,-7,-4,-16,52,-13,-3,-26,-6),
	    13 => w(10,-20,-2,-11,-96,-2,0,-13,2),
	    14 => w(20,8,-17,38,-14,-19,12,-22,-9),
	    15 => w(20,-8,-6,19,-13,-6,15,-5,-5),
	    16 => w(-1,-3,0,3,39,0,3,2,0),
	    17 => w(-5,-11,-9,70,3,-34,2,2,-4),
	    18 => w(7,18,6,3,6,2,4,1,5),
	    19 => w(-1,-1,-1,-6,60,-3,0,-8,0),
	    20 => w(3,8,4,1,24,3,3,-10,2),
	    21 => w(7,6,5,1,23,11,8,2,3),
	    22 => w(1,-1,0,-3,33,-1,1,0,0),
	    23 => w(12,10,2,9,27,2,12,6,8),
	    24 => w(-5,-9,-6,-2,-13,-1,-1,-6,-2),
	    25 => w(4,0,5,18,-1,-2,22,11,2),
	    26 => w(10,0,9,1,40,5,10,12,10),
	    27 => w(-5,1,7,22,13,-3,13,4,-2),
	    28 => w(3,7,5,2,31,3,-2,3,-2),
	    29 => w(-1,-3,2,9,-65,5,3,20,7),
	    30 => w(-9,-7,-9,-2,-5,-3,-6,-7,-6),
	    31 => w(-13,-3,-16,-28,-13,-29,-14,-5,-16),
	    32 => w(-5,5,-3,-1,-46,-4,-4,-13,-4),
	    33 => w(17,45,17,10,26,8,0,-22,0),
	    34 => w(13,20,6,-7,36,-2,18,23,-1),
	    35 => w(-1,19,16,-15,-16,18,-13,-23,0),
	    36 => w(-11,-1,2,-14,2,4,-15,2,-2),
	    37 => w(1,-12,1,5,35,7,-1,18,1),
	    38 => w(-5,-1,-6,-4,-5,-12,-6,-5,-13),
	    39 => w(3,25,2,-3,16,0,1,-11,0),
	    40 => w(-3,-13,-2,7,19,-6,17,9,1),
	    41 => w(8,-5,1,19,-19,-15,12,-5,-9),
	    42 => w(-1,-27,-3,-6,8,-6,2,48,-1),
	    43 => w(10,19,21,4,42,-13,7,28,19),
	    44 => w(2,1,3,0,33,3,2,2,2),
	    45 => w(2,-4,-4,40,-12,2,5,-5,-5),
	    46 => w(-6,-3,-7,-8,-8,-9,-3,-12,-2),
	    47 => w(7,3,5,3,32,4,6,-3,4),
	    48 => w(-6,-5,-10,-25,-19,-21,-8,-3,-11),
	    49 => w(3,9,1,2,36,4,1,6,2),
	    50 => w(-1,13,4,27,-20,0,3,1,-2),
	    51 => w(-5,-14,-5,-6,-8,-4,-7,-4,-7),
	    52 => w(-1,-45,4,8,-62,10,-5,-24,-2),
	    53 => w(6,55,2,-7,-41,-11,-8,-18,-7),
	    54 => w(14,-4,5,18,28,12,3,-4,14),
	    55 => w(-1,-8,-3,8,-41,1,4,28,11),
	    56 => w(1,12,3,3,47,3,9,12,9),
	    57 => w(9,9,8,3,19,5,5,0,4),
	    58 => w(4,-2,-3,21,5,-11,4,-5,-6),
	    59 => w(-3,-3,-4,-6,-9,-7,-4,-6,-6),
	    60 => w(3,11,3,18,-36,-9,6,4,0),
	    61 => w(23,38,21,-9,-14,-9,-11,-12,-12),
	    62 => w(5,-5,5,4,23,2,1,22,4),
	    63 => w(5,0,2,5,36,9,1,1,0),
	    64 => w(-7,-16,-3,-17,-28,-10,-3,-9,-2),
	    65 => w(0,-4,-2,-12,52,-4,1,-8,-1),
	    66 => w(-5,8,-5,1,-12,-1,-5,-7,-7),
	    67 => w(11,26,12,6,16,7,7,-5,7),
	    68 => w(-2,-5,-3,-4,-19,-6,8,27,11),
	    69 => w(4,13,3,4,30,4,8,-1,7),
	    70 => w(-3,-4,-3,-6,-7,-4,-4,-6,-4),
	    71 => w(-5,-12,-7,1,-9,2,6,14,7),
	    72 => w(-5,1,2,-1,29,18,0,7,5),
	    73 => w(28,9,-16,37,-37,-15,15,27,3),
	    74 => w(-6,-5,-7,-25,-36,-23,-1,1,-5),
	    75 => w(8,3,6,-2,25,1,9,4,6),
	    76 => w(1,4,-3,16,33,-9,3,-2,4),
	    77 => w(11,21,2,0,22,-5,3,10,17),
	    78 => w(1,2,2,-1,35,3,3,1,3),
	    79 => w(9,16,7,4,0,5,5,-1,4),
	    80 => w(-15,8,4,-10,-52,10,37,34,-11),
	    81 => w(11,2,-6,36,-1,-23,4,-1,-2),
	    82 => w(4,7,5,2,28,4,3,5,3),
	    83 => w(-1,0,-6,-9,-6,36,3,-7,4),
	    84 => w(1,13,1,9,29,8,0,-10,1),
	    85 => w(2,-1,2,1,33,0,4,-2,3),
	    86 => w(2,-10,3,15,8,14,8,-1,8),
	    87 => w(1,-19,-4,-19,39,8,-8,11,9),
	    88 => w(-1,-13,-4,-13,63,-8,-1,0,-1),
	    89 => w(-14,-17,-13,-16,-10,-13,-9,-18,-12),
	    90 => w(7,-1,1,28,-27,-10,7,7,1),
	    91 => w(46,-5,-5,-6,-12,2,-6,1,-2),
	    92 => w(-3,-12,-20,0,-8,-11,-6,-4,-1),
	    93 => w(7,1,3,6,43,9,6,0,4),
	    94 => w(3,5,0,31,-12,-7,2,1,0),
	    95 => w(1,-6,-16,6,-5,-8,22,12,0),
	    96 => w(18,5,9,-3,21,4,6,0,2),
	    97 => w(-5,8,4,-35,46,-3,-9,-12,-1),
	    98 => w(-7,-8,-9,-10,-4,-10,-11,-9,-11),
	    99 => w(3,7,14,-4,30,14,15,19,-5),
	    100 => w(2,12,1,9,23,9,-2,16,-3),
	    101 => w(4,6,3,4,38,7,5,7,4),
	    102 => w(11,42,12,0,-1,0,8,4,7),
	    103 => w(6,7,0,0,24,7,5,0,5),
	    104 => w(8,2,4,9,34,2,2,3,8),
	    105 => w(-9,-7,-6,-10,-13,-11,-13,-14,-10),
	    106 => w(-6,-19,-6,-7,-17,-8,-5,-13,-3),
	    107 => w(-1,0,0,-1,33,3,0,-9,0),
	    108 => w(6,3,10,20,32,7,8,-1,3),
	    109 => w(0,10,0,2,32,5,7,-1,5),
	    110 => w(2,0,2,2,35,2,4,4,4),
	    111 => w(2,0,-1,5,80,-9,-5,20,3),
	    112 => w(4,10,22,-20,-62,-104,-6,9,11),
	    113 => w(-7,5,4,-7,0,5,-22,-7,-8),
	    114 => w(-8,-8,-9,-9,4,-8,-4,-7,-4),
	    115 => w(3,4,3,1,31,1,4,-1,3),
	    116 => w(4,5,3,1,31,4,4,-3,2),
	    117 => w(12,6,10,5,41,7,9,4,8),
	    118 => w(-3,-5,2,-17,23,13,-2,0,4),
	    119 => w(-8,-1,18,-5,-19,34,-3,1,-4),
	    120 => w(3,-9,1,-4,27,-3,7,9,9),
	    121 => w(0,9,-2,-1,35,3,2,10,2),
	    122 => w(2,7,3,9,24,10,4,3,4),
	    123 => w(2,2,0,-2,36,3,2,3,0),
	    124 => w(24,-8,-7,-12,-57,21,-12,32,14),
	    125 => w(1,-2,1,-1,31,0,1,3,2),
	    126 => w(-3,-7,-6,8,-94,8,-7,47,-6),
	    127 => w(-8,-1,-8,-1,-11,-2,-5,-11,-6),
	    128 => w(2,-14,0,-14,63,-6,1,-4,-1),
	    129 => w(3,-14,-32,5,30,-24,9,27,8),
	    130 => w(5,7,2,7,25,8,7,3,4),
	    131 => w(10,3,4,20,-3,4,4,-6,-1),
	    132 => w(3,3,2,2,38,3,3,5,1),
	    133 => w(0,37,2,13,-12,13,6,-9,5),
	    134 => w(7,6,6,2,19,4,6,5,4),
	    135 => w(-6,-5,-5,-4,-4,-4,-10,-9,-8),
	    136 => w(1,6,1,-4,-18,2,-9,-7,-5),
	    137 => w(1,1,1,-1,32,1,3,6,3),
	    138 => w(14,40,13,-8,38,-3,15,43,13),
	    139 => w(1,3,1,9,36,3,-4,0,-3),
	    140 => w(2,-9,7,-10,19,35,5,16,-20),
	    141 => w(6,13,7,2,19,3,-1,-10,-1),
	    142 => w(4,-1,4,1,36,0,5,19,5),
	    143 => w(-1,3,-13,-7,-8,-5,-13,1,-2),
	    144 => w(-2,-9,-3,-8,-21,-10,-2,-6,-1),
	    145 => w(-20,-15,1,-23,-4,29,1,19,13),
	    146 => w(-8,-7,-11,-7,-3,-7,-9,-13,-8),
	    147 => w(2,-13,-5,76,-30,28,2,-14,-2),
	    148 => w(-12,-1,-14,-5,10,-3,-11,-1,-12),
	    149 => w(14,33,10,-11,-17,-4,0,-29,0),
	    150 => w(-9,-9,20,-14,5,50,1,-13,0),
	    151 => w(2,-9,1,-8,-23,-9,-5,-14,-4),
	    152 => w(12,26,10,-34,-34,-31,0,0,4),
	    153 => w(-5,-5,-3,9,-20,-10,-6,-4,-3),
	    154 => w(9,13,10,11,26,5,6,-6,6),
	    155 => w(16,-10,-5,9,-19,-7,-3,-16,-8),
	    156 => w(1,28,6,-10,-12,-12,-6,-3,-7),
	    157 => w(8,8,4,3,2,0,-14,-7,-18),
	    158 => w(-5,-3,11,-27,12,26,-9,-7,7),
	    159 => w(3,9,7,-11,45,13,0,1,3),
	    160 => w(-3,10,13,-11,-11,29,5,21,12),
	    161 => w(-9,86,-2,-1,-26,-5,1,-10,1),
	    162 => w(-11,-32,-11,3,-4,3,1,10,2),
	    163 => w(-8,5,6,45,2,-4,-8,-4,4),
	    164 => w(-2,35,-1,8,-22,9,1,-1,1),
	    165 => w(0,-1,1,17,4,1,2,1,1),
	    166 => w(-6,-9,-6,-10,-18,-13,0,-10,0),
	    167 => w(7,5,7,5,29,7,4,5,3),
	    168 => w(7,1,-5,12,-20,-9,11,5,1),
	    169 => w(-10,13,19,-15,-16,15,-1,-14,-16),
	    170 => w(3,5,0,16,-22,-9,3,2,-2),
	    171 => w(14,5,2,3,34,1,0,1,10),
	    172 => w(-12,-16,-12,-15,6,-14,-13,-15,-13),
	    173 => w(3,2,4,2,32,6,3,6,3),
	    174 => w(2,-5,0,-12,34,1,0,-5,0),
	    175 => w(-6,-10,-6,-6,-7,-6,-7,-4,-5),
	    176 => w(9,8,-1,0,35,1,-1,4,10),
	    177 => w(-7,-9,-7,-2,-7,-3,-14,-9,-11),
	    178 => w(-3,7,23,-2,-1,6,3,0,-2),
	    179 => w(10,4,6,-33,93,-31,9,6,1),
	    180 => w(-3,1,-4,6,-9,-36,-6,-6,-12),
	    181 => w(-3,-9,-4,-14,74,-1,-3,-4,-4),
	    182 => w(10,6,2,18,-29,-12,10,3,3),
	    183 => w(2,-11,-1,-11,60,-3,0,-4,0),
	    184 => w(1,-2,1,-2,39,0,7,2,6),
	    185 => w(8,2,-22,-7,20,35,4,-2,12),
	    186 => w(6,37,6,-3,39,11,3,-13,-1),
	    187 => w(2,7,11,-26,74,-14,-8,10,3),
	    188 => w(5,6,4,3,26,5,4,2,3),
	    189 => w(-7,-6,-8,-26,-15,-27,-10,-5,-11),
	    190 => w(9,4,14,8,3,8,8,4,13),
	    191 => w(3,-7,1,-3,37,3,2,8,3),
	    192 => w(0,-4,-1,-1,27,1,3,4,4),
	    193 => w(13,-7,2,36,-4,-7,7,-4,-1),
	    194 => w(-4,1,-5,-10,-10,-13,-12,-14,-10),
	    195 => w(-5,-8,1,-4,38,16,3,4,5),
	    196 => w(5,1,3,4,36,7,5,8,3),
	    197 => w(-8,-27,-9,-9,-15,-9,-10,-15,-12),
	    198 => w(3,-8,3,15,76,3,13,-1,11),
	    199 => w(-2,-1,-3,1,-6,2,-9,-27,-10),
	    200 => w(-6,11,-1,-3,7,3,-13,-24,-8),
	    201 => w(1,-10,-1,-22,48,2,-4,-15,-4),
	    202 => w(-6,4,-5,-4,-28,-4,15,32,15),
	    203 => w(1,-10,1,-14,77,-7,2,-10,1),
	    204 => w(3,0,1,-1,34,3,4,4,3),
	    205 => w(2,-1,1,-2,35,-1,3,-1,2),
	    206 => w(2,-15,-1,-16,65,-9,-1,-10,-4),
	    207 => w(14,31,6,35,15,-31,5,-41,-13),
	    208 => w(4,-9,1,31,23,-11,-8,17,1),
	    209 => w(-3,4,-5,-4,-2,-5,-8,-18,-10),
	    210 => w(13,-24,7,31,-60,18,12,-18,6),
	    211 => w(2,4,5,15,30,9,11,-1,4),
	    212 => w(-8,-6,-8,-6,-17,-9,-9,-10,-10),
	    213 => w(-6,-6,-7,-5,-3,-5,-7,-4,-6),
	    214 => w(2,-1,1,-2,30,-1,1,1,1),
	    215 => w(18,7,16,0,42,22,23,9,9),
	    216 => w(13,17,0,20,-2,0,8,-3,-2),
	    217 => w(4,-5,1,-4,28,5,3,6,6),
	    218 => w(5,-36,3,-12,107,-6,0,-34,-2),
	    219 => w(2,1,4,-2,-20,-3,-8,43,-5),
	    220 => w(10,0,4,8,33,12,2,1,8),
	    221 => w(25,13,-6,2,26,4,2,-7,0),
	    222 => w(9,28,12,-13,-46,-17,7,11,8),
	    223 => w(-4,-9,0,21,-1,-8,12,10,-6),
	    224 => w(-6,-10,-8,-9,-9,-11,-9,-9,-10),
	    225 => w(-2,-12,-4,-27,33,5,-4,21,3),
	    226 => w(7,5,4,3,26,4,8,13,5),
	    227 => w(3,2,3,4,30,6,1,4,1),
	    228 => w(12,7,10,4,36,9,11,7,10),
	    229 => w(-4,-4,-6,-6,-47,-10,-2,-15,-3),
	    230 => w(10,-13,-9,20,-31,-9,9,15,11),
	    231 => w(13,6,13,-11,63,-16,5,8,8),
	    232 => w(-13,-9,-8,-19,-6,-11,-7,-12,-6),
	    233 => w(-4,-5,-5,-7,-5,-7,-6,-8,-5),
	    234 => w(1,2,2,0,28,2,2,0,1),
	    235 => w(-12,17,34,-13,-36,8,8,-6,-15),
	    236 => w(2,16,-25,-1,65,-29,-2,13,-1),
	    237 => w(5,49,4,6,11,8,10,2,12),
	    238 => w(4,3,3,-1,56,1,9,14,6),
	    239 => w(-5,1,0,2,5,-5,-3,-17,-14),
	    240 => w(2,-28,0,-6,38,-5,0,12,0),
	    241 => w(-7,-2,-1,-2,-11,0,7,13,22),
	    242 => w(2,3,2,0,27,1,2,1,2),
	    243 => w(8,-5,0,-5,63,-4,1,-10,1),
	    244 => w(4,-4,-6,11,-9,-3,12,7,1),
	    245 => w(2,10,2,3,28,3,4,-3,3),
	    246 => w(3,-10,2,-14,60,3,3,4,6),
	    247 => w(8,26,9,-2,7,0,6,4,6),
	    248 => w(-3,-6,-1,3,38,-13,4,2,-7),
	    249 => w(4,2,2,1,37,7,4,3,1),
	    250 => w(-4,-6,-5,-3,-8,-3,-4,-5,-4),
	    251 => w(-1,7,10,15,33,0,6,1,5),
	    252 => w(5,-7,-3,17,-23,-6,13,11,7),
	    253 => w(0,-10,-2,-11,58,-5,0,-2,-2),
	    254 => w(3,-9,2,3,26,6,4,25,4),
	    255 => w(-4,-6,-12,3,-11,-4,2,6,-1)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;