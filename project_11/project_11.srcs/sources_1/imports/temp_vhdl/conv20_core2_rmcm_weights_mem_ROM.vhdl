library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv20_core2_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv20_core2_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv20_core2_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-3,-11,0,6,-32,8,9,18,8),
	    1 => w(17,17,16,3,-23,4,0,-7,1),
	    2 => w(-12,3,-1,-13,5,3,-9,1,-2),
	    3 => w(0,2,-2,0,32,-1,0,-2,-1),
	    4 => w(2,1,2,2,30,2,0,3,-1),
	    5 => w(-1,-5,0,-3,-11,-3,-3,-5,-3),
	    6 => w(-8,-6,-6,-5,-5,-3,-2,0,-2),
	    7 => w(-11,-7,-9,-7,-1,-6,-11,-7,-9),
	    8 => w(-1,3,-2,1,30,-1,-1,2,-1),
	    9 => w(1,10,-1,5,30,4,2,-3,1),
	    10 => w(22,1,2,10,-3,-3,14,-1,3),
	    11 => w(10,-5,-2,19,7,-13,7,-5,-2),
	    12 => w(3,9,1,-4,-13,-1,-12,-19,-11),
	    13 => w(-15,-9,-12,-6,-1,-7,-11,-5,-10),
	    14 => w(-2,13,-2,12,21,10,0,9,-2),
	    15 => w(-9,-8,-9,0,-8,1,5,12,4),
	    16 => w(-1,4,-1,-2,39,-4,-3,-7,-3),
	    17 => w(9,-83,12,32,-20,32,18,39,17),
	    18 => w(-8,-8,-6,-9,-10,-8,-7,-6,-6),
	    19 => w(0,-11,0,-7,-11,-6,-2,-6,0),
	    20 => w(8,11,6,10,25,7,5,3,4),
	    21 => w(-15,24,5,0,20,-2,-12,20,6),
	    22 => w(9,32,8,-6,7,-6,-14,-33,-12),
	    23 => w(-16,0,15,-20,7,18,-21,-3,11),
	    24 => w(22,-5,21,28,15,28,-7,32,-13),
	    25 => w(17,20,16,8,40,-1,-21,0,-17),
	    26 => w(7,25,4,0,2,0,-6,-16,-4),
	    27 => w(-19,-7,-19,-6,-9,-6,-3,-12,0),
	    28 => w(-14,-8,-9,-5,-15,-6,-9,-6,-6),
	    29 => w(-9,-7,-8,-8,-11,-5,-3,-8,-2),
	    30 => w(1,-7,2,35,2,-7,10,19,-1),
	    31 => w(-8,-1,-8,-7,0,-6,-7,-3,-6),
	    32 => w(-3,7,-3,-4,9,-3,-15,-14,-14),
	    33 => w(9,16,6,8,29,4,9,3,10),
	    34 => w(11,0,4,20,9,0,4,1,-1),
	    35 => w(-13,-14,-12,4,-24,3,14,18,13),
	    36 => w(13,-39,13,31,-14,31,15,48,11),
	    37 => w(30,33,26,16,47,14,-3,7,0),
	    38 => w(23,30,21,16,43,2,-22,-21,-18),
	    39 => w(1,-16,2,-16,14,38,-4,22,10),
	    40 => w(7,-6,7,4,12,4,6,18,5),
	    41 => w(-20,-27,-18,6,-16,7,22,24,19),
	    42 => w(-7,-4,-6,-1,-7,-3,-7,-1,-6),
	    43 => w(-7,-5,-6,-5,-6,-4,-9,-6,-8),
	    44 => w(1,12,-1,3,35,0,0,-2,0),
	    45 => w(3,6,0,6,37,4,3,3,2),
	    46 => w(4,4,2,2,29,0,3,2,3),
	    47 => w(-7,-14,-5,-3,-8,-4,18,17,15),
	    48 => w(13,8,12,4,-32,5,4,-8,2),
	    49 => w(3,-10,2,3,-29,4,11,18,9),
	    50 => w(6,9,6,6,8,7,8,7,6),
	    51 => w(3,2,4,-8,-108,-2,4,-7,3),
	    52 => w(7,-3,5,6,40,2,7,4,5),
	    53 => w(-2,10,-3,-6,53,-9,-3,-13,-2),
	    54 => w(12,7,2,25,0,-12,9,10,5),
	    55 => w(-5,-4,-5,-6,69,-6,-3,2,-4),
	    56 => w(20,24,19,24,26,18,13,18,12),
	    57 => w(17,-5,-8,9,-6,-7,12,-2,-6),
	    58 => w(-8,-7,-8,-5,61,-7,-3,-3,-3),
	    59 => w(-4,-15,-3,-1,-15,-1,6,13,6),
	    60 => w(6,15,5,6,3,5,-7,-25,-5),
	    61 => w(1,20,3,31,11,-6,7,-3,0),
	    62 => w(7,14,6,6,15,5,1,0,0),
	    63 => w(11,26,9,7,10,5,8,-5,9),
	    64 => w(1,1,-1,12,21,12,5,-3,3),
	    65 => w(9,16,12,-12,7,7,7,8,6),
	    66 => w(2,12,2,12,21,10,0,8,0),
	    67 => w(6,16,4,-13,-15,-12,-22,-9,-18),
	    68 => w(-13,-28,-12,-7,11,-5,5,33,5),
	    69 => w(-5,-9,-5,-7,-8,-5,-3,-6,-3),
	    70 => w(0,6,-1,6,34,4,2,0,1),
	    71 => w(-1,-7,2,-11,-19,-10,-14,-12,-11),
	    72 => w(-3,7,-4,-8,46,-10,-9,-19,-8),
	    73 => w(-1,4,-3,3,32,1,-2,1,-3),
	    74 => w(4,7,3,5,16,4,0,4,0),
	    75 => w(-3,-13,0,-10,-41,-7,-12,1,-12),
	    76 => w(2,3,2,5,29,4,3,-3,3),
	    77 => w(0,4,0,1,32,0,0,-1,-1),
	    78 => w(5,7,4,8,26,4,3,6,3),
	    79 => w(3,21,1,2,23,2,-4,-13,-4),
	    80 => w(-8,-5,-8,-12,-5,-12,-9,-11,-8),
	    81 => w(0,16,-2,8,25,7,1,-1,-1),
	    82 => w(13,20,13,29,22,23,-9,24,-16),
	    83 => w(-12,-6,-11,-5,-1,-6,-14,1,-13),
	    84 => w(-3,-1,-3,-9,6,-8,-17,-13,-15),
	    85 => w(3,2,8,-2,2,18,4,0,5),
	    86 => w(4,4,4,7,34,3,3,-1,4),
	    87 => w(-7,-2,10,-4,-13,25,-7,0,6),
	    88 => w(-12,-13,-10,-9,-11,-8,-12,-7,-10),
	    89 => w(-6,-5,-7,-3,66,-4,-2,4,-2),
	    90 => w(13,-3,11,13,13,14,0,4,-3),
	    91 => w(2,8,1,2,23,0,1,-5,1),
	    92 => w(-6,-7,-6,-5,-7,-6,-4,-3,-3),
	    93 => w(2,12,3,7,35,3,7,-5,7),
	    94 => w(2,-1,0,2,30,2,1,3,-1),
	    95 => w(1,3,0,3,43,-2,2,0,2),
	    96 => w(1,1,3,1,92,2,6,1,5),
	    97 => w(-9,-13,-7,-3,-25,-3,-2,-4,-1),
	    98 => w(-2,2,9,-9,-12,15,-3,1,6),
	    99 => w(-1,9,-2,-4,47,-6,-4,-18,-3),
	    100 => w(-2,0,11,-7,-21,9,-5,-4,9),
	    101 => w(-6,-8,-4,-8,-7,-8,-5,-6,-3),
	    102 => w(-1,3,-1,5,32,2,2,8,0),
	    103 => w(-8,-3,-28,2,2,-1,0,5,-3),
	    104 => w(-4,-6,-5,-8,-4,-7,-22,-3,-22),
	    105 => w(-8,-9,-7,-12,-9,-13,-12,-8,-13),
	    106 => w(4,6,3,4,33,1,-2,-7,-2),
	    107 => w(17,4,13,18,38,11,4,-2,7),
	    108 => w(-8,-6,-8,-9,-4,-7,-7,-9,-6),
	    109 => w(-7,-4,-6,-7,-10,-6,-3,-8,-2),
	    110 => w(6,22,18,16,0,-38,19,23,-1),
	    111 => w(32,19,33,7,-69,14,14,-5,21),
	    112 => w(-6,-5,-6,-7,-10,-5,-7,-5,-6),
	    113 => w(-4,-1,-3,-6,36,-7,-5,-15,-4),
	    114 => w(6,-4,7,3,-10,3,9,14,10),
	    115 => w(-2,-7,-1,5,26,2,5,15,2),
	    116 => w(-7,-28,-4,0,-3,0,7,25,5),
	    117 => w(-2,1,-3,-2,73,-6,-3,-9,-4),
	    118 => w(-15,-13,-14,8,-1,6,11,23,10),
	    119 => w(-3,-6,-1,-4,-2,-6,11,29,10),
	    120 => w(20,44,15,18,-6,19,-6,-17,-5),
	    121 => w(-10,-25,-9,-5,-10,-4,-2,6,-2),
	    122 => w(-12,-21,-9,-2,44,-4,0,13,1),
	    123 => w(-7,-8,-8,-9,-9,-8,-7,-5,-7),
	    124 => w(-7,-6,-6,-5,-7,-5,-4,-3,-3),
	    125 => w(-15,4,24,-15,-24,30,-14,8,20),
	    126 => w(2,9,0,7,31,7,6,7,4),
	    127 => w(-2,-7,-3,-1,43,-3,-2,1,-3),
	    128 => w(9,12,9,12,17,8,9,7,11),
	    129 => w(-1,18,5,19,20,9,16,7,17),
	    130 => w(4,10,1,5,23,6,4,5,1),
	    131 => w(10,15,11,6,24,4,6,-6,7),
	    132 => w(1,18,22,-45,9,31,4,19,15),
	    133 => w(-12,-14,-12,-2,16,-3,1,12,1),
	    134 => w(-11,1,9,-14,8,13,-6,2,9),
	    135 => w(3,-4,3,7,-91,9,6,20,5),
	    136 => w(-8,-15,-7,-10,-12,-6,-5,-9,-6),
	    137 => w(-17,-5,-13,-9,5,-9,-12,-12,-10),
	    138 => w(0,14,-1,-4,19,-4,-10,-17,-9),
	    139 => w(14,20,11,-2,-11,0,0,-21,0),
	    140 => w(-18,-3,-34,-1,-1,10,-12,-8,-31),
	    141 => w(2,-12,3,5,-22,6,10,19,9),
	    142 => w(4,8,3,3,33,-1,4,-2,4),
	    143 => w(16,3,-7,16,-3,-11,1,-7,-4),
	    144 => w(-11,-7,-10,-7,-14,-5,-4,-3,-3),
	    145 => w(-9,-9,-8,-8,-7,-7,-9,-2,-7),
	    146 => w(-5,10,18,-8,-5,14,-3,-10,-5),
	    147 => w(-12,-5,-10,-6,-8,-4,-11,-5,-11),
	    148 => w(-9,-8,-7,-7,-9,-6,-11,-7,-10),
	    149 => w(-7,-10,21,-39,8,36,2,-13,14),
	    150 => w(-1,29,-4,14,11,12,7,-19,6),
	    151 => w(-13,-20,-11,-12,-11,-12,-3,-16,-2),
	    152 => w(19,66,22,39,-45,35,39,3,38),
	    153 => w(-4,4,-3,0,3,-1,-9,-11,-9),
	    154 => w(-5,-7,-5,-6,-8,-5,-6,-5,-4),
	    155 => w(3,9,2,7,20,6,3,1,3),
	    156 => w(-8,-13,-8,-11,-13,-10,-7,-11,-6),
	    157 => w(6,-4,5,11,30,10,8,-19,6),
	    158 => w(14,5,12,10,3,10,3,-5,1),
	    159 => w(-19,-6,-18,-6,-2,-6,-15,-4,-15),
	    160 => w(-3,0,-3,-6,-1,-6,-4,-10,-3),
	    161 => w(2,0,10,6,6,19,-1,-2,6),
	    162 => w(-11,-7,-10,-3,15,-4,-11,-6,-10),
	    163 => w(0,-6,0,-4,49,-4,0,-7,-1),
	    164 => w(3,42,3,-6,7,-8,2,-3,4),
	    165 => w(-9,-11,-8,-8,-20,-7,-10,0,-9),
	    166 => w(7,6,4,2,39,1,8,0,6),
	    167 => w(-2,-5,-1,-4,-16,-2,-1,-2,0),
	    168 => w(-10,-6,-8,-7,-9,-6,-7,-7,-6),
	    169 => w(-12,-10,-11,-11,-8,-11,-9,-10,-9),
	    170 => w(5,-18,5,1,-26,1,-1,-10,0),
	    171 => w(3,9,3,2,32,0,1,0,2),
	    172 => w(-33,34,-28,-13,95,-15,-20,-27,-24),
	    173 => w(-14,-11,-12,-9,-14,-9,-14,-10,-11),
	    174 => w(-6,20,-7,-12,37,-12,-14,-25,-13),
	    175 => w(4,3,4,19,12,7,5,2,7),
	    176 => w(-5,-16,-4,-5,-16,-4,-2,-2,-1),
	    177 => w(5,9,-39,0,30,4,6,-2,2),
	    178 => w(-6,-7,-5,-6,-6,-6,-4,-8,-4),
	    179 => w(-3,-7,-2,-10,-12,-10,-7,-9,-5),
	    180 => w(2,-5,2,1,33,-1,5,6,4),
	    181 => w(0,-2,3,-6,-3,20,-1,-2,16),
	    182 => w(-4,-17,-4,-10,-9,-8,-9,-11,-9),
	    183 => w(4,19,1,4,24,3,2,-9,2),
	    184 => w(-5,-7,-5,-5,-13,-4,-3,-6,-2),
	    185 => w(4,31,1,22,26,19,9,-8,8),
	    186 => w(18,9,16,-4,-10,-3,-3,-6,-4),
	    187 => w(5,15,2,8,32,5,3,2,2),
	    188 => w(-3,-9,-4,0,-3,0,7,23,6),
	    189 => w(-5,-4,-4,-5,-6,-4,-3,-3,-4),
	    190 => w(-11,-1,-10,-1,1,-2,-10,-5,-8),
	    191 => w(22,16,10,11,-13,0,13,-2,-4),
	    192 => w(1,7,0,4,34,3,4,0,3),
	    193 => w(-12,-2,7,-23,14,30,-8,6,10),
	    194 => w(10,-6,10,4,41,0,8,3,8),
	    195 => w(9,17,7,6,26,5,3,-14,4),
	    196 => w(2,6,1,7,32,4,1,-1,1),
	    197 => w(-1,-2,-24,0,11,-4,11,0,-1),
	    198 => w(3,46,-15,-3,6,0,2,45,-17),
	    199 => w(6,12,2,8,33,8,9,8,6),
	    200 => w(4,5,2,2,37,0,3,-3,2),
	    201 => w(3,13,3,4,30,2,2,0,2),
	    202 => w(-8,-11,-7,-8,-7,-7,-5,-4,-4),
	    203 => w(7,28,6,13,23,12,12,13,12),
	    204 => w(14,35,12,8,22,8,2,-11,2),
	    205 => w(2,1,2,2,35,0,-1,1,0),
	    206 => w(-8,-25,-7,-1,9,0,-2,9,-2),
	    207 => w(-14,2,-14,2,3,2,-14,3,-13),
	    208 => w(-4,-9,-3,0,18,-1,3,16,1),
	    209 => w(20,7,-3,12,-12,-6,10,-6,-12),
	    210 => w(-7,-3,-7,-7,-6,-7,-5,-5,-4),
	    211 => w(-4,-7,-4,-6,46,-7,0,-1,-1),
	    212 => w(-4,-12,-5,-11,-10,-9,-5,-9,-6),
	    213 => w(-10,5,11,-19,-11,21,-4,6,7),
	    214 => w(-4,-9,-3,-3,-14,-3,-1,-13,1),
	    215 => w(-5,-6,-5,-5,-10,-4,-4,-3,-4),
	    216 => w(-20,-8,-17,-8,1,-9,-20,-6,-18),
	    217 => w(25,46,19,-3,-13,-3,9,-2,8),
	    218 => w(-11,-8,-9,-10,-10,-10,-12,-9,-10),
	    219 => w(5,-7,6,-2,-30,-1,2,-8,2),
	    220 => w(-7,-8,-5,-9,-8,-8,-5,-4,-5),
	    221 => w(2,1,2,1,32,0,2,0,1),
	    222 => w(-3,-22,-5,-14,-9,-11,7,37,6),
	    223 => w(6,16,4,11,38,11,7,10,4),
	    224 => w(18,-5,-2,12,-10,-4,11,-5,-1),
	    225 => w(5,19,3,6,-27,7,-2,-13,-1),
	    226 => w(7,-8,8,-3,-2,-5,21,12,20),
	    227 => w(8,20,2,-6,19,27,-1,-3,8),
	    228 => w(14,35,12,16,48,-12,-31,-31,-25),
	    229 => w(-6,-10,-4,-6,-8,-6,-5,-3,-4),
	    230 => w(1,-7,1,-7,19,-7,3,25,1),
	    231 => w(-29,-6,-15,7,7,0,-25,-6,-13),
	    232 => w(2,3,1,4,35,1,4,1,3),
	    233 => w(-13,-8,-12,-6,-6,-5,-9,-5,-8),
	    234 => w(6,5,4,7,33,7,4,7,2),
	    235 => w(-14,-4,-11,-5,-8,-5,-10,-6,-9),
	    236 => w(-4,-8,-4,-7,-11,-7,-7,-8,-5),
	    237 => w(-2,20,-4,8,21,6,-2,6,-2),
	    238 => w(-13,1,10,-16,4,11,-8,4,5),
	    239 => w(-10,-6,-11,-13,59,-12,-4,-16,-5),
	    240 => w(10,28,8,37,37,31,-2,34,-3),
	    241 => w(-21,-17,-19,-14,4,-12,-5,-3,-6),
	    242 => w(-4,-12,-3,-5,-46,-1,-6,-5,-6),
	    243 => w(11,5,13,8,24,5,14,0,15),
	    244 => w(-13,-9,-12,-9,-5,-7,-9,-6,-10),
	    245 => w(13,15,12,3,-27,2,-3,-9,-2),
	    246 => w(-2,0,-2,-7,-8,-6,-5,-10,-4),
	    247 => w(5,31,7,11,-15,8,1,2,1),
	    248 => w(-5,-3,-6,-4,-9,-2,-8,-8,-8),
	    249 => w(-8,-14,-7,-13,-10,-9,-11,-14,-10),
	    250 => w(8,34,5,0,-13,0,-16,-22,-13),
	    251 => w(-5,-6,-4,-9,-15,-8,0,-6,1),
	    252 => w(-9,2,37,-5,-1,11,-13,-18,-10),
	    253 => w(-5,1,-7,-7,-3,-6,-4,-15,-4),
	    254 => w(-5,-7,-6,-6,-5,-5,-8,-7,-8),
	    255 => w(10,31,8,7,21,3,2,-15,3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;