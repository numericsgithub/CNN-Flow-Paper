library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv16_core2_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv16_core2_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv16_core2_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(3,26,8,0,43,8,-8,-15,-13),
	    1 => w(10,17,10,9,40,8,5,9,6),
	    2 => w(-2,0,-5,-6,-6,1,-18,-9,0),
	    3 => w(8,-5,5,6,30,11,0,9,1),
	    4 => w(4,16,6,0,16,0,2,-3,1),
	    5 => w(-8,-12,-8,-26,6,3,-8,-9,-5),
	    6 => w(-2,-9,0,-4,-17,-4,-11,-7,-14),
	    7 => w(2,10,3,8,29,10,0,8,-2),
	    8 => w(-11,-32,-15,-5,39,-1,-1,6,0),
	    9 => w(-9,-10,-8,-12,26,-13,-5,-11,-6),
	    10 => w(5,6,5,3,30,6,4,6,3),
	    11 => w(13,9,12,1,31,33,13,7,4),
	    12 => w(-11,-4,-12,-6,4,-6,-10,-2,-11),
	    13 => w(-5,-22,-3,-16,-14,-15,-1,-15,-2),
	    14 => w(7,1,8,18,19,2,8,1,4),
	    15 => w(8,14,5,11,40,10,15,12,13),
	    16 => w(-10,-45,-12,-15,36,2,-3,12,6),
	    17 => w(1,23,6,3,34,7,-1,5,2),
	    18 => w(-7,-27,-4,0,-6,-2,-8,10,-7),
	    19 => w(-4,-6,4,0,41,-1,5,3,1),
	    20 => w(-23,-31,-19,14,25,8,8,12,6),
	    21 => w(-8,-2,-5,-18,-5,-1,-5,0,-7),
	    22 => w(1,-15,12,-29,-14,26,2,3,12),
	    23 => w(20,15,12,20,-16,-7,13,3,5),
	    24 => w(8,0,0,32,16,-2,-27,19,-1),
	    25 => w(-3,-12,-2,-7,-28,-8,0,-5,0),
	    26 => w(16,0,-7,29,-7,-3,2,1,-2),
	    27 => w(-9,-8,-10,-5,-4,-11,-11,-14,-20),
	    28 => w(-9,-6,-7,-8,-11,-11,-3,-6,-6),
	    29 => w(7,-7,1,26,-37,12,1,-15,0),
	    30 => w(3,4,3,0,24,3,2,0,2),
	    31 => w(9,54,18,-9,-11,-16,-2,-41,-5),
	    32 => w(2,-11,6,-6,-18,-2,-15,-10,-2),
	    33 => w(-1,1,0,-4,-11,-7,-4,-2,-4),
	    34 => w(5,10,5,4,30,8,6,4,4),
	    35 => w(-2,30,5,-13,19,26,-4,-20,3),
	    36 => w(-8,-8,-9,-7,-6,-6,-9,-6,-8),
	    37 => w(-1,-7,-3,-11,-14,-13,-1,-9,-3),
	    38 => w(-2,21,12,-13,-7,21,-9,-25,2),
	    39 => w(-9,-6,-7,-2,-13,-3,-7,-11,-7),
	    40 => w(-19,24,-12,12,37,9,6,43,4),
	    41 => w(-6,-1,-5,0,-11,-3,-3,-1,-3),
	    42 => w(4,23,3,3,3,1,3,-6,2),
	    43 => w(7,-6,7,6,22,5,5,18,8),
	    44 => w(9,17,10,2,-8,14,0,-2,7),
	    45 => w(-4,-25,-5,8,40,15,0,8,-1),
	    46 => w(3,2,2,2,31,4,2,3,1),
	    47 => w(17,-6,0,14,19,2,-4,16,7),
	    48 => w(4,-30,0,0,61,5,5,-5,4),
	    49 => w(19,-5,6,10,25,1,-6,15,20),
	    50 => w(3,19,6,3,-1,9,0,-1,0),
	    51 => w(1,-3,-5,23,-10,-11,2,1,-6),
	    52 => w(-21,-13,-20,-9,10,-8,-25,-8,-24),
	    53 => w(-5,-7,-4,-6,-11,2,-10,0,0),
	    54 => w(14,16,21,26,47,4,11,8,27),
	    55 => w(3,-2,2,-2,29,2,2,3,1),
	    56 => w(-21,11,5,30,25,-10,5,-4,3),
	    57 => w(-3,-6,-1,-9,26,10,-2,5,6),
	    58 => w(0,-16,-3,-11,67,-4,0,-4,-1),
	    59 => w(-4,-6,-3,-5,-8,-6,-7,-2,-6),
	    60 => w(8,4,6,1,37,4,4,8,2),
	    61 => w(0,-6,-1,-9,52,-6,0,-8,-2),
	    62 => w(4,36,5,1,-7,-2,0,-3,-1),
	    63 => w(-5,-10,-5,-4,-5,-4,-5,-4,-3),
	    64 => w(2,18,4,2,27,7,3,-7,2),
	    65 => w(-2,-5,-1,-11,-16,-9,-5,-12,-6),
	    66 => w(-15,110,-11,-9,2,-8,-4,2,-3),
	    67 => w(-8,-6,-9,-4,-17,-2,-7,-8,-8),
	    68 => w(14,2,7,1,20,15,10,4,8),
	    69 => w(-1,-5,11,-4,-17,55,-8,-8,-2),
	    70 => w(-19,-8,3,-5,-2,2,2,-2,-11),
	    71 => w(7,12,-7,-8,48,-18,7,11,-6),
	    72 => w(-4,-7,5,-4,-20,28,-5,-5,9),
	    73 => w(-6,-16,-6,-6,-15,-5,-5,-14,-4),
	    74 => w(3,-4,3,1,36,1,2,5,0),
	    75 => w(29,26,16,-3,-19,-17,3,-17,-15),
	    76 => w(3,28,6,-2,-1,-4,0,0,-1),
	    77 => w(6,-9,6,5,31,10,4,4,2),
	    78 => w(5,6,3,0,30,3,3,-3,2),
	    79 => w(7,-10,4,3,17,5,5,45,5),
	    80 => w(-6,-9,-7,-11,-15,-14,-3,-14,-4),
	    81 => w(6,25,4,25,0,-15,3,-24,-15),
	    82 => w(-12,-6,-12,-21,-11,-20,-11,-9,-15),
	    83 => w(21,46,26,6,60,14,-16,-8,-12),
	    84 => w(-1,-10,-2,-8,66,-7,-1,-7,-2),
	    85 => w(6,-10,-1,12,13,-4,7,11,3),
	    86 => w(1,-10,-1,-5,21,-2,0,5,1),
	    87 => w(-5,12,0,-16,41,3,1,-4,0),
	    88 => w(9,6,6,4,29,6,7,5,6),
	    89 => w(3,0,2,-1,33,0,2,0,1),
	    90 => w(2,-2,4,1,1,4,6,8,13),
	    91 => w(3,-5,2,-2,33,0,3,3,2),
	    92 => w(-1,-18,-3,-16,88,-14,3,-18,0),
	    93 => w(9,11,5,22,8,-1,1,-2,1),
	    94 => w(-5,32,14,-2,-12,-13,-1,-4,-3),
	    95 => w(6,-13,7,45,-77,30,6,-7,6),
	    96 => w(13,-38,-2,37,-73,19,11,-42,1),
	    97 => w(-2,-12,-1,-2,-3,-2,4,33,6),
	    98 => w(2,2,-12,5,10,-21,7,-3,-28),
	    99 => w(-6,-25,-5,-8,-21,-6,-5,-19,-5),
	    100 => w(5,-2,5,-4,6,-2,8,33,9),
	    101 => w(-14,-8,-13,-13,-14,-17,-14,-8,-17),
	    102 => w(2,2,2,9,-3,9,8,17,6),
	    103 => w(-22,-31,-26,-15,74,39,15,52,35),
	    104 => w(3,3,2,1,35,3,4,1,3),
	    105 => w(0,-3,-1,2,-45,-2,-1,-6,0),
	    106 => w(-3,25,7,-11,-21,20,-13,-9,11),
	    107 => w(7,8,7,33,24,1,1,4,6),
	    108 => w(-19,-4,20,-33,-10,42,-10,-6,16),
	    109 => w(9,2,1,3,37,6,6,0,7),
	    110 => w(7,20,7,6,-31,1,5,-7,0),
	    111 => w(1,-28,-3,-17,59,-15,-3,1,-4),
	    112 => w(-3,-2,12,-20,-7,38,-1,-5,5),
	    113 => w(1,-18,-2,-15,87,-8,0,-9,0),
	    114 => w(26,17,1,5,1,-7,-4,-34,-16),
	    115 => w(7,15,9,4,27,4,6,12,6),
	    116 => w(1,5,0,-2,36,-3,0,-5,0),
	    117 => w(6,0,12,6,22,16,4,5,7),
	    118 => w(1,-8,1,0,-15,1,1,52,1),
	    119 => w(1,-6,1,-4,43,5,1,6,4),
	    120 => w(-5,-10,-6,-15,-11,-3,-1,28,22),
	    121 => w(14,-64,7,-22,127,-19,7,-33,4),
	    122 => w(-3,7,6,-7,15,5,-4,-12,-6),
	    123 => w(3,-16,-1,-10,-50,-17,-3,-10,-5),
	    124 => w(8,-28,4,-24,77,-20,7,-20,2),
	    125 => w(0,-22,-1,19,-51,21,-4,-29,-4),
	    126 => w(8,-4,2,21,5,18,18,30,19),
	    127 => w(-8,-12,-6,-6,-10,-6,-6,-10,-9),
	    128 => w(-2,-21,-4,-15,53,-5,0,3,2),
	    129 => w(-2,4,-1,2,-7,-3,-6,-13,-8),
	    130 => w(-11,-16,-10,-3,-3,-3,9,28,10),
	    131 => w(-6,-15,-6,-5,-18,-9,33,28,-5),
	    132 => w(9,56,13,-2,-30,-5,-6,-9,-6),
	    133 => w(0,8,0,1,29,5,1,-5,0),
	    134 => w(5,1,5,10,11,15,6,1,4),
	    135 => w(8,2,-15,13,-4,-13,10,4,-19),
	    136 => w(-6,-20,-6,-7,-13,-6,-8,-16,-10),
	    137 => w(10,-3,11,62,23,58,8,4,13),
	    138 => w(4,2,2,0,29,3,3,2,2),
	    139 => w(-8,5,-7,-4,-8,-4,-7,-8,-8),
	    140 => w(-10,1,4,-39,6,40,-3,-1,11),
	    141 => w(-8,-19,-8,-1,-13,-3,-11,-6,-9),
	    142 => w(0,-2,0,-8,2,15,-3,-2,1),
	    143 => w(2,-12,2,0,-25,1,10,9,11),
	    144 => w(-6,-6,-16,11,-7,-4,-1,8,-1),
	    145 => w(-9,-7,-7,-3,-8,-4,-11,-9,-10),
	    146 => w(5,3,6,3,32,8,6,7,5),
	    147 => w(5,22,7,6,-9,5,4,-7,3),
	    148 => w(7,-11,-9,5,-11,-5,14,13,11),
	    149 => w(-3,8,12,-9,-30,22,-3,-4,9),
	    150 => w(-8,-18,-9,-3,-36,0,10,45,9),
	    151 => w(7,10,8,3,25,16,11,12,2),
	    152 => w(4,-6,-2,6,16,-7,7,7,7),
	    153 => w(-9,-10,-2,-18,40,2,-6,-6,4),
	    154 => w(-6,-7,-8,-5,-12,-7,0,5,0),
	    155 => w(-9,0,40,-10,5,8,-7,-8,0),
	    156 => w(1,3,-4,23,-6,-11,3,0,-6),
	    157 => w(10,19,9,28,-113,24,7,14,8),
	    158 => w(7,9,6,4,36,9,6,6,3),
	    159 => w(-16,-8,-11,-21,-15,-22,-16,0,-17),
	    160 => w(-1,13,0,-3,27,-2,7,0,7),
	    161 => w(-1,-5,3,-25,41,12,-6,-5,2),
	    162 => w(2,19,13,-3,19,42,4,20,9),
	    163 => w(1,8,7,11,41,0,9,4,-1),
	    164 => w(4,5,5,5,33,6,-7,2,-6),
	    165 => w(1,-1,0,1,39,0,-1,-15,-1),
	    166 => w(-8,11,-9,-21,15,-21,-7,10,-7),
	    167 => w(0,-2,0,-2,29,0,2,2,1),
	    168 => w(14,20,9,19,-17,7,10,1,6),
	    169 => w(-1,-1,-1,4,11,6,3,20,3),
	    170 => w(7,2,14,67,30,45,10,3,16),
	    171 => w(-2,-6,-7,-16,42,-17,-2,-9,-5),
	    172 => w(7,26,4,-1,2,1,4,-6,3),
	    173 => w(0,3,0,-10,3,55,-1,6,-1),
	    174 => w(6,6,9,20,15,4,6,10,4),
	    175 => w(5,-1,5,19,-4,4,3,0,2),
	    176 => w(-14,-14,-3,-15,-17,-8,-11,-11,-7),
	    177 => w(-11,-11,-10,-3,-5,-4,-8,-9,-7),
	    178 => w(-10,-17,-8,-5,-14,-4,-8,-8,-10),
	    179 => w(5,20,3,4,40,3,5,-4,4),
	    180 => w(7,-9,1,-32,-36,-23,-5,-9,-6),
	    181 => w(-6,-7,-14,-2,-9,0,-4,-15,-3),
	    182 => w(-9,-12,-11,-12,-9,-12,-11,-10,-13),
	    183 => w(-16,-9,12,-8,-20,-2,11,-7,-14),
	    184 => w(-6,-8,-8,-9,-8,-8,-8,-8,-9),
	    185 => w(-4,-5,-4,-13,-17,-12,0,20,-2),
	    186 => w(-1,22,23,-10,-10,7,0,-9,-8),
	    187 => w(-1,-12,-5,42,-2,-11,11,18,4),
	    188 => w(0,-4,-1,-4,36,0,1,-1,1),
	    189 => w(-3,-13,-6,-14,71,-12,-5,-11,-5),
	    190 => w(-11,1,17,-16,-48,33,2,26,17),
	    191 => w(-7,-5,-1,36,-7,-7,16,-7,2),
	    192 => w(1,-10,0,0,9,0,1,23,3),
	    193 => w(-11,-18,13,-19,-18,25,5,6,-6),
	    194 => w(-2,-4,1,-21,13,15,-6,0,2),
	    195 => w(5,6,4,4,32,5,5,6,3),
	    196 => w(2,-2,4,0,1,7,4,16,12),
	    197 => w(7,2,4,2,30,5,6,7,2),
	    198 => w(16,-44,10,8,43,7,8,22,7),
	    199 => w(5,11,5,3,25,2,2,1,2),
	    200 => w(-14,-7,-13,-3,-2,-3,-13,-2,-14),
	    201 => w(-4,-13,-5,-16,-38,-18,3,6,1),
	    202 => w(6,42,4,-3,3,-3,7,4,6),
	    203 => w(9,6,3,11,-17,-6,7,-4,-8),
	    204 => w(0,-13,-2,-12,32,2,-1,-1,0),
	    205 => w(-6,-6,-6,-11,-3,-8,-8,-10,-6),
	    206 => w(2,-9,0,-19,47,5,-2,-2,1),
	    207 => w(3,-11,2,1,29,2,2,13,2),
	    208 => w(-9,-17,-9,-3,-13,-4,-11,-11,-14),
	    209 => w(4,-32,2,5,96,3,-2,-46,0),
	    210 => w(-4,-15,-3,-25,98,-26,-3,-15,-5),
	    211 => w(-1,12,1,-6,29,-1,-3,-12,-4),
	    212 => w(-5,-3,-6,-5,-7,1,-9,-10,-6),
	    213 => w(3,-23,-2,-29,56,-25,1,-24,0),
	    214 => w(0,2,0,11,29,9,4,-1,6),
	    215 => w(2,2,3,19,22,1,6,1,6),
	    216 => w(11,24,8,4,4,5,5,-2,1),
	    217 => w(2,3,3,4,30,5,2,3,3),
	    218 => w(-4,-15,-1,2,-53,-7,-7,-10,-6),
	    219 => w(-1,-18,0,-17,-34,-18,1,-17,2),
	    220 => w(-2,-13,-3,-13,77,-5,-1,-5,-1),
	    221 => w(2,6,12,-15,47,-13,3,11,-1),
	    222 => w(-4,11,8,8,36,-2,8,0,1),
	    223 => w(6,8,4,9,9,9,7,16,5),
	    224 => w(0,-1,5,-3,-9,14,5,4,24),
	    225 => w(-15,-9,-12,-7,-2,-10,-16,-7,-15),
	    226 => w(-5,-15,-7,-2,-12,-3,-9,-7,-9),
	    227 => w(0,16,5,-4,38,3,2,-3,1),
	    228 => w(2,-5,1,-4,33,5,2,7,5),
	    229 => w(2,-3,0,0,30,4,2,2,0),
	    230 => w(1,-4,1,-5,35,5,1,4,5),
	    231 => w(8,0,7,14,27,13,1,-2,2),
	    232 => w(2,2,1,1,35,1,3,-2,1),
	    233 => w(-11,-6,-11,-30,-11,-24,-12,-5,-10),
	    234 => w(21,23,16,-11,-5,-7,-5,-6,-3),
	    235 => w(4,-19,2,-11,73,-9,1,-8,0),
	    236 => w(-9,1,3,-17,15,5,-18,-13,-4),
	    237 => w(10,-16,10,7,31,7,2,14,2),
	    238 => w(13,93,22,3,-128,-9,-11,15,-11),
	    239 => w(15,16,14,12,41,8,9,-9,11),
	    240 => w(-18,-13,-11,1,-7,-4,-6,1,-6),
	    241 => w(8,28,9,1,-17,1,-3,-9,-2),
	    242 => w(-3,-9,-4,-10,-20,-8,-2,-19,-2),
	    243 => w(0,-5,-4,14,37,-34,2,-2,-2),
	    244 => w(4,27,6,5,-26,2,3,-9,1),
	    245 => w(-16,-23,-18,-5,-7,-8,-7,-3,-7),
	    246 => w(-12,-9,3,-5,-20,17,5,9,4),
	    247 => w(4,-9,-4,12,-29,-2,6,13,7),
	    248 => w(-2,-23,-2,-2,-21,-4,-8,-11,-7),
	    249 => w(3,7,1,6,31,7,3,6,3),
	    250 => w(3,-18,0,-11,72,-7,0,-5,-2),
	    251 => w(-10,-39,-12,-33,31,1,-8,2,4),
	    252 => w(-8,-14,-7,0,-21,1,-4,0,-3),
	    253 => w(-3,23,-1,1,-13,0,-8,-14,-10),
	    254 => w(2,6,2,1,26,1,2,-4,1),
	    255 => w(4,4,3,3,34,7,5,6,4)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;