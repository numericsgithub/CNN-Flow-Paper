library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv14_core2_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv14_core2_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv14_core2_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-8,-2,-7,-3,0,-3,-6,-4,-7),
	    1 => w(-1,-2,0,-4,-6,-3,-1,-3,0),
	    2 => w(0,-5,5,-22,-11,34,-1,-8,4),
	    3 => w(0,0,0,1,22,-1,0,3,0),
	    4 => w(6,15,9,-3,5,-5,-4,-15,-3),
	    5 => w(-4,-7,-4,-9,-21,-8,10,39,6),
	    6 => w(2,-10,2,-10,-34,-5,0,-7,-1),
	    7 => w(0,-6,0,-4,-20,1,2,3,1),
	    8 => w(9,-8,-4,31,-9,-20,10,-7,-4),
	    9 => w(-17,-5,18,0,-73,-3,16,-1,-11),
	    10 => w(-1,0,-2,-1,30,-10,-3,-10,0),
	    11 => w(-5,-3,-6,-3,-1,-5,-6,-4,-5),
	    12 => w(8,28,7,-8,-12,-4,-6,-10,-3),
	    13 => w(-3,-5,-1,-4,41,-8,-3,-5,-2),
	    14 => w(-3,-4,-3,-6,-4,-5,-3,-4,-2),
	    15 => w(-5,-8,-2,-4,39,-7,-5,-7,-3),
	    16 => w(-1,-16,-1,5,35,1,-2,-6,0),
	    17 => w(-2,2,-1,1,28,-3,-1,-5,-2),
	    18 => w(-6,-4,-5,-5,1,-6,-7,-5,-7),
	    19 => w(-6,-6,-5,-5,-4,-5,-3,-5,-2),
	    20 => w(6,31,1,-3,-40,0,-1,-1,0),
	    21 => w(-3,-4,-2,-5,-10,-4,5,19,3),
	    22 => w(-6,-12,5,-13,20,12,7,11,-10),
	    23 => w(8,20,5,-2,-2,0,-8,-18,-6),
	    24 => w(-5,1,-6,1,41,-5,-5,-6,-4),
	    25 => w(-1,-4,-1,-3,-7,0,0,-1,0),
	    26 => w(1,7,0,6,10,4,-1,5,0),
	    27 => w(-3,0,-2,0,22,-2,-2,-1,-1),
	    28 => w(-5,5,1,-1,22,-2,-2,0,-7),
	    29 => w(-3,1,-2,1,23,-2,-2,-1,-2),
	    30 => w(0,2,-2,2,30,0,-1,-4,1),
	    31 => w(-9,-11,-8,-2,-6,-6,10,17,6),
	    32 => w(-3,-6,7,-26,-1,30,-2,-6,7),
	    33 => w(6,-9,4,63,-69,7,0,1,-1),
	    34 => w(-8,54,-11,2,-10,-1,8,-47,12),
	    35 => w(-1,-10,2,-7,-34,-4,8,44,2),
	    36 => w(27,14,-2,21,-32,-13,1,-16,-2),
	    37 => w(0,7,0,10,35,0,-2,3,2),
	    38 => w(4,-15,3,11,-47,-17,26,31,1),
	    39 => w(16,22,8,3,24,4,-20,-14,-10),
	    40 => w(0,-5,1,1,22,-2,0,0,0),
	    41 => w(-1,2,0,2,12,1,0,0,0),
	    42 => w(4,-3,11,6,23,-4,7,-1,11),
	    43 => w(-5,-13,1,-16,-25,14,4,10,28),
	    44 => w(-7,-7,-6,-5,41,-9,-6,-8,-3),
	    45 => w(0,8,2,-16,8,13,4,-8,-12),
	    46 => w(-5,-2,-5,-4,-3,0,-6,-1,-6),
	    47 => w(2,-9,-4,-5,-13,0,-7,-3,4),
	    48 => w(-2,-4,-1,-7,50,-10,-3,-25,-2),
	    49 => w(1,48,1,-2,-21,-8,0,-14,-1),
	    50 => w(9,20,-1,1,3,-10,-5,-17,-3),
	    51 => w(-3,-6,-3,-8,-3,-8,-3,-10,-2),
	    52 => w(0,-4,6,-18,-18,38,1,-11,2),
	    53 => w(21,6,5,24,-23,-20,7,-14,-5),
	    54 => w(-6,-12,4,-12,-21,7,10,15,20),
	    55 => w(13,-9,-9,37,-10,-17,-2,-8,2),
	    56 => w(9,0,-5,0,21,-13,-3,6,7),
	    57 => w(-3,-8,-3,-5,-3,-5,-4,-5,-2),
	    58 => w(-3,-7,-1,-8,-13,-2,-5,-4,-4),
	    59 => w(-2,-10,11,-13,-18,32,-2,-4,6),
	    60 => w(7,-2,-6,25,-3,-22,4,-2,-4),
	    61 => w(3,3,-1,14,-1,-2,3,3,1),
	    62 => w(10,16,8,-1,-28,-2,-4,1,-4),
	    63 => w(-1,1,1,1,8,0,0,1,-2),
	    64 => w(-9,-3,-7,-3,3,-4,-7,-4,-6),
	    65 => w(-9,-16,-8,-1,-19,-6,13,27,6),
	    66 => w(7,-1,-13,3,37,3,-11,2,4),
	    67 => w(7,29,4,-6,-13,-3,-3,-16,-1),
	    68 => w(-6,3,2,-23,32,0,-6,-3,5),
	    69 => w(-11,23,-6,-10,-7,19,0,-16,-3),
	    70 => w(11,38,9,-1,-38,-14,-9,-3,-2),
	    71 => w(0,-11,-10,-1,27,-1,-5,1,-2),
	    72 => w(0,-8,0,-1,39,-17,-3,-8,1),
	    73 => w(22,-15,-9,29,-18,-4,23,-17,-8),
	    74 => w(-3,-5,-2,-4,-6,-4,-2,-5,-1),
	    75 => w(-10,-9,-9,-8,52,-15,-12,-11,-9),
	    76 => w(-1,2,-1,3,19,0,0,1,-1),
	    77 => w(-2,3,-2,6,26,-1,-3,2,-3),
	    78 => w(9,-8,7,-17,-56,-9,5,-3,2),
	    79 => w(6,-1,-6,21,-3,-19,4,-1,-5),
	    80 => w(-1,-6,-4,-8,43,-9,-2,-11,0),
	    81 => w(-1,1,0,1,19,-2,-1,1,-1),
	    82 => w(-1,-12,5,-9,1,14,-6,4,8),
	    83 => w(8,21,8,-9,-12,-3,-6,-11,-4),
	    84 => w(7,-13,-2,34,-19,-21,15,-1,-3),
	    85 => w(6,52,6,-10,-35,-9,-4,-7,-4),
	    86 => w(-2,-12,5,-14,-28,13,6,22,14),
	    87 => w(-4,0,-1,25,-24,-5,11,1,0),
	    88 => w(4,7,2,11,28,9,-1,9,-1),
	    89 => w(8,28,6,-7,-9,-7,0,-19,0),
	    90 => w(-1,9,4,-3,22,-13,7,9,-5),
	    91 => w(-4,-4,6,-19,-3,26,-4,-2,4),
	    92 => w(2,10,1,0,12,0,-3,-18,-3),
	    93 => w(-5,-3,6,-21,3,22,-5,-4,5),
	    94 => w(-10,2,3,-15,22,3,-6,2,0),
	    95 => w(-2,1,-2,2,8,0,0,1,-1),
	    96 => w(0,-3,0,-3,-49,7,2,4,0),
	    97 => w(2,-23,4,-6,-12,-6,3,39,0),
	    98 => w(6,-6,-1,36,-12,-24,6,-7,0),
	    99 => w(4,-9,3,-10,-36,-9,3,-8,2),
	    100 => w(0,-7,2,0,-32,3,0,-2,-1),
	    101 => w(6,-3,-4,31,-5,-24,7,-3,-6),
	    102 => w(1,3,-2,-3,16,7,-1,4,5),
	    103 => w(10,20,10,-6,1,-8,-7,-19,-3),
	    104 => w(1,-11,9,-16,-38,53,-4,-12,12),
	    105 => w(3,-18,-5,-7,40,4,-2,-9,-3),
	    106 => w(0,3,0,3,9,1,0,2,0),
	    107 => w(-4,-4,-2,-3,-9,1,-1,2,-3),
	    108 => w(-7,-10,-7,-4,-8,-5,-5,-8,-5),
	    109 => w(1,3,0,4,11,2,0,3,1),
	    110 => w(0,-2,0,-2,31,-5,-1,-4,0),
	    111 => w(8,36,3,-9,-14,-4,0,-19,1),
	    112 => w(-3,-2,-3,-8,-6,-8,0,-4,-1),
	    113 => w(-4,-11,14,-15,-22,42,-3,-7,10),
	    114 => w(0,4,2,4,26,-7,-2,-21,-5),
	    115 => w(17,22,10,-8,-11,-10,-8,-10,-5),
	    116 => w(-1,26,-1,-15,3,-15,1,3,-1),
	    117 => w(-4,18,1,-9,-3,-1,0,-2,0),
	    118 => w(8,-6,-4,37,-11,-24,7,-4,-4),
	    119 => w(-2,-5,-1,-1,34,-6,-4,-1,-3),
	    120 => w(-2,-5,-2,-2,-7,0,-2,-4,-2),
	    121 => w(4,6,-10,-18,-32,-8,-1,10,7),
	    122 => w(44,6,-2,12,-44,-10,-1,-11,3),
	    123 => w(-5,-2,-5,-9,-4,-9,-2,-6,-2),
	    124 => w(2,5,2,7,25,2,1,0,2),
	    125 => w(3,-7,-3,1,43,-29,1,-2,-1),
	    126 => w(52,21,-70,-45,-24,61,-10,-7,18),
	    127 => w(-1,0,-1,-3,30,-4,-1,-3,0),
	    128 => w(-6,-11,-3,-17,-12,-12,10,45,7),
	    129 => w(-2,-9,-1,-8,-12,8,0,11,12),
	    130 => w(-2,8,-3,-7,21,1,-6,9,-1),
	    131 => w(-2,-1,5,-2,-35,38,-8,-7,13),
	    132 => w(-1,0,-1,0,29,-3,-1,-1,0),
	    133 => w(6,21,3,-4,1,-6,-2,-20,0),
	    134 => w(-6,-2,-6,-1,3,-1,-5,-2,-5),
	    135 => w(10,-17,2,73,-59,-12,12,-18,1),
	    136 => w(-1,-5,-1,-12,42,-10,-3,-8,1),
	    137 => w(20,5,-1,1,-8,-9,0,-4,-4),
	    138 => w(-1,6,4,9,24,5,2,3,-1),
	    139 => w(-10,-8,-10,-7,-2,-7,-7,-6,-7),
	    140 => w(-4,-7,8,-18,-7,29,-5,-8,6),
	    141 => w(0,0,0,4,28,-1,0,-1,0),
	    142 => w(1,-2,1,-2,-10,-2,-1,-2,-1),
	    143 => w(-4,-5,0,16,-2,-1,5,0,-3),
	    144 => w(7,31,4,-5,-9,-2,-3,-21,-2),
	    145 => w(-2,-25,-1,3,21,0,1,1,3),
	    146 => w(-1,-3,-1,2,28,-1,0,-2,1),
	    147 => w(2,14,3,14,0,-15,-9,-12,-4),
	    148 => w(-8,-1,-6,3,32,-4,-7,0,-5),
	    149 => w(3,3,1,5,14,1,2,2,2),
	    150 => w(-1,-8,-2,23,3,-7,4,-4,0),
	    151 => w(0,1,0,1,16,-1,0,0,0),
	    152 => w(-2,-7,-2,-8,37,-11,0,-8,0),
	    153 => w(-1,-13,-4,-8,-17,-1,-3,-8,-2),
	    154 => w(-1,-5,-1,-4,-8,-4,-1,-4,-1),
	    155 => w(0,0,0,10,28,4,1,-4,1),
	    156 => w(-4,1,-3,-4,37,-12,-4,-10,-1),
	    157 => w(0,42,1,-4,-26,-4,2,-13,2),
	    158 => w(0,-3,7,-10,-2,22,-4,-5,1),
	    159 => w(-2,-8,-3,-9,-34,-8,7,41,9),
	    160 => w(2,-4,-4,-9,-15,1,-2,5,2),
	    161 => w(8,9,7,5,32,-1,3,0,6),
	    162 => w(8,0,0,36,-11,-1,1,1,1),
	    163 => w(-2,0,-5,-3,39,-7,-5,-2,-3),
	    164 => w(7,-4,-2,30,-9,-21,5,-4,-3),
	    165 => w(5,3,-1,3,16,1,-2,2,3),
	    166 => w(-5,-6,0,0,-17,-15,33,11,-4),
	    167 => w(0,2,0,3,13,0,0,1,0),
	    168 => w(-6,-6,-5,-6,4,-7,-4,-5,-3),
	    169 => w(-2,7,-3,6,17,0,-2,1,-2),
	    170 => w(2,10,-3,4,22,4,-1,6,1),
	    171 => w(-3,-9,-2,-4,-12,1,-2,-6,-1),
	    172 => w(7,12,-1,6,6,-12,-4,-14,-8),
	    173 => w(9,9,6,2,26,4,3,2,-2),
	    174 => w(0,4,-1,1,18,-2,-1,-2,0),
	    175 => w(-2,2,-1,3,15,-2,-1,2,0),
	    176 => w(-2,-4,-2,-3,24,-5,-2,-2,-2),
	    177 => w(-3,-18,1,-11,-39,-11,11,56,7),
	    178 => w(6,-2,5,6,-34,9,4,6,4),
	    179 => w(10,37,6,-12,-15,-10,0,-19,2),
	    180 => w(-8,-4,-7,-4,3,-6,-7,-5,-7),
	    181 => w(-10,19,7,4,-32,-10,0,24,1),
	    182 => w(-2,-7,-2,-1,39,-4,-2,-3,-1),
	    183 => w(-5,-14,-4,-9,-14,-5,11,32,9),
	    184 => w(9,22,7,-3,-9,-1,-6,-16,-4),
	    185 => w(-4,-7,-4,-4,-20,-8,8,26,9),
	    186 => w(1,9,-1,-6,25,-6,-11,-22,-8),
	    187 => w(4,-6,5,-6,-36,-6,4,-5,5),
	    188 => w(3,-14,-6,0,55,2,-9,-8,1),
	    189 => w(-2,1,-1,4,19,0,-2,1,-2),
	    190 => w(-3,-17,5,-17,-36,13,6,19,31),
	    191 => w(-3,-8,-2,-10,-15,-8,-1,-7,0),
	    192 => w(8,26,6,-8,-7,-5,-4,-18,-1),
	    193 => w(1,9,4,8,20,3,2,-1,0),
	    194 => w(-4,-3,-2,-5,-6,-3,-3,-3,-2),
	    195 => w(0,0,-8,-2,24,-22,1,7,0),
	    196 => w(-1,-3,-1,-5,-5,-6,-3,-6,0),
	    197 => w(-2,-7,-1,-9,-15,-8,-1,-8,0),
	    198 => w(-3,-18,-2,-4,-3,-4,6,23,4),
	    199 => w(-7,-3,-5,-2,1,-4,-6,-3,-5),
	    200 => w(1,5,-2,5,16,0,-3,0,-3),
	    201 => w(0,1,0,2,18,0,0,0,0),
	    202 => w(-9,-8,2,-5,-9,0,1,-1,-1),
	    203 => w(-3,-13,12,-7,-28,39,-6,-10,15),
	    204 => w(-1,-4,1,-4,-11,0,2,3,2),
	    205 => w(-3,0,-1,1,20,-4,-2,-1,-1),
	    206 => w(-8,-14,-2,-3,5,7,1,5,13),
	    207 => w(2,4,4,5,21,2,6,5,5),
	    208 => w(-1,-2,1,34,-7,-23,1,-2,0),
	    209 => w(-1,-15,2,-15,-47,-10,-2,-8,-1),
	    210 => w(34,2,3,18,-30,-16,4,-19,-1),
	    211 => w(-4,-6,-4,-4,40,-4,-6,-4,-10),
	    212 => w(-2,-2,-2,-4,-4,-3,-2,-2,-2),
	    213 => w(11,30,9,-11,-11,-6,-3,-17,-3),
	    214 => w(-3,-6,-2,-4,35,-8,-3,-8,-1),
	    215 => w(-4,-11,1,0,-8,-4,-4,20,10),
	    216 => w(3,-16,-1,14,-7,-9,8,11,-3),
	    217 => w(0,3,0,3,12,1,0,1,-1),
	    218 => w(-6,-15,-6,-7,-5,-4,10,24,9),
	    219 => w(-3,-6,-5,-9,42,-12,-3,-3,-3),
	    220 => w(1,-4,8,-9,-12,0,9,1,13),
	    221 => w(8,-3,-5,25,-5,-21,6,-1,-4),
	    222 => w(15,29,9,-14,-19,-8,-7,-3,-6),
	    223 => w(-2,-6,0,-6,-8,-4,0,-4,-1),
	    224 => w(-3,-4,-6,-16,-21,-6,11,28,16),
	    225 => w(-4,-17,-2,-5,-1,-5,10,24,6),
	    226 => w(-2,-15,-4,1,1,-1,12,10,-1),
	    227 => w(-2,-2,0,-5,-13,3,0,0,1),
	    228 => w(1,3,1,1,17,0,0,0,0),
	    229 => w(1,5,-1,4,11,0,0,-2,1),
	    230 => w(1,-7,-3,-3,-6,0,-2,23,-2),
	    231 => w(3,-26,3,-10,-21,-7,5,51,2),
	    232 => w(-6,-5,-5,-6,-9,-2,-4,-4,-3),
	    233 => w(-7,-4,-6,-4,-5,-1,-6,-2,-6),
	    234 => w(11,-13,4,-7,32,-16,-18,18,-2),
	    235 => w(-7,-8,0,-11,3,11,1,0,13),
	    236 => w(-4,-10,-4,-10,-16,-1,10,27,8),
	    237 => w(3,3,2,10,16,-2,2,3,1),
	    238 => w(-1,1,-1,2,21,-1,-1,-1,0),
	    239 => w(14,52,13,-16,-33,-12,-3,-9,-5),
	    240 => w(-7,-9,-1,-10,-10,13,-1,2,19),
	    241 => w(-2,-1,-1,0,23,-2,-1,0,-1),
	    242 => w(0,-3,1,-12,-11,-10,0,-5,1),
	    243 => w(-5,-10,11,-14,-27,38,-2,-1,6),
	    244 => w(2,-3,0,33,-9,-23,3,-4,1),
	    245 => w(0,3,1,3,17,0,-1,3,-1),
	    246 => w(9,37,6,-12,-17,-6,-1,-19,1),
	    247 => w(-2,-3,6,-21,-1,26,-5,-6,6),
	    248 => w(1,2,1,4,17,-2,0,1,0),
	    249 => w(0,1,0,3,13,0,-1,-1,0),
	    250 => w(-6,-6,2,-12,-3,23,0,0,5),
	    251 => w(1,3,0,1,-52,6,0,1,-1),
	    252 => w(-4,-3,-3,-3,39,-8,-5,-7,-2),
	    253 => w(-5,-5,-4,-6,-12,-4,-4,-6,-2),
	    254 => w(0,4,-1,-2,20,-2,1,0,1),
	    255 => w(-4,-13,-6,5,-2,-13,10,16,5)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;