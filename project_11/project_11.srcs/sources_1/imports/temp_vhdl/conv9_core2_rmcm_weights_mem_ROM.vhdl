library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core2_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core2_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core2_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-37,4,-5,10,2,3,9,3,1,-4,2,16,-7,-38,0,-1,0,-2,0,6,-2,-1,4,2,-3,-2,4,1,2,-24,0,0,8,4,-6,-2,1,-6,-12,2,1,0,8,6,2,-5,-6,11,-4,-1,36,6,48,-2,-4,-2,-8,8,-29,4,-1,1,0,-20),
	    1 => w(-4,31,9,-2,-34,-1,-10,1,-10,2,-6,-3,7,34,-1,7,-3,-3,-10,-1,-3,4,1,2,-3,-3,-2,5,-2,-1,-12,1,-4,-8,-9,-3,6,6,20,2,2,-13,14,-5,-17,1,41,-1,6,-7,-5,-3,-2,-5,-2,-8,12,4,9,-13,1,-10,-6,7),
	    2 => w(1,14,-5,19,11,1,3,-8,7,4,-1,-2,0,1,5,-4,4,-3,-5,-3,-7,-1,-4,1,-4,-1,5,2,0,-2,3,18,5,34,-3,-17,6,-46,-3,5,7,-30,-5,8,-4,-1,-2,12,11,1,-3,14,-1,0,9,5,3,1,0,5,-17,0,-15,6),
	    3 => w(-23,4,11,-17,9,2,-1,-8,-15,-2,18,5,-9,3,-1,-5,-2,3,1,-3,5,5,-4,13,1,-2,-4,0,0,7,4,-6,1,2,11,-5,1,2,-25,1,-3,0,4,12,-4,1,3,-5,1,3,-1,2,-3,-13,3,0,-4,-7,-2,-4,2,-2,1,-14),
	    4 => w(8,-12,-24,9,-2,6,16,13,26,4,2,8,13,22,0,-3,-9,10,7,0,13,-2,-1,1,-7,26,6,-6,10,-33,-11,5,-11,4,-4,14,-5,9,17,-2,1,1,12,21,12,-1,-7,6,-21,3,-9,2,-4,-9,-9,-4,-10,1,-5,6,1,-9,13,-11),
	    5 => w(-3,48,-1,10,7,-4,-16,2,-8,-25,13,1,-3,-7,1,7,-3,5,-11,0,1,10,30,-7,6,-4,-3,5,-6,-1,10,-7,1,-3,-23,1,1,-15,31,2,3,6,-4,4,3,-1,3,5,-4,0,6,2,-3,11,-3,-2,7,-6,8,-25,-2,4,3,12),
	    6 => w(-5,1,-5,-24,-3,3,-1,3,-20,21,7,-3,-28,4,4,3,4,-12,-1,10,9,5,-9,-4,-10,-10,8,-51,0,-1,1,-16,-6,-33,24,-14,-3,-32,4,-4,1,-10,4,20,-8,-5,2,1,27,4,-3,18,2,-3,-16,-11,-7,5,-2,-3,14,-10,51,-3),
	    7 => w(-1,6,-33,-30,-2,-1,2,1,5,2,-6,4,0,-6,0,6,13,3,13,-1,6,-1,-7,-5,0,-1,4,4,-1,0,-33,-2,-10,-30,4,-1,3,2,-5,-7,-5,4,2,10,0,5,6,-9,-32,3,0,2,22,13,1,4,-13,-5,-8,-5,48,-19,4,-5),
	    8 => w(1,2,3,-5,-8,-4,6,-4,8,-45,-3,-9,-1,-9,2,6,10,11,-5,-8,-26,-1,12,-1,-4,1,3,8,-1,2,2,0,-9,1,2,4,-6,-6,-10,0,0,5,0,-5,-1,0,0,11,3,-1,12,10,4,6,3,-5,6,-20,-1,9,0,-8,-16,-10),
	    9 => w(0,1,-6,-6,-6,15,-12,-3,-14,-3,-7,2,-5,-4,-4,-6,2,-1,8,1,1,-12,-15,-6,2,-5,-6,2,32,8,0,2,0,2,24,-3,-4,2,3,0,4,4,5,8,3,0,11,2,10,-8,0,6,-6,-6,-2,10,0,6,-11,3,-7,9,5,-5),
	    10 => w(-3,2,-6,1,-20,-2,12,-4,30,-14,42,-1,3,3,3,3,-2,0,-4,6,3,3,7,2,-4,6,-8,9,3,-37,-16,20,-7,29,5,9,79,13,-1,-2,3,0,1,-25,-1,7,-5,5,2,34,-1,-17,11,7,1,-6,12,3,7,4,-36,-4,-1,4),
	    11 => w(-1,-8,-2,-10,17,1,18,61,19,7,4,4,-54,-3,-2,5,-1,-4,-3,16,-1,4,0,7,1,-4,-8,-4,1,-20,0,-9,7,0,-6,-3,-3,-4,-8,5,-3,-11,5,9,8,1,3,9,-2,18,0,8,-1,-10,-2,43,4,-2,2,0,8,4,7,-3),
	    12 => w(-1,2,10,-15,-11,0,-10,-19,-2,3,25,0,0,-7,-5,3,-15,7,6,2,-4,3,-3,12,-6,0,11,0,-25,3,17,8,3,-3,-2,1,2,16,12,-9,26,-6,2,8,3,6,16,-14,2,7,2,-2,0,78,-11,6,26,13,-3,-10,-3,0,4,-1),
	    13 => w(4,6,-1,5,5,0,-2,2,-4,1,-3,1,13,1,5,-1,0,-1,-2,-2,-3,-7,-12,1,-1,1,20,-14,11,1,-2,12,-7,10,-21,-6,-35,-28,0,0,2,-4,13,-8,1,6,6,-6,-7,24,18,8,-8,3,8,-14,-2,0,1,-3,1,20,7,19),
	    14 => w(-15,1,-5,0,-8,1,-4,-1,12,0,-3,17,-3,2,7,0,1,7,2,2,1,4,-21,10,9,-1,6,8,2,-4,7,-36,-9,-3,-2,-4,6,-10,-2,1,22,0,-2,-4,-5,-7,6,6,-3,-5,-5,-27,-5,26,-12,2,-6,-4,-8,-22,-1,0,-2,2),
	    15 => w(3,30,-3,-10,2,3,-5,-1,-3,-4,-1,7,5,9,4,-22,12,4,-15,-11,47,-1,-9,6,-1,7,8,-2,1,-10,1,9,-14,-5,-9,-1,4,9,13,-10,-14,-51,1,-11,-9,-1,-13,7,5,0,2,-17,2,-1,-13,4,28,2,-3,-1,0,15,-8,5),
	    16 => w(0,-1,-2,-10,-8,-1,0,-27,3,2,1,1,0,-6,-1,-6,-15,-3,2,-8,3,17,0,2,-9,0,0,2,2,1,-21,-2,3,-8,3,-5,16,18,-4,-2,20,0,-7,-19,-2,-1,-16,1,-1,29,3,4,0,21,1,-2,-18,5,2,1,1,-2,1,0),
	    17 => w(-1,1,10,-1,1,-27,-13,3,-1,-1,-6,1,9,2,3,2,4,2,-13,-2,1,-5,-6,-1,2,0,0,-4,-4,-3,-1,10,-1,6,-2,0,27,-12,-2,1,-5,1,-8,-1,1,11,-2,1,8,-2,-19,42,7,0,-10,2,2,-1,-4,1,1,8,25,-9),
	    18 => w(-3,-1,1,0,-7,-2,-4,-9,-18,-3,9,18,0,4,-1,2,0,0,1,0,0,-1,-23,-7,-3,1,-2,4,-1,-4,7,10,0,-2,0,0,3,5,0,5,3,0,0,2,5,-37,-1,-5,-1,-1,0,-12,2,-7,-3,-3,13,2,10,0,-4,-5,1,-2),
	    19 => w(2,6,1,1,-7,0,5,3,-9,0,2,4,8,-11,2,-26,-1,10,28,4,-3,3,-2,3,-1,-3,0,-1,-5,10,-1,-9,37,0,7,-1,-4,-11,-8,5,2,44,0,-2,-3,-1,1,-4,1,1,0,-10,1,4,-2,-7,2,-1,-8,-1,2,0,0,-3),
	    20 => w(-1,0,2,7,-1,-7,-12,-8,2,-3,-18,-9,-2,6,-5,-3,3,-11,3,-2,1,8,-2,-15,-9,0,5,-8,0,-1,1,-1,-2,-4,1,0,3,-4,-4,2,-2,2,-5,14,1,9,21,-4,1,1,-4,1,0,-9,-2,5,9,3,-2,-2,9,3,-1,-2),
	    21 => w(-7,1,0,-1,1,-9,-9,-4,-3,1,6,0,70,0,5,0,-1,4,-2,1,5,8,32,0,1,3,3,9,-8,-5,0,0,-4,-12,8,3,14,-23,-2,-1,-9,-4,0,-1,-2,1,-4,-4,-15,-5,3,-3,-2,8,-4,11,0,-1,-10,0,-10,9,-28,-11),
	    22 => w(0,2,-4,0,1,0,3,-9,-47,4,5,-2,0,-2,8,-1,1,-4,5,-2,-1,9,5,-5,-9,-2,5,-1,0,-2,-15,13,7,1,-1,1,6,-2,-1,-7,-8,1,0,-1,2,-2,1,-19,-2,-3,4,-8,1,0,-17,0,8,-1,13,0,2,2,-6,-15),
	    23 => w(-4,-6,-1,2,-22,2,5,1,0,-3,0,13,12,3,-4,7,-1,-1,2,-1,0,-4,0,-7,-2,-6,2,-1,9,-5,-1,8,-6,0,-10,-2,2,-3,-10,-4,1,-1,-2,-3,9,0,6,1,1,0,3,5,-2,-6,-4,0,-1,2,7,2,2,-5,14,-2),
	    24 => w(-6,-2,-1,29,-4,14,-1,27,-1,-5,-33,-2,4,-11,10,-1,-6,17,-4,17,-12,-6,2,6,24,-1,7,-5,-3,-2,-10,6,2,6,0,-6,-9,-3,-7,7,0,14,3,9,11,-7,-6,-22,-1,16,2,16,11,12,-14,8,-3,-4,-4,1,-3,9,0,-7),
	    25 => w(17,-21,-32,1,-3,2,17,-2,7,5,19,-4,-3,-7,-6,13,-5,-5,-16,4,4,-2,-14,-7,6,3,6,-10,14,8,-4,3,-6,18,-6,-3,-17,-1,-15,-6,16,3,15,-13,-2,-2,-23,1,3,-32,21,-74,16,4,-6,-9,-14,14,-1,-9,-2,12,9,17),
	    26 => w(2,6,1,9,10,1,4,-12,4,-10,-19,1,-1,3,16,12,13,4,-8,3,3,10,-3,-16,25,-6,4,-7,1,-9,-13,-20,5,-10,1,-10,2,-19,-5,30,4,4,-1,-9,-11,22,-14,-34,1,-1,-5,-1,1,9,-13,6,-17,-8,-5,-19,-2,8,-20,15),
	    27 => w(-12,-14,-7,1,-16,15,-9,-2,-6,-10,9,-10,-20,-10,-5,-8,2,-4,22,-12,18,3,-7,3,2,5,2,4,2,4,-5,-7,-56,6,15,-13,-8,20,-2,12,-27,-20,5,-3,-4,2,13,-1,2,0,-7,-14,4,4,2,12,2,1,-9,-7,-2,0,6,3),
	    28 => w(6,0,-42,9,1,4,19,-11,-2,12,0,9,8,-7,4,1,-3,5,-7,-1,6,-6,-2,-2,7,-6,3,0,10,-5,3,2,-32,8,-2,-12,-3,-6,-3,2,-2,1,-6,-1,1,-2,-3,-14,4,-4,6,5,12,-2,-3,-6,1,-3,-2,0,-3,-4,-1,4),
	    29 => w(-10,-34,5,9,-25,18,8,-3,33,2,4,0,-8,10,0,-8,-7,-1,7,2,-2,6,4,4,14,-7,-2,-2,-5,5,-1,11,1,-9,8,-3,2,1,4,2,2,50,13,-3,-12,-4,13,0,5,-1,5,-2,1,17,2,-6,-21,4,-14,-13,4,-6,16,3),
	    30 => w(2,3,5,1,-1,2,2,5,1,0,-3,-1,0,4,-11,-7,-7,1,1,2,1,2,-3,0,10,-1,-3,-5,2,5,7,11,-3,4,1,6,-4,-13,3,0,-8,-1,-4,-5,-1,7,2,9,1,-3,-3,-11,-8,-2,8,-2,-9,-3,-5,-2,4,7,-2,-5),
	    31 => w(-11,0,4,-6,-17,-4,-14,-1,25,0,5,-12,1,3,0,-2,3,2,5,-6,0,1,-4,11,-5,3,6,2,2,-8,6,9,-22,-7,30,5,-6,3,-2,-8,13,-3,4,-7,-10,2,0,-3,-3,2,2,-3,2,-34,3,4,5,3,-7,0,-5,-4,-11,4),
	    32 => w(-1,-7,1,-4,-7,-9,3,0,3,2,-1,1,-9,9,2,1,-4,-5,2,9,10,0,-1,2,-1,3,4,5,-6,9,-1,-7,2,-4,-2,5,-1,-5,-17,-1,5,-1,3,-9,-4,1,-1,-3,5,-1,-11,0,-21,-2,3,-1,6,-1,-13,5,1,-1,5,6),
	    33 => w(-8,8,-3,-1,6,4,6,1,0,2,1,25,2,-1,0,2,2,0,-1,1,-2,-2,-14,0,6,-1,-3,-2,1,-2,-19,-4,3,-12,0,-4,3,-4,-19,-9,-2,-25,-4,-3,21,5,-12,2,7,5,0,-3,-6,6,-1,3,3,1,2,2,4,-8,-1,-8),
	    34 => w(1,-9,5,1,-24,-3,3,-2,3,6,10,0,3,2,7,18,4,0,-1,2,9,-1,-2,5,0,-14,-3,-24,-3,2,3,10,-1,2,1,8,0,-7,-7,2,3,9,-8,18,-5,2,1,8,-16,4,0,7,-8,-1,9,5,3,4,-2,0,-8,-5,-26,3),
	    35 => w(-4,5,-8,6,1,-4,19,3,16,-2,-3,2,5,1,0,-1,5,-1,5,-5,-1,8,0,9,3,0,-1,2,1,-1,3,4,-9,5,6,-20,-1,1,-45,5,8,-1,-11,-5,1,-1,-3,4,6,3,1,0,9,37,1,7,2,-4,0,-4,-1,5,-3,3),
	    36 => w(-1,-1,2,7,1,3,44,38,4,-13,-67,-11,4,-9,-15,2,4,6,7,4,-9,-5,3,-1,-17,1,-5,8,9,2,-7,-4,9,-1,0,-7,-2,1,2,9,-5,-1,-13,35,-6,1,-8,12,-2,-1,7,10,7,-12,10,-8,-12,16,5,1,2,-1,-3,-5),
	    37 => w(7,-10,9,3,1,15,-4,1,4,6,17,-2,2,1,-5,1,8,27,-13,-6,4,-2,-3,4,2,-2,-8,35,-6,0,0,16,2,8,-5,11,-25,-36,-7,-2,4,-7,3,-6,1,1,-6,8,3,-35,37,98,6,-27,5,-10,5,5,18,-1,-12,5,-30,-3),
	    38 => w(-1,3,-1,6,-9,-7,0,-1,5,-5,-6,10,1,1,5,5,0,7,1,-1,11,14,7,5,-2,-3,2,-10,-10,-1,-8,-5,-4,-1,3,-5,2,-7,-7,-50,-10,6,1,-5,15,-9,-5,24,-7,-1,6,-20,4,0,-4,1,-1,0,15,4,-6,1,-13,-2),
	    39 => w(-5,-10,2,2,-50,-13,-1,0,-19,-5,4,-3,-4,7,2,-18,3,-17,-37,-1,-34,7,0,-4,5,-4,0,5,-3,2,7,-5,5,5,-9,-6,-10,7,-5,-10,-17,8,5,3,15,2,-1,7,4,-3,-1,14,2,-1,2,5,6,-1,-21,-3,5,9,14,1),
	    40 => w(29,-14,7,3,7,6,-10,3,24,-2,1,17,6,5,3,-2,-1,-5,2,5,-4,2,2,0,6,34,-8,-1,0,2,-3,-4,-10,7,5,6,4,-9,-29,-7,-3,-1,-4,-4,-4,-2,9,11,0,-2,-32,1,-32,0,6,5,-6,-10,-15,-11,1,4,9,-1),
	    41 => w(-15,-41,5,2,11,4,17,-2,5,4,17,14,2,-13,0,0,5,-1,-1,2,-4,3,-6,2,-2,-5,1,4,-2,25,-4,1,1,-2,-12,-5,12,11,-42,-3,3,5,7,-10,17,-1,4,-4,-2,-6,-4,0,-8,-4,0,-16,-20,-1,-9,5,0,27,11,-4),
	    42 => w(2,-7,-9,-6,21,-5,3,-7,7,-9,6,-1,1,-1,18,5,-5,2,0,9,34,-2,2,11,-12,-3,-10,-18,-5,-4,4,-23,5,-5,30,13,0,-24,4,-3,-1,19,-6,-18,8,0,7,-6,3,-9,6,-28,8,0,23,1,5,-2,1,5,7,-4,25,0),
	    43 => w(3,8,-5,7,-7,-3,-18,5,-6,-6,-15,2,8,0,-2,-4,15,0,0,-1,4,-8,4,5,8,-3,1,1,1,-6,-9,14,-9,-5,6,-9,8,-1,29,11,34,3,8,-9,-1,1,2,6,4,3,-11,0,29,19,0,3,16,5,9,-5,-13,27,3,3),
	    44 => w(-5,-2,-5,9,0,4,7,3,-3,-3,-7,-17,-4,3,-8,-2,-3,-9,-5,-4,-11,2,1,-3,2,0,-2,-4,-7,-3,-3,3,9,6,1,-4,1,-3,13,-10,1,-4,-12,-12,5,3,1,5,-1,-2,-2,-4,-5,-5,3,-1,-6,-10,-2,-8,1,-2,4,-4),
	    45 => w(-8,-1,-10,18,-5,7,-3,0,7,-3,3,-7,-10,-8,6,0,4,-5,-5,-2,2,-7,-2,0,1,2,-1,-6,-1,4,-1,-9,3,16,11,-2,-29,18,5,0,-7,-10,-29,-5,-4,1,-6,-10,-7,-6,-1,27,-7,36,2,7,-3,-2,-4,-4,0,-51,-26,-5),
	    46 => w(-1,-10,-8,2,20,1,9,-8,6,-1,-18,6,-2,0,17,0,1,4,1,-1,1,-7,-1,3,1,2,3,4,1,-10,-3,-9,-1,-7,3,-7,5,-14,0,-10,5,-6,4,4,-2,-3,1,4,-8,9,0,-1,-12,-6,9,2,22,4,-1,-6,17,2,-6,2),
	    47 => w(-1,2,0,-3,-10,3,2,5,0,5,0,7,-15,-9,-1,2,4,1,-3,-12,-4,9,1,3,-1,0,-5,-7,-1,2,-1,7,18,-3,11,2,-2,2,-32,-5,1,1,-4,0,-2,-4,-8,6,-5,3,-1,5,3,-6,-4,-5,-12,1,9,0,3,-2,1,-1),
	    48 => w(1,-1,-5,-34,7,-24,12,18,-1,-7,14,-13,-2,-1,21,-19,-24,-23,2,9,6,-6,-2,-14,9,4,-19,1,-6,-2,35,1,-2,-1,-3,-3,5,5,-6,-4,3,-8,-23,37,1,-10,11,-4,3,11,-3,4,2,18,-3,1,-29,23,-1,2,-5,-3,1,2),
	    49 => w(1,4,9,-9,0,1,-15,0,-6,-3,-1,0,-2,-1,4,2,-6,-11,3,-2,-11,8,-32,23,1,-2,11,-16,-6,1,-4,9,-8,-7,-3,-2,-29,-14,2,1,-12,-3,-7,-6,-1,-3,-1,1,-1,10,2,0,-2,21,11,-12,0,7,-9,2,28,36,-3,-3),
	    50 => w(18,6,-7,1,-1,6,0,2,-15,2,0,1,-3,1,15,0,0,-9,10,4,-1,31,-32,0,59,1,-6,7,2,0,29,-11,-9,4,1,3,3,-1,1,8,-7,3,0,-8,0,-57,7,11,-2,1,-4,-5,-7,-5,-18,1,9,-1,3,11,15,-1,-3,-10),
	    51 => w(-9,7,1,-7,-30,2,-2,0,-8,3,1,12,-7,60,4,-31,0,3,-28,-7,-23,-8,6,9,-1,-5,2,-2,-4,-3,-3,8,-3,-6,3,-1,-20,12,-7,4,5,-34,-1,-8,-5,1,-4,7,0,-7,7,-8,-2,-9,-4,4,-10,1,-6,3,2,28,-9,5),
	    52 => w(2,-1,-1,4,-1,-3,-8,-3,0,-5,2,29,8,7,2,7,-2,5,-4,-1,1,-1,-5,1,1,-3,2,-4,-7,-4,14,6,-6,-1,-2,-7,5,-2,16,-7,1,-5,10,6,0,0,-2,-12,2,-2,-1,-6,-6,9,4,21,5,12,-2,2,0,-5,2,8),
	    53 => w(2,15,12,-9,-3,3,-4,0,-9,-4,4,1,-10,-3,0,-3,-6,-5,11,-1,-1,-5,12,5,3,2,10,-2,0,-2,-4,-2,16,-7,-32,-8,-13,-10,-2,0,-2,21,9,-10,-3,2,5,-6,3,-1,-5,21,-2,78,3,15,2,-8,2,2,1,8,13,-7),
	    54 => w(1,6,2,1,-20,7,-9,9,-5,10,-12,5,-3,0,18,1,3,-8,1,-1,3,-3,-7,5,8,-1,-2,0,5,-6,6,55,-17,-6,-1,3,14,6,-4,9,-1,-3,0,10,-4,-15,6,7,4,3,-4,9,-9,3,30,-2,-4,1,-6,-4,59,3,-5,-5),
	    55 => w(0,10,0,1,-25,-1,-10,9,-3,-1,-3,8,-10,-3,2,-17,1,1,-22,-17,7,0,-2,-6,-2,3,5,-3,-1,1,0,26,8,-5,-1,5,-6,5,9,0,28,-12,-3,2,-5,-2,-2,2,-5,-4,4,-9,2,0,-3,7,-15,1,3,1,1,-9,-8,-2),
	    56 => w(8,-3,9,-12,6,-3,-6,37,-1,11,-21,-4,-7,1,5,-7,-10,-8,-2,46,3,-7,-1,0,5,0,9,-8,21,-1,-3,-10,-9,-1,1,-1,-22,3,8,28,3,2,19,25,1,0,7,3,-4,-1,-1,-8,-2,7,-1,-12,21,5,-1,6,-1,-3,3,3),
	    57 => w(-4,6,-63,7,-4,-7,11,0,-6,0,17,5,-3,-3,-3,-14,0,-10,16,3,-6,-2,0,0,-4,0,-3,-50,3,2,-3,7,6,14,33,2,-11,19,3,-5,1,-5,6,10,0,2,12,16,2,-9,22,99,-2,25,0,-17,1,0,-10,-8,-7,-39,-19,8),
	    58 => w(-6,-1,8,3,2,-9,2,7,-31,1,7,1,2,-5,-15,3,-4,-2,-1,-8,-9,-12,-11,-3,-8,-3,4,-8,-8,1,-5,-4,4,-2,-4,-6,-5,13,3,55,-6,-4,-2,5,-25,-5,14,-32,6,1,-1,5,9,-8,-3,2,83,5,4,-15,-8,-1,-4,0),
	    59 => w(-12,7,-2,8,18,10,22,-1,6,-1,1,9,1,2,-2,29,-1,7,31,-4,16,-9,1,-4,3,5,2,16,0,-11,4,10,-42,-1,16,-4,-9,8,5,6,23,-12,5,6,9,4,4,-8,-7,-8,3,-9,1,2,15,2,5,-1,18,-13,-14,-2,2,-3),
	    60 => w(6,4,-2,-6,-1,-3,-21,-10,2,-2,-4,21,2,0,-11,-2,2,-5,7,-2,5,-6,1,2,37,7,3,-5,16,3,-16,-6,-4,4,-1,4,-4,5,-1,3,13,-10,13,8,-13,12,5,18,-3,-9,10,5,7,45,18,-12,12,5,11,2,4,0,-12,2),
	    61 => w(-13,11,26,0,8,11,-3,3,2,3,-1,-5,-12,3,0,-1,2,10,1,-6,0,0,-3,-4,-3,-5,-18,21,4,9,16,11,5,-15,10,11,2,-35,1,2,1,-8,1,4,5,3,-3,9,-2,-1,4,-50,-2,-2,-8,-9,13,-10,-17,7,-8,-3,15,-10),
	    62 => w(-6,7,-8,3,-28,-7,-1,5,-11,9,-13,2,9,-1,-16,-2,-6,-3,0,9,3,4,-11,9,-24,4,-11,-7,-9,8,2,-5,2,10,4,5,7,-4,-2,-38,4,8,3,2,19,-18,9,-74,7,-4,9,-16,8,8,3,0,-44,2,10,-43,4,-10,-1,-10),
	    63 => w(1,7,9,-3,-12,-23,16,7,19,-2,-2,-14,-2,-31,5,31,-1,-5,7,5,65,2,3,1,8,-1,-5,2,1,-8,11,6,9,8,23,5,4,18,1,-10,12,-2,11,-7,11,2,-9,3,6,-14,3,-2,-1,1,1,20,-10,1,-15,2,8,-4,8,0)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;