library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core15_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core15_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core15_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-18,-7,-2,-2,-2,1,4,-4,-12,-1,4,19,2,2,1,6,-1,6,-2,-8,1,7,-1,3,2,-23,1,-4,4,13,8,0,4,5,-15,6,9,-8,-11,-3,-5,-11,14,4,11,4,-6,2,2,4,-1,22,9,5,1,25,4,-2,-1,4,4,0,7,0),
	    1 => w(17,1,14,6,1,3,2,16,15,29,-4,-7,4,-2,0,10,-8,-1,3,7,3,-19,3,0,4,1,-16,-8,-3,1,1,-23,-4,-2,5,-16,8,-12,-7,-6,5,15,-1,-16,10,3,-9,3,2,6,-12,-9,11,-3,-3,-6,4,-3,-3,1,-11,5,-3,-4),
	    2 => w(3,0,27,-4,-3,-11,-3,47,-21,5,8,-3,9,-21,-3,3,12,3,4,6,-17,-10,2,8,2,4,6,7,1,4,-6,0,-15,16,12,-14,-6,5,4,5,2,4,-6,6,28,9,-6,-1,2,6,3,2,6,-4,4,1,0,-3,6,6,-19,-2,-2,7),
	    3 => w(-1,-9,-1,-1,1,-3,-12,6,0,-4,12,0,-2,-12,6,7,-1,13,30,-1,3,3,0,1,14,-6,7,-1,0,-2,3,-10,-3,2,1,16,-9,-5,0,1,4,-13,3,11,3,-6,-5,0,5,16,4,4,-12,18,1,23,8,4,12,4,3,8,2,-4),
	    4 => w(-26,5,-10,6,3,-1,6,3,-1,-1,1,8,5,-1,1,-6,-2,1,0,-11,-5,12,-1,-4,8,-39,0,0,4,-15,-24,3,-4,-1,-1,14,-7,5,12,8,2,6,-17,6,2,-6,2,9,-2,8,-7,-5,-1,-2,0,-7,11,3,0,9,4,13,-26,-5),
	    5 => w(9,3,-4,7,10,-5,-20,11,-2,-2,2,4,-4,8,3,-6,-2,-25,1,-9,5,7,-1,3,1,0,-8,-3,4,10,-2,-7,-4,-7,-2,13,-10,5,3,-13,3,4,-39,0,0,1,4,1,-2,-5,12,-3,-22,-1,2,-2,-12,-4,8,11,-15,28,-2,-2),
	    6 => w(5,-1,0,3,0,-12,1,-22,28,6,-2,1,-4,15,-7,-1,-5,-10,8,13,-26,12,1,5,-2,2,-1,-22,-13,15,-8,-1,10,9,-4,-23,0,-2,-2,-9,-3,11,3,5,20,32,9,31,-10,5,-2,-5,-1,3,-6,3,8,3,0,-4,32,-2,1,-3),
	    7 => w(12,20,2,-7,2,-11,-14,-3,4,4,-11,-7,-1,-10,12,5,-6,-21,24,2,-21,8,-3,-10,2,1,-2,4,0,-9,-1,-10,-2,10,-8,-4,3,13,-17,5,1,-53,-3,-3,4,4,3,-7,-2,-7,-2,-2,10,-11,-2,1,-15,4,-14,-18,1,-10,4,-1),
	    8 => w(-15,-11,-6,3,9,0,2,-2,-6,-1,1,4,-4,2,-2,1,2,1,-5,-6,2,6,-4,-8,0,-12,-4,-4,-2,5,6,-3,6,-4,2,-4,-16,-4,-3,9,-4,1,4,4,8,14,-5,21,-6,-6,-7,13,-6,2,-12,-10,10,-14,3,-19,2,-25,-1,1),
	    9 => w(-10,5,7,-3,-19,-6,24,-15,5,1,-7,5,0,-6,-1,-1,-2,-8,-3,-13,-5,-1,2,-2,-2,1,-2,12,12,13,9,-1,-5,-3,2,13,-4,-6,2,-13,5,-9,-4,1,4,-3,-1,-3,2,1,-19,5,-18,-8,1,1,1,-3,-13,-3,0,6,-3,-1),
	    10 => w(12,0,10,-8,-5,-8,-10,2,5,3,3,5,-7,-7,-3,-2,14,-13,8,0,11,0,1,2,-1,-1,-6,-13,6,2,-16,-1,-18,8,-2,-28,8,4,6,1,-3,-3,-2,-3,9,9,3,16,0,1,-4,-5,1,-1,-3,-1,1,6,2,-1,15,-12,4,-8),
	    11 => w(3,-2,6,-6,2,-10,-24,1,5,0,-2,-5,-1,-11,10,4,7,-20,6,-6,0,5,0,-14,3,-1,5,10,1,-12,-2,0,19,3,-7,9,-7,10,15,-9,-4,33,15,15,-1,4,8,-7,0,-2,-6,-3,-16,-9,2,-14,15,-4,-1,-3,0,-7,0,-8),
	    12 => w(5,-8,-1,3,-9,2,5,-2,2,-3,3,2,2,3,4,7,-8,1,3,-1,3,1,-1,1,-7,-3,6,1,8,18,-5,3,3,9,-4,-1,7,1,-3,3,3,0,1,-2,8,-2,7,-12,-6,1,4,-8,2,4,14,0,-3,-3,-1,-4,7,4,9,1),
	    13 => w(-2,0,-5,1,-9,0,-7,11,-8,1,13,9,-2,-7,9,19,4,-5,6,-9,-2,-2,-1,-2,4,0,0,-13,3,-12,2,5,-4,19,0,7,15,2,-3,-17,9,7,4,5,-3,3,13,-1,4,-10,4,2,3,-6,9,19,-4,14,4,4,-19,0,7,1),
	    14 => w(-3,-2,6,2,-1,-3,-2,-2,-2,-7,-12,-7,0,-3,0,-2,-6,2,3,12,-12,-4,-5,8,-1,2,-13,-5,1,7,8,1,15,17,2,-2,2,0,-2,3,-9,7,-6,-8,6,2,-1,6,-19,2,6,13,-2,6,-1,2,3,9,-24,6,-8,-7,0,-5),
	    15 => w(12,5,3,1,1,2,-6,14,-4,4,12,-5,-6,-6,9,13,10,-3,4,9,-13,-5,10,-3,8,-4,1,11,-4,-3,-1,5,0,3,2,3,4,1,8,0,-5,-4,-3,-5,-7,9,2,-5,14,-4,-7,7,2,5,-1,-5,-12,2,3,7,-1,17,14,-2),
	    16 => w(-3,-1,-6,10,-13,0,1,8,3,-11,-4,-8,2,1,3,2,-2,1,-6,2,-2,9,-6,-7,-7,0,1,0,1,-1,-7,4,-5,1,-5,-2,6,1,7,-13,2,-11,1,5,-8,-10,-9,2,-13,0,1,0,-5,-2,-2,6,-8,-1,0,-2,2,-1,0,3),
	    17 => w(-6,-5,-1,-4,-2,-1,2,-5,3,-1,-3,-1,4,11,2,-3,-20,28,-6,3,13,7,0,-1,-2,-12,15,-1,1,3,13,1,0,-2,4,-1,0,-3,-9,-9,-8,-8,2,4,1,1,-4,0,3,27,-3,9,4,10,0,-4,-3,-15,6,-6,5,6,-1,3),
	    18 => w(10,1,1,10,3,10,-5,-5,-2,3,-4,-7,5,5,-2,1,-12,5,-1,13,4,8,-5,-12,2,-6,7,5,-1,-4,3,0,10,-5,11,3,0,6,2,-2,0,-5,0,-2,-1,16,-5,0,-3,-4,-4,10,5,-4,3,-1,0,7,-8,2,10,-3,4,4),
	    19 => w(-12,2,7,9,-3,-5,4,5,-3,1,-16,0,-1,15,5,0,-4,-10,2,-3,-5,-3,-1,3,2,-2,-1,-29,-1,3,3,-5,0,5,-4,5,3,-15,2,6,9,0,6,-1,0,-1,-1,5,-2,-3,-9,3,-5,1,-5,-21,8,-1,-7,-3,-3,-6,1,-3),
	    20 => w(1,-3,4,-16,4,-2,0,0,1,2,2,-2,0,2,-2,-5,8,-1,-3,2,7,0,-13,3,-6,2,-20,6,4,0,4,7,12,2,-7,0,0,52,-4,0,-5,-4,-6,9,2,1,-7,1,0,-3,-4,10,4,3,12,4,4,3,0,5,2,-5,-5,6),
	    21 => w(-26,7,3,-4,-5,-1,8,5,4,5,-3,0,12,-1,-8,-4,-6,1,48,6,0,-20,0,-20,8,7,-20,18,1,9,-5,12,16,4,-3,8,-2,-11,-6,-4,14,0,-4,-3,0,7,39,-1,1,-2,3,-2,2,-3,2,5,14,9,-9,-2,-6,4,9,-2),
	    22 => w(0,2,-1,3,-11,-11,-7,0,0,9,-13,-1,-9,4,3,-1,11,9,0,11,1,-4,-16,9,5,41,-34,-3,-1,6,0,1,-15,2,1,5,6,0,16,3,4,-16,31,-5,4,2,8,0,14,3,-12,0,7,2,13,23,-17,0,-8,9,5,5,1,0),
	    23 => w(-8,5,1,4,5,4,-7,7,10,-8,3,-5,1,-6,6,-1,8,-1,1,18,2,-7,27,-4,4,-3,6,-2,-5,-14,-10,-7,-4,-1,1,2,-4,6,24,-6,3,5,-1,-3,-8,-1,-2,4,8,6,-8,-2,1,1,-7,8,-31,-10,5,3,-2,-4,-3,-3),
	    24 => w(-3,2,8,14,8,1,-2,-1,0,10,2,-1,4,0,21,2,3,3,3,0,-2,-4,-7,5,-1,1,-8,6,-5,-7,2,6,-1,-1,4,-4,-3,21,1,-1,0,-16,3,1,-2,6,2,4,-2,-7,10,4,-36,4,9,7,6,1,28,-12,-3,-1,-4,8),
	    25 => w(-2,-2,2,-2,0,-1,-4,4,-11,-1,15,-20,3,-1,-45,12,-4,3,10,7,-1,28,-21,10,0,-14,-2,-11,5,-2,-4,11,4,2,19,2,7,-53,-3,8,0,1,3,0,7,2,-26,-4,8,-4,9,0,1,-11,5,1,-1,0,-4,-12,-8,10,-6,9),
	    26 => w(0,-6,-7,-12,-2,11,-6,0,7,-24,-5,-1,-4,6,2,-7,3,-2,1,5,-3,18,-23,5,13,2,-55,1,7,4,0,3,2,10,2,0,14,9,-10,-31,-5,-21,-26,-2,4,1,40,1,2,-3,19,1,5,-2,3,6,-15,-4,-2,1,3,2,6,0),
	    27 => w(-4,7,-1,-3,-2,2,3,-2,-7,5,11,14,5,15,2,-3,-3,3,4,6,2,1,-24,4,4,6,8,-3,1,1,9,-9,3,3,25,-3,-63,-5,3,2,4,4,4,2,12,-1,3,10,-3,8,-10,-11,7,-2,-8,0,4,-1,-6,-4,-6,4,11,6),
	    28 => w(7,-3,-7,-4,-2,-1,5,-6,-4,-7,14,6,-1,-1,-2,8,-4,-10,-3,-7,0,-4,-3,1,1,-8,-16,-11,-4,16,-9,-5,-1,0,4,-7,-15,1,1,-15,-4,0,-6,-4,-6,-11,-4,-8,39,7,-5,-16,-7,-6,-9,-11,-31,-6,-1,6,2,-19,1,-13),
	    29 => w(-12,3,-7,4,24,-2,-17,-8,-8,-4,3,-6,-3,0,3,-6,5,-16,-2,-7,-3,11,-8,-4,-5,-1,-6,-4,-5,-8,2,46,7,-2,0,9,-2,7,-1,8,2,-1,-7,21,-5,-7,7,2,-1,-7,-1,5,-10,-10,-2,-7,-10,1,4,-14,19,-2,2,-2),
	    30 => w(3,4,1,12,-16,-14,1,-20,-6,-5,10,1,-10,-21,-1,-4,-6,-3,2,-17,-12,-4,1,2,1,3,-8,-5,5,6,-3,0,2,-22,-1,-7,-4,-6,-2,-1,-3,-5,-5,8,-15,0,7,-7,-15,4,2,-1,0,2,0,-2,6,6,-1,-11,12,2,-13,-9),
	    31 => w(-3,-5,11,-11,2,-1,-8,1,2,0,-1,-3,-7,-18,16,-1,-17,-9,-5,4,-3,-12,1,0,-13,1,-1,40,1,7,3,33,0,-16,-18,-2,-3,-7,-7,-2,22,-11,-5,5,0,-2,-3,-21,1,23,1,-5,17,2,4,-11,-15,5,-9,4,12,-5,4,-2),
	    32 => w(-15,-4,-5,-12,-30,-2,9,-5,-8,-11,-6,13,4,-2,-1,-2,-15,-4,-5,-12,4,-2,-8,-6,0,-8,-2,4,0,-32,-25,-2,-6,-7,-7,-7,-8,-21,-2,-9,-13,-7,-8,-11,-6,-11,-15,-14,1,-4,3,-21,3,4,-11,-16,6,-8,-6,-1,5,-25,-5,-9),
	    33 => w(-17,6,-12,1,0,-3,-9,-6,-6,-8,11,-10,-8,3,-3,7,-13,-18,2,-25,1,-47,4,12,-8,-24,-12,-8,-6,-18,-1,17,7,-20,-4,8,0,-11,-7,7,9,-5,-11,7,-7,-8,-4,-7,13,-2,-1,-3,0,5,10,0,-9,-8,-13,-31,-25,-7,-2,-16),
	    34 => w(4,8,-11,0,-28,-11,-12,-16,-2,18,8,0,-11,-15,3,-8,-7,-13,-2,-20,-10,-2,-11,2,-4,-21,10,-3,-7,-6,-7,-2,-19,-11,1,-7,-11,0,-2,12,-42,-13,-6,-10,-9,-1,13,1,8,7,-8,-8,-1,-11,-8,-12,9,-10,-20,-12,-4,2,-7,-4),
	    35 => w(-5,6,-15,4,7,2,-12,-7,-12,20,-21,-17,2,-3,-1,3,-5,-4,-12,-3,-9,-1,-4,2,1,11,0,-10,2,1,-4,-12,-11,-11,1,-2,-6,0,-1,-8,-26,-19,-18,10,-3,-8,0,-8,4,21,-6,3,-23,0,-10,-4,-13,1,-4,-12,3,-12,-6,-17),
	    36 => w(-4,-7,-15,7,7,-2,-3,-4,-2,-7,6,0,2,1,-3,-7,6,-2,1,1,4,-6,1,-7,6,-73,-4,2,3,1,0,1,0,-1,-6,19,-1,-1,1,-7,-2,-6,-1,2,6,-14,4,4,9,-5,-4,5,-1,0,-5,0,2,-1,0,4,2,-2,19,12),
	    37 => w(-5,-15,1,-1,6,-7,-16,13,11,-49,-4,-2,-2,-10,-3,1,-9,-2,-4,-2,1,3,-1,-6,-1,4,7,2,10,5,2,7,-3,2,0,0,-3,2,-4,-4,-5,0,-10,4,1,-2,-3,0,-6,5,-11,-3,0,-1,1,3,4,-7,8,1,-10,-3,3,-4),
	    38 => w(0,-1,-7,0,-4,-14,1,6,8,3,3,5,5,-9,-5,1,6,13,-2,15,8,-2,1,-3,2,1,-2,2,8,-1,-1,0,-2,-21,-7,-9,-1,3,1,-2,-7,-7,-4,1,-20,18,1,-13,-7,-3,3,1,-2,-1,3,-4,0,5,5,0,-2,-6,0,-4),
	    39 => w(26,-4,7,-3,3,5,39,0,0,7,-2,2,1,-6,1,5,7,-2,-10,-3,4,2,3,-5,5,-5,-3,2,-2,-7,-3,-6,4,16,3,-14,3,3,-1,-1,-3,2,10,2,1,3,-1,12,-1,9,-6,-4,1,2,-1,-2,5,-1,19,4,1,2,0,2),
	    40 => w(5,-7,-3,7,-3,2,-4,-10,-5,-3,4,6,1,3,2,10,9,0,-6,-18,-6,-2,-3,0,-13,-7,1,4,-2,12,3,6,11,-2,-18,5,-1,-13,-7,-9,-3,-9,-3,14,3,4,-10,19,-34,1,-4,18,0,1,-2,-4,-2,6,3,-7,-8,1,6,-3),
	    41 => w(-9,-4,-4,-1,-12,4,3,-2,8,7,2,-2,-3,12,-2,6,-6,5,-5,1,-3,2,-5,-22,3,1,-9,0,5,1,10,-17,5,-5,3,8,2,-5,0,-7,4,-4,0,2,2,0,-3,2,0,11,-2,-4,-3,-20,1,8,2,-2,1,-8,-2,-15,3,-2),
	    42 => w(3,1,7,-5,-7,10,-14,30,-13,-2,-2,-2,6,-9,6,2,23,-5,11,11,-4,-18,3,1,0,-3,-6,-20,-6,-9,-9,-1,6,6,-1,4,-1,-5,0,-2,-5,-11,0,2,9,7,-3,2,12,10,-4,7,3,-5,3,-4,1,9,6,3,-5,2,2,3),
	    43 => w(3,-7,-5,-2,2,-15,-16,13,-5,1,11,3,-2,-18,18,0,-4,-21,11,-2,8,-5,0,-5,35,3,-4,8,4,-1,-2,-6,-4,-7,-8,-4,7,-9,4,2,-5,-11,-9,0,0,-9,-2,-7,1,5,-4,-3,-4,-6,1,-6,0,-5,1,2,-2,3,0,-15),
	    44 => w(-1,0,-4,-40,-14,-3,-2,4,1,-2,-1,-5,2,-2,-9,-4,-12,4,-5,4,-3,0,-1,-7,3,-3,-12,-4,12,-1,2,3,2,24,-1,-1,-4,25,0,-6,6,-1,-9,-5,4,0,-12,-7,-3,0,-3,2,15,6,5,-6,-3,-2,-5,1,8,-2,-3,-6),
	    45 => w(-12,21,-2,4,0,1,-8,-1,0,1,9,-6,-3,-1,-27,1,-4,-2,-17,2,-5,-37,-4,-10,-1,44,-9,0,-2,2,0,0,4,-1,6,3,-1,-9,-1,11,3,-1,-2,4,-14,-4,24,-3,4,-9,-12,2,1,-2,8,-1,-8,-3,-1,-1,2,1,-3,-2),
	    46 => w(0,2,-4,-3,7,-5,3,-2,-2,1,-1,0,4,12,-1,-3,-8,-8,-2,1,0,-10,-25,8,6,13,15,-8,-2,-8,-16,-2,-6,-1,10,2,0,-1,-1,4,6,2,23,-4,-1,-3,5,-7,-1,3,14,-1,-10,3,0,3,-4,-3,6,4,-3,2,-2,-3),
	    47 => w(-6,1,3,-11,-2,1,1,-4,5,1,8,-2,-4,12,-1,2,-5,-8,2,5,-12,1,16,2,-1,4,3,0,5,-3,11,8,-4,-2,-21,-4,-26,8,-4,-4,5,-5,-7,-9,-11,-9,0,1,-4,-1,9,-4,7,-3,-25,9,-11,4,-1,3,5,-3,0,1),
	    48 => w(5,5,16,7,-3,-4,2,-1,1,7,-4,-1,2,-2,1,3,12,-5,-5,6,-2,-7,9,-23,4,12,4,0,6,-8,10,1,-6,4,-4,11,3,1,-8,-2,2,4,11,-14,5,-3,5,-25,-6,6,1,-7,1,-1,6,1,11,3,-2,8,-1,24,3,-6),
	    49 => w(0,-5,2,-5,0,1,1,-15,3,24,-3,1,5,5,3,2,8,-1,0,-7,0,-2,3,12,2,7,-6,-2,-4,0,-1,-4,6,-4,-2,-5,8,-1,31,3,-3,-3,-5,-12,0,-2,1,1,1,-2,-4,-6,-8,11,-7,-2,-11,-4,-5,-2,8,10,2,0),
	    50 => w(-8,1,3,5,11,-4,3,-24,8,0,-4,2,7,-1,3,3,-4,8,2,-9,-3,9,0,-2,-1,-3,6,-7,-4,11,3,-1,-6,-9,2,7,-2,4,2,1,5,7,-5,3,-21,-13,4,-3,0,-10,-8,1,-1,1,0,7,-2,-2,8,7,-15,-4,4,2),
	    51 => w(12,-5,0,8,-3,0,19,-6,-4,-5,14,-2,0,3,-3,-5,-39,-37,11,-1,3,5,-2,6,-13,-2,4,-26,1,7,3,9,-5,9,0,-6,-4,5,-1,2,2,0,6,4,-1,1,1,10,-1,6,4,2,3,-7,-1,-10,3,5,-36,2,-1,5,5,0),
	    52 => w(-12,2,5,-29,-14,24,-17,9,3,8,6,7,-10,11,17,3,-13,-11,-5,-3,2,4,3,1,0,1,-25,0,0,2,0,5,9,21,2,-1,-1,-3,-1,-7,-17,-5,-4,9,15,-24,-21,2,-13,-1,14,-2,5,15,1,0,7,9,-10,11,1,-18,-10,-12),
	    53 => w(-7,5,3,1,1,2,18,-4,0,6,12,5,-15,0,15,-18,9,-1,-38,12,-29,-46,5,-20,-4,2,-16,-4,-8,-9,-8,24,-1,37,-7,6,23,-21,1,2,8,10,0,-4,27,-3,-5,-6,-17,-29,-1,4,-1,3,33,-6,7,5,1,16,-18,6,3,-21),
	    54 => w(-1,-12,-9,-17,22,14,-10,-1,-4,-31,-18,0,8,12,7,-6,7,-3,2,-16,-3,1,0,31,-3,-24,26,3,7,4,6,-3,12,0,3,3,11,14,-2,-16,16,6,-6,9,-5,2,-42,10,-1,9,24,2,-22,28,18,-2,-4,-22,-14,-50,5,11,-9,-5),
	    55 => w(-6,-14,-4,-25,9,0,-6,-9,-7,3,13,19,-24,4,7,2,-5,3,-8,16,-7,0,5,2,4,37,3,-2,5,13,43,-5,-1,-2,0,-9,-7,1,-1,-4,-2,1,1,-28,6,-7,1,20,32,-4,-37,32,4,-5,10,3,-13,11,-1,-7,12,-2,3,20),
	    56 => w(-39,8,10,3,8,0,4,-7,6,-3,0,-5,-1,3,7,-1,-2,-2,-5,-7,5,3,15,-28,3,-10,-7,-4,-28,34,18,-16,4,1,14,9,-11,2,-21,4,-11,-12,3,-10,-1,8,12,7,36,11,11,-4,3,13,7,34,29,-6,5,-2,-5,-2,-3,11),
	    57 => w(32,0,2,-18,-20,5,5,-1,1,-4,5,8,-1,-7,4,-3,2,-6,11,38,5,-24,4,13,0,11,21,12,-2,-10,-1,-6,-1,19,-5,-54,7,-20,-16,-16,2,0,19,10,15,-2,2,-7,-3,9,-8,2,-2,0,-1,5,48,3,-14,4,-24,33,-6,-7),
	    58 => w(-2,-2,13,-4,12,11,7,13,12,-13,-4,5,8,3,-2,3,0,-11,4,-1,-10,-19,-3,2,8,-3,-6,-14,-18,-7,6,1,6,6,-12,18,40,-6,2,-24,27,-7,-4,24,12,34,1,0,-4,10,-8,-11,0,-3,-1,-1,-18,-6,-10,1,-22,3,8,7),
	    59 => w(6,4,45,-14,-4,-1,-17,-18,-1,12,7,14,-3,3,21,-7,-21,-37,27,5,23,-1,20,-7,49,-5,-1,-3,-8,2,16,8,9,1,30,7,-2,-23,-13,3,58,-12,15,-12,6,4,4,8,-9,-35,-9,15,21,-10,-8,2,28,3,-9,-17,-4,-21,10,32),
	    60 => w(-1,24,-16,1,-9,-2,0,0,5,12,5,-17,-4,-2,3,-1,10,-3,3,-8,5,9,4,-22,1,13,-1,-1,8,-4,2,-1,0,4,1,-9,4,8,-10,-13,-1,10,15,-13,-3,0,5,-14,16,7,0,6,0,-2,11,-13,-8,-20,0,-7,-2,12,5,-13),
	    61 => w(4,2,12,3,4,-4,0,-11,10,1,4,2,4,3,1,-8,14,11,0,0,8,2,3,12,8,-1,28,1,-9,6,-4,2,1,-1,0,14,5,8,9,10,10,-3,0,3,3,6,5,3,-9,-1,6,6,-16,14,-2,-3,-6,3,-3,-10,18,19,2,10),
	    62 => w(-4,0,1,12,4,-15,9,-5,27,7,4,1,1,4,8,2,-6,7,3,-4,-10,9,0,3,0,-5,-1,4,-8,11,0,-1,-4,7,16,14,0,2,-5,-4,5,5,0,3,-3,0,2,8,-2,2,4,0,6,-4,-2,5,3,-3,-5,0,-14,4,-7,-1),
	    63 => w(-10,9,9,13,-2,9,-39,-2,-2,1,3,-1,-1,4,-2,-6,-3,-5,-9,2,6,-2,2,-12,0,-2,1,0,-3,-10,9,6,-11,11,-5,-12,-1,7,7,2,-15,-19,-3,-8,0,-1,-3,1,0,0,10,4,13,-12,0,11,-3,4,5,9,12,0,1,3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;