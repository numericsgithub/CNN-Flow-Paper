library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core8_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core8_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core8_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(3,1,-4,-10,0,-2,-8,-13,-2,7,-11,-6,-1,1,-5,-9,-12,2,-3,-5,17,2,-1,6,-18,-1,2,3,7,5,-25,-2,-10,-3,0,-3,-2,20,-9,1,12,2,0,5,-2,-2,-10,4,2,11,-1,3,-3,0,5,-2,-18,13,0,6,1,-2,5,5),
	    1 => w(2,-11,-4,-5,-7,16,9,1,-6,1,-5,-4,3,2,-10,-2,1,0,8,0,1,1,8,-2,-2,4,-9,5,-2,0,0,5,-1,0,2,-4,-23,23,5,2,2,3,-17,1,1,10,2,-1,-1,-3,2,-13,2,17,-6,8,2,-3,15,5,-10,10,-16,-2),
	    2 => w(-1,-4,0,1,-7,-1,-3,1,-26,1,6,0,2,-6,5,0,-3,-19,1,2,0,13,-10,-7,1,5,-4,7,1,-12,0,-11,-8,3,-4,2,-4,7,-1,-4,-6,0,-1,3,7,-30,5,-13,15,1,3,-10,4,-16,-8,-3,0,5,10,0,-15,-3,-3,-3),
	    3 => w(-4,-6,3,2,24,0,-3,-2,-10,11,-1,20,3,9,3,-19,-8,3,9,5,-1,7,1,2,-1,-2,8,-2,-5,15,-1,0,-5,5,15,0,-20,-8,-25,-2,0,-8,0,9,3,0,7,0,1,9,7,-5,-4,4,-1,0,-70,-4,3,0,-3,20,9,3),
	    4 => w(5,-7,-9,-5,1,-1,11,2,0,-6,-2,-8,-5,-3,-3,1,-3,5,1,3,-8,-3,3,-2,0,-3,4,-3,3,-4,-1,0,-14,0,-20,48,3,-3,17,-6,6,0,6,3,-2,2,7,22,6,0,-14,5,-6,1,-2,0,5,20,-3,-9,-1,-2,-1,10),
	    5 => w(-1,-5,11,3,17,-7,4,-1,2,-4,-4,2,3,0,6,3,-1,-3,-2,0,-6,1,11,2,17,-1,-3,-3,-1,-3,-2,13,0,-1,-4,-2,20,3,-25,-3,0,28,-9,-3,31,2,-3,-1,11,-9,-2,5,-3,15,-2,18,-5,4,4,4,-5,-4,-7,-3),
	    6 => w(-5,-29,-1,-3,8,0,3,-2,-8,4,-17,-2,-2,2,4,4,4,3,1,1,-5,-10,-2,4,3,-13,0,12,1,-8,0,3,-20,-14,-4,17,-11,-13,-5,3,4,19,-3,2,6,5,-7,-1,-11,4,-1,5,-8,3,8,0,6,-1,-6,4,18,-5,4,5),
	    7 => w(1,1,1,-20,-3,2,22,2,1,-3,-5,-1,-15,-1,-3,0,-5,-2,-1,-5,6,7,-3,4,4,2,-3,0,1,3,5,-18,-11,0,-8,27,1,2,-3,6,3,10,-5,-5,-1,0,2,-7,-10,0,39,2,2,-3,0,-1,4,-1,-2,-3,27,-2,-2,-8),
	    8 => w(1,1,4,-10,-14,6,7,-4,0,3,-23,-3,0,3,-2,9,2,-1,-2,-5,-1,-8,1,0,6,-1,11,-5,-1,1,-4,-3,-2,0,2,-1,5,-3,3,1,1,-1,16,-1,-3,6,1,-3,-1,-4,-2,-6,2,0,-1,1,44,20,2,0,0,1,-1,-1),
	    9 => w(0,1,12,-2,-1,1,-4,-2,-3,1,0,-1,-1,0,1,0,-2,-2,-15,3,1,-1,7,-12,1,0,0,-14,0,-1,0,-32,-2,-16,-3,-3,18,7,-2,0,6,-3,-1,-1,2,5,-1,0,-1,-8,-5,-10,-3,0,-9,-2,2,0,-17,0,-4,-4,-18,1),
	    10 => w(-4,-3,-1,2,1,-3,5,-3,7,5,8,14,2,-5,-4,1,-1,-3,-3,-2,-1,-9,1,-2,-19,1,5,3,-2,0,-8,-6,-3,0,0,0,-1,-4,0,-5,0,0,-1,2,2,39,4,-12,6,0,-1,16,5,8,-6,1,-17,1,1,-7,-10,0,0,3),
	    11 => w(-3,-3,1,-3,0,0,-2,3,1,1,-1,0,5,-33,-5,18,-2,-20,-69,2,3,2,-1,2,2,7,-4,1,1,3,1,1,7,3,1,0,1,-4,-3,-28,-3,14,1,1,1,2,-1,-5,2,2,2,2,0,7,-5,0,1,-2,3,-2,-1,-5,1,3),
	    12 => w(-1,0,2,8,-11,2,13,-6,7,-10,-7,-15,-2,4,6,-6,-8,9,-3,-7,-5,1,31,4,-20,3,12,14,9,2,-11,-2,-3,-8,-1,-5,-1,13,-1,5,10,0,12,1,-7,-1,-2,20,-2,14,3,0,16,1,5,-8,-8,-13,-2,3,0,-1,-8,-3),
	    13 => w(3,-5,4,-1,4,6,24,1,0,3,-8,-4,5,3,-12,-5,6,5,13,-1,-4,-8,-14,-5,1,-2,-10,2,26,9,1,-5,-1,7,60,0,5,8,5,-3,0,7,28,2,-3,8,18,2,-12,0,9,-3,3,33,-6,17,2,1,19,6,-3,-29,4,0),
	    14 => w(-6,-3,1,-1,-34,1,0,-2,-3,-5,-51,-1,2,-1,-13,-1,-1,2,-1,6,10,-3,-16,4,-8,2,8,2,0,-7,-2,-6,0,2,10,2,32,12,-4,1,5,-1,-1,-1,6,-11,5,17,-3,1,2,-12,6,2,-10,1,7,-23,9,7,70,-3,7,1),
	    15 => w(12,4,0,4,20,-4,2,5,2,7,2,11,-38,4,0,-5,14,4,5,7,-13,6,-5,4,0,-2,-1,-4,-3,-3,-1,-21,-4,7,8,-2,-12,-2,-3,-2,-9,0,2,1,3,-3,-1,2,6,6,-2,-4,7,3,0,36,-5,-1,-1,2,-3,2,8,-2),
	    16 => w(-1,1,3,0,0,0,13,19,-2,7,2,25,7,1,-15,-3,7,16,5,6,-2,2,2,-1,5,0,-2,-3,11,6,-2,-1,-8,9,-4,13,-6,0,2,7,4,-2,-3,20,3,3,2,13,-1,-2,-2,2,8,-1,-12,4,-3,-3,10,1,-1,-5,0,3),
	    17 => w(2,4,-31,-3,7,9,20,1,0,1,7,4,16,0,5,4,2,11,-1,-3,7,1,-4,-7,-1,-10,4,-7,14,1,7,10,-6,14,49,5,-18,-22,5,-2,-3,-4,49,-1,-1,-2,4,8,11,5,33,-6,10,-37,1,31,-2,1,5,-1,4,38,4,-12),
	    18 => w(-1,1,-2,2,0,-1,-5,-7,32,4,-16,0,2,0,-19,0,-2,6,-4,3,-3,-7,8,6,25,-3,0,11,-3,-7,4,10,-4,3,-5,-3,7,17,2,2,10,4,-2,3,-7,26,-8,16,1,-2,4,11,-11,-4,-9,-5,53,14,-2,-1,5,6,7,0),
	    19 => w(1,-6,0,-4,-18,-4,1,0,8,-1,1,-2,24,-1,2,1,3,-10,-14,2,-2,-1,2,10,0,-4,-2,10,-2,8,4,-15,-26,-1,-2,4,10,0,-1,21,-16,42,-1,-1,4,-2,1,-7,6,-3,1,6,3,5,-16,8,7,-3,-12,-2,3,7,1,2),
	    20 => w(-1,-1,6,-3,8,-2,20,34,1,4,-15,-2,3,6,1,-7,6,-14,-5,-6,-4,7,4,-7,-20,1,-17,-1,-18,-1,19,7,2,11,3,0,2,-8,8,-12,-12,2,-17,28,5,-3,7,1,3,-3,-2,-6,2,-48,-3,1,-16,-6,0,-1,0,5,-1,3),
	    21 => w(2,1,2,-4,0,10,-9,-3,-1,2,-9,-2,41,-2,1,-2,2,-7,12,0,-7,6,19,5,3,2,0,6,-3,-3,1,-10,10,47,-15,-3,-50,8,0,-3,1,-1,-15,-1,0,-9,9,-5,0,-12,-1,47,1,-12,-4,3,-1,11,18,2,4,2,0,4),
	    22 => w(3,-7,-12,-7,-16,7,-1,-5,-1,-1,-6,-13,1,0,9,-1,0,2,4,2,3,18,-1,4,4,-2,-4,0,6,3,0,4,1,-1,-1,0,-4,-1,-2,5,-28,-1,-2,-5,-1,8,3,43,-6,0,-2,-29,1,3,-6,8,17,6,4,9,-17,2,-2,-5),
	    23 => w(2,-7,0,0,27,-1,-9,-5,-14,4,1,-3,-1,19,1,-21,-1,2,-5,2,-62,-5,-1,2,-3,-6,4,-5,-1,-1,-2,-14,1,1,15,-3,4,4,4,3,-2,-6,0,0,4,-2,-3,10,-1,1,-2,5,-3,-2,-9,2,5,1,1,8,-2,-1,1,-1),
	    24 => w(5,-2,-2,18,10,7,-9,6,-2,33,-2,-18,-4,3,3,3,2,9,-6,1,19,7,-17,-3,19,1,-4,-27,4,-3,-4,2,2,15,5,-6,0,-11,20,5,-7,-3,-18,13,-1,0,-5,-6,5,-4,-9,15,0,7,-10,-5,-5,5,-2,8,-3,-3,2,0),
	    25 => w(-6,-6,12,-3,4,-8,-26,-1,-15,1,-11,2,3,-2,14,1,-6,-2,-1,-1,-2,14,4,16,0,-3,0,-9,-34,10,0,42,-1,-2,6,-5,6,-15,1,-5,-3,-1,7,2,-3,-8,11,0,14,3,-5,16,7,-1,5,3,-1,8,-23,-1,0,-4,6,16),
	    26 => w(4,6,3,1,-25,0,29,-13,-2,-16,-17,5,-3,1,-7,0,0,-1,-1,-5,5,0,-2,0,15,-4,-8,0,0,13,6,15,4,-9,2,-1,-12,1,4,8,2,-5,-1,-3,-6,3,-3,-7,11,-1,0,-42,7,-9,0,4,-7,2,-3,7,14,17,7,7),
	    27 => w(3,-5,-5,0,-7,-2,-3,7,6,-2,-2,-18,31,2,0,-12,-9,4,4,5,6,-1,-2,15,-3,1,-4,4,-2,10,4,9,-10,0,-16,4,3,-6,-3,-3,-18,-6,2,4,-8,-4,-7,9,-8,-11,-5,-7,1,2,7,-36,-1,-1,-11,1,-12,-1,-7,-2),
	    28 => w(0,2,2,-12,7,1,-2,-1,0,35,9,20,-2,4,-1,0,5,-18,5,3,9,-6,-22,1,4,-1,1,-17,2,0,1,1,-5,-3,4,2,-3,9,7,-4,5,-2,0,-4,1,0,9,7,0,2,1,-15,2,-4,-4,5,1,1,5,1,1,4,5,0),
	    29 => w(-30,2,-9,11,3,13,-91,0,-2,8,0,-3,-11,3,21,-3,1,0,-2,2,2,-1,15,-3,-2,4,5,6,-57,-15,-4,-8,2,0,-3,1,24,15,-2,5,-7,-2,-9,2,-3,0,6,-3,48,1,10,-4,-10,-18,1,-10,0,-6,13,-2,9,-9,-5,-6),
	    30 => w(-1,0,2,-1,25,0,44,-11,15,35,26,-1,2,-5,-6,-3,0,-1,5,-7,-1,3,0,4,-4,1,5,-4,2,-11,9,-8,5,5,-3,0,4,-6,-1,-1,-1,-7,0,3,-1,5,14,-3,2,47,-2,5,-4,5,-9,4,-3,64,-7,-4,1,-6,3,10),
	    31 => w(-1,4,2,-1,-9,1,17,32,-23,-3,1,7,10,1,3,-14,3,-7,5,-9,-5,11,5,-20,3,2,-4,-3,1,-1,4,22,-14,10,8,0,9,-1,-5,5,23,17,-1,1,1,-3,0,-2,0,-6,20,0,-2,-1,-3,-34,2,1,9,3,-7,-12,-2,2),
	    32 => w(-2,0,8,14,2,16,10,-13,2,2,4,-16,-3,-7,2,2,-2,0,-1,-5,-3,-13,0,0,-3,3,8,-18,11,-2,-6,1,2,8,-5,5,4,-8,34,0,-6,2,2,-5,5,0,-9,0,1,-2,2,3,-2,-4,-3,-1,11,-21,3,2,-1,0,2,-2),
	    33 => w(3,-1,10,3,0,28,-4,-2,-3,3,0,0,-7,3,9,1,-7,3,-18,1,-2,11,-18,2,-3,5,-2,8,3,-1,-1,21,-5,-9,10,-6,-1,-15,1,-1,3,2,4,6,-2,-3,-7,0,4,2,-1,17,5,-31,-1,41,2,1,-4,4,0,-34,29,3),
	    34 => w(-3,-1,-3,-3,9,3,-1,-21,-21,-3,-8,5,4,6,-1,0,2,-4,-1,7,-8,7,1,-6,7,3,-3,5,2,2,2,-40,-3,-1,-9,-3,-3,-13,0,5,0,2,1,20,-8,2,2,-4,11,6,0,3,1,-1,-14,2,-10,2,-5,-2,-15,3,2,-12),
	    35 => w(2,1,6,-2,-38,5,-7,3,0,-7,-1,-3,-8,8,-1,3,-7,2,-4,-5,-4,4,-4,-10,0,2,1,0,-2,-2,2,34,-4,1,-7,-4,2,5,-17,-7,5,6,-1,26,-8,2,1,0,-6,-12,-2,-7,-3,10,4,-1,2,-2,2,3,2,1,-11,1),
	    36 => w(-1,0,-2,2,-2,-4,-7,-8,-5,3,0,-23,6,-29,-9,0,6,-6,-1,-1,-1,2,-2,-5,3,-6,-1,-2,3,-18,3,17,-3,8,4,2,8,-7,-10,-13,0,-5,-6,8,4,1,3,-10,1,-8,9,6,53,6,-15,0,3,7,29,-3,-2,-8,2,2),
	    37 => w(8,3,21,8,-18,-18,-3,0,-8,-3,0,-7,9,-15,-4,23,-5,-3,-1,0,-2,11,2,1,6,-3,4,-12,-1,-8,10,18,-3,-8,-23,-1,9,-8,-10,8,-3,-8,0,-6,13,-2,-7,-2,0,2,-7,2,21,-12,5,-5,-6,-6,-5,-4,-2,24,5,-18),
	    38 => w(-4,1,-3,7,11,0,-7,4,-3,19,14,2,6,1,1,24,31,-1,-2,-9,1,-4,2,-2,31,14,-3,10,1,-3,6,15,4,-11,-7,-3,0,-33,-6,5,2,11,5,0,-2,-16,-4,-12,2,2,0,17,-4,-6,-4,1,-7,5,-5,-5,-3,4,-25,0),
	    39 => w(-13,-12,-11,-5,-1,-7,-8,10,38,-17,26,-4,1,-1,2,11,2,7,2,-1,-1,-5,0,4,9,4,1,-8,-1,5,-3,-12,22,4,-3,-39,-6,-5,-9,-9,-1,11,17,-4,-2,1,-4,8,21,-5,31,-2,-6,23,-4,-5,0,-7,-12,-8,13,1,-9,-6),
	    40 => w(-2,0,3,-9,1,6,8,45,0,-2,-5,1,-3,6,-9,-11,8,14,-4,-2,9,4,-1,2,-1,3,1,-1,5,2,0,2,13,-1,2,8,9,6,10,-8,-7,0,-5,12,1,-1,6,-29,0,3,0,6,-3,-5,-3,9,7,-28,-4,-12,2,1,1,-6),
	    41 => w(6,11,-5,0,0,-12,11,0,8,1,23,0,-5,-1,-6,2,1,-5,-4,-3,7,-5,-38,-4,-1,-7,2,-5,9,-5,-4,-2,-10,27,10,2,-19,2,-5,-2,6,8,15,-1,-1,-5,-13,-3,2,-29,3,15,-2,-4,1,9,-1,0,0,-2,-5,-20,-6,2),
	    42 => w(-3,13,-5,0,14,-1,0,-10,6,-1,4,-1,2,10,-2,0,2,6,-1,-5,-2,7,5,-8,-4,0,2,18,-2,-3,-4,38,-9,-4,0,-1,5,-9,-1,-9,2,3,-1,9,-4,0,-6,-9,16,1,4,0,-1,2,16,-9,19,6,3,-6,36,3,11,7),
	    43 => w(2,-3,-1,-10,-34,2,0,6,2,-1,-1,-8,-5,1,-4,29,5,-3,-15,-17,-1,-2,0,4,1,3,-5,0,-7,6,-3,24,-8,2,5,0,-18,0,26,11,-10,11,-1,9,3,4,4,-6,1,4,-7,10,-1,-5,-8,7,6,0,-1,-3,4,24,-1,7),
	    44 => w(3,0,9,-7,0,-1,2,-3,-2,-5,-1,2,11,-37,1,0,5,-6,-3,1,23,-1,7,-3,-2,-5,3,2,10,-3,2,4,24,-2,-9,2,2,5,-11,-3,3,0,-1,-1,0,1,7,-14,-2,1,15,4,-2,1,0,-4,1,-7,5,3,1,-3,3,-9),
	    45 => w(9,19,1,-6,-17,-4,4,-1,-6,0,3,-15,-1,11,9,2,0,-3,0,0,3,5,10,1,-19,-10,4,-3,8,6,0,1,1,3,1,2,3,5,21,5,0,-6,10,2,-29,-1,4,2,8,-5,0,10,5,-1,-1,0,13,4,-3,-5,1,-7,-2,0),
	    46 => w(-2,26,-5,4,13,-1,-3,-4,0,-4,13,-2,1,-2,5,-10,0,3,-1,-8,3,-5,-7,0,-5,6,-5,7,0,-19,0,-13,12,20,-1,-13,2,1,5,5,-6,-18,0,6,-4,-1,0,-5,19,3,0,-11,0,-1,15,1,3,-4,-3,0,4,3,2,-1),
	    47 => w(4,-6,13,0,-6,-1,-5,-5,-48,-7,12,1,2,-3,0,-1,-9,-3,-2,-3,-5,-7,-3,2,-3,1,14,2,0,18,0,-22,-10,-3,-4,-3,2,-1,10,4,-14,5,-5,3,2,-2,-3,-3,-5,-11,-94,0,-1,3,0,-6,-1,4,-1,-3,-7,3,2,4),
	    48 => w(3,2,3,7,-11,3,20,-8,-3,8,5,19,-5,-6,2,10,-4,1,1,-4,-35,-2,4,0,-19,-5,10,-10,-3,8,3,1,-5,-3,7,-4,-7,-1,12,-2,1,1,7,-1,-2,-1,0,2,4,-3,0,-3,-2,-9,7,-7,19,-9,2,0,0,2,-8,-3),
	    49 => w(4,4,-8,-5,7,5,-13,1,-11,4,-7,2,-1,3,-11,-9,-2,0,-11,0,1,-5,19,-6,-2,10,1,9,-7,0,-1,-21,2,12,0,1,-8,-6,5,-2,6,-12,16,1,3,7,6,-1,11,3,9,-17,4,29,-2,-17,2,-4,11,3,-4,-23,9,3),
	    50 => w(-7,-14,-4,2,-26,-1,7,-10,14,-6,20,-2,6,4,1,0,-2,25,-6,0,6,-15,-3,0,-8,1,-2,-1,0,24,-7,13,1,0,2,2,-11,-2,0,-14,4,-1,1,16,7,14,0,10,3,-2,0,23,5,25,-4,3,-8,-6,-3,4,-4,-2,6,2),
	    51 => w(-4,1,3,0,16,-2,-3,3,-5,-7,1,-2,14,-11,-1,13,-2,1,14,2,-17,-6,-3,7,1,6,-1,-3,-1,5,6,0,-3,5,80,-2,1,-10,-15,-23,7,-15,4,-4,-3,3,-4,2,2,17,8,1,0,-13,-3,-2,51,-2,-3,1,-4,-23,-2,4),
	    52 => w(0,2,2,14,15,4,1,2,-2,-2,-6,0,-3,-10,3,-4,14,3,-2,6,5,-8,-1,-4,12,0,-13,-4,20,-1,15,2,-2,5,-3,7,-1,-12,-4,0,-9,1,-10,10,7,-2,-2,7,2,-7,4,-5,1,-18,1,4,-33,-11,1,-3,-1,3,-1,1),
	    53 => w(-1,8,-1,-1,-5,40,10,-3,-7,-2,-4,-1,-1,-2,7,-2,0,-1,11,0,3,11,-1,4,2,6,3,9,8,-2,0,-1,0,-3,-1,0,3,-16,-4,0,0,-1,16,-1,-2,-6,-4,-2,10,-16,5,-39,0,-8,-5,2,-1,8,-16,-2,4,-5,13,1),
	    54 => w(1,0,-8,-1,5,5,2,1,-6,-1,2,-16,0,-3,-5,0,-2,-4,1,1,-12,-2,5,1,-12,3,0,3,4,-3,4,-35,15,3,-1,-2,3,10,-4,-2,-13,-2,0,-7,-10,14,1,14,-1,-1,-1,-3,2,-5,-4,-1,-17,5,2,-5,-1,8,-6,1),
	    55 => w(6,-3,1,0,-2,2,-2,4,19,-2,2,-11,2,6,-1,1,3,-5,-1,-4,11,0,1,-4,-1,-3,-4,0,9,-10,-1,0,-28,3,-42,-2,5,19,8,13,-8,-26,-1,0,4,0,-2,2,2,-15,-1,0,-2,7,7,5,-10,-2,3,4,-2,-3,2,0),
	    56 => w(-2,0,-9,11,-3,7,0,-4,-3,1,8,6,1,-4,12,1,-16,-2,-6,15,11,-14,-7,-5,6,3,8,-7,-9,-1,0,0,-1,16,-2,-4,-6,-16,-8,-12,0,-1,18,-32,6,3,-2,-4,0,-7,2,2,5,-5,2,-5,13,2,3,4,-6,1,-4,-2),
	    57 => w(7,7,-13,24,7,34,-1,-4,3,-2,1,3,-51,-2,4,1,-19,-5,-7,3,-7,16,-23,2,1,0,-1,-5,3,-1,4,-5,-4,15,-18,-4,11,9,2,1,3,-1,0,5,0,1,-1,-4,-5,-6,9,-4,1,-4,3,19,-8,6,2,-6,2,26,-27,5),
	    58 => w(-6,3,-4,-3,-7,0,-1,-2,-21,-9,-5,-1,-1,0,-3,0,1,0,3,6,-5,-1,-18,-6,10,0,1,8,3,1,5,-2,10,0,0,3,-2,-3,-2,8,13,3,-1,-4,-18,-16,-4,-20,2,0,-2,6,-12,6,1,0,9,3,-9,-3,1,-3,2,-14),
	    59 => w(-1,3,-3,1,-2,8,3,10,7,-7,-1,6,2,16,-2,-10,3,-1,-9,-11,-2,-8,-6,-6,1,4,-5,-1,0,-4,-4,-25,5,-9,4,4,-7,-3,-12,-19,-10,-15,-1,-6,-6,1,-8,-4,1,0,8,-15,-1,-6,-13,-3,-4,-1,-13,-3,3,-2,-17,-2),
	    60 => w(1,1,-15,1,-1,-5,0,0,3,-4,2,11,0,-7,2,0,0,-53,5,4,0,3,-8,1,0,3,0,2,-13,-3,-1,-2,11,-1,-1,7,-4,-2,-18,-1,0,1,5,4,1,0,-1,11,-1,-3,4,3,-1,-1,-5,14,-7,1,4,-1,1,3,0,0),
	    61 => w(-2,18,-7,-2,-1,10,5,0,-1,-3,10,0,1,2,5,2,2,-3,17,0,-4,-7,-8,0,-3,-25,-3,-3,0,6,3,4,-2,-15,-18,1,21,8,2,0,-1,-8,-79,-4,1,2,13,1,1,-2,-7,2,-11,23,0,-128,0,-4,-7,0,1,13,-11,2),
	    62 => w(8,3,0,-3,7,0,-5,8,3,-2,2,-4,-1,1,2,-2,1,1,-2,-4,1,13,0,3,11,-1,-5,-6,1,-6,-1,36,8,8,3,3,2,-36,-1,2,6,4,0,0,1,2,-4,4,-2,4,-2,3,2,1,31,-2,-5,4,5,2,-6,-5,-6,7),
	    63 => w(5,4,9,7,2,2,9,1,6,-4,0,-10,-6,-4,1,9,-2,1,2,-7,8,-21,0,1,3,1,1,0,2,-2,-2,32,-17,-6,9,7,5,-3,34,1,7,5,5,-23,1,0,2,1,-5,-2,16,1,-1,-16,9,0,2,3,0,1,2,2,1,3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;