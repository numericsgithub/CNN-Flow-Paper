library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core10_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core10_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core10_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(0,-16,-1,-14,8,-2,-3,21,0,-4,7,-12,-2,11,3,-2,3,0,-4,-1,0,0,5,1,12,6,-2,-13,6,-5,-15,-7,3,5,-4,0,9,-1,-5,3,-1,-20,7,9,6,8,3,-14,10,5,1,-4,3,1,3,4,-10,0,2,-13,-5,3,17,-7),
	    1 => w(-8,-2,4,6,6,2,-3,14,-13,-1,-3,5,-1,-12,1,5,-7,-9,4,-1,-2,-11,0,-2,4,-7,-3,-19,5,-16,18,27,-3,16,2,2,2,-2,-7,-11,5,1,6,-9,-2,1,-3,1,5,-2,4,2,-4,8,10,31,-3,-3,-2,11,-7,-2,-4,-2),
	    2 => w(-12,1,-7,2,3,-8,7,0,5,-1,-4,8,-4,1,-3,1,-14,-3,1,19,-10,1,4,8,-2,-1,9,1,-1,3,-1,-1,-5,6,5,-5,0,-1,1,4,8,-2,-7,-7,5,-1,-1,-1,3,5,1,16,-1,1,3,2,-1,9,1,-1,-5,3,-4,0),
	    3 => w(0,15,-1,-7,0,0,6,4,0,4,10,5,0,-8,-3,3,0,-5,2,2,11,-5,-2,0,4,-5,2,6,0,-2,9,7,4,-6,4,1,-2,-1,0,0,7,1,2,-10,-4,10,7,2,3,3,-4,2,7,1,2,-19,4,-5,-1,-2,1,3,-9,3),
	    4 => w(1,4,8,-12,-21,6,9,7,0,-5,-2,1,4,8,-3,-9,-4,6,3,3,5,2,-14,-2,-2,-4,-2,22,-2,-9,-11,22,7,-12,10,0,-12,-6,-7,-1,-5,0,3,3,3,0,-15,-6,5,-7,-8,13,7,2,-3,-1,-8,-1,-4,-4,18,-3,-2,4),
	    5 => w(-21,2,11,6,0,0,3,0,1,1,-4,0,-3,1,-4,-10,-5,-2,6,-16,0,1,-3,-41,12,-13,-19,-14,15,0,-7,7,-1,-7,0,-6,1,7,-8,18,19,-1,-3,3,2,12,-3,-1,8,-26,0,-3,-2,-4,-1,26,2,1,0,-1,-5,5,2,9),
	    6 => w(9,0,1,-7,1,-7,4,2,-4,4,-11,-2,2,-5,4,4,10,12,0,-5,9,-14,-2,-13,-1,-2,0,13,6,-4,2,3,-4,-14,-9,-4,2,1,5,-11,-7,-2,-1,3,-3,16,-10,2,-9,5,-4,6,-1,14,1,-8,1,4,53,-10,1,1,3,2),
	    7 => w(-1,-4,-13,-5,-3,-2,-9,25,3,-24,-6,-7,10,2,2,8,0,-4,0,-10,-10,-7,-1,-4,0,-3,2,2,-5,-15,-3,-5,-7,-11,-13,-5,-4,13,20,-4,-18,-2,5,0,-4,-4,-3,15,6,-3,-6,-3,-7,0,5,10,-31,-20,5,-4,-5,0,-5,-19),
	    8 => w(18,7,2,1,-2,-3,5,8,4,-5,0,2,-2,-6,1,3,3,-4,-3,14,-3,-3,-1,2,3,7,-2,2,-3,-2,0,-2,-8,3,-9,11,2,3,6,16,1,-17,7,-2,0,1,-1,-4,-1,-2,1,-2,-1,2,-2,-7,15,6,4,3,-5,-15,-8,22),
	    9 => w(12,-10,3,-19,-13,0,15,-61,1,-54,-8,2,3,4,1,9,-9,-7,-3,-9,7,-8,-5,8,-3,1,1,-2,5,-4,1,-13,-1,2,4,-8,1,-3,19,-6,-18,-10,4,-5,-1,-2,3,2,3,7,2,12,3,0,3,-3,6,-1,2,-2,8,-13,-9,2),
	    10 => w(-11,-1,16,-4,0,-8,-4,-13,17,0,-5,3,-3,-26,0,1,1,10,-1,-3,7,-12,-4,-1,-1,-2,6,-6,-7,12,12,1,-8,25,-13,3,-2,1,7,1,-18,2,-6,-2,1,-11,3,-9,4,-6,3,-5,-3,4,-3,1,1,-11,2,7,1,0,2,6),
	    11 => w(-25,-19,12,3,1,-5,2,-3,4,-1,10,-5,-8,-15,-1,3,11,-32,16,-8,-4,23,1,6,-2,-5,4,-15,2,2,-2,-5,1,-9,4,1,4,11,-8,4,3,12,16,13,-2,6,-2,-2,5,1,-1,4,7,-13,6,-23,4,-5,31,6,-11,5,-6,8),
	    12 => w(15,2,4,9,9,-5,-2,-5,3,-4,2,6,-8,-2,-4,-2,-2,-3,-12,2,0,-2,-2,-7,-8,6,-14,4,3,25,19,-1,-8,10,8,8,3,-4,3,14,-13,16,-16,-2,-9,30,-17,4,13,6,-4,-6,14,3,0,16,-7,18,4,33,-2,-15,2,-5),
	    13 => w(1,-13,19,-24,20,0,12,10,-8,10,15,-3,9,0,6,6,6,-3,2,3,1,-18,-1,12,-2,-10,16,-7,9,22,-1,3,1,8,-1,-24,2,15,6,18,-7,-5,7,5,-5,-4,4,5,5,-9,5,-5,0,-4,3,2,-16,-6,13,1,14,2,-14,8),
	    14 => w(7,3,2,-8,14,0,5,-5,4,15,3,-4,8,-4,-1,-2,0,-5,2,7,-3,-9,5,8,9,-24,-5,12,-1,18,18,0,-6,2,1,-18,6,2,1,3,10,-5,-30,-23,14,13,-8,2,5,-5,20,8,3,2,-2,0,-13,-12,2,-9,7,0,-3,6),
	    15 => w(0,23,9,9,5,-4,16,-6,3,-3,7,0,0,-12,4,6,-1,9,-8,-6,6,2,-4,8,23,2,9,27,-1,4,-5,10,1,8,1,13,12,12,-16,0,14,4,-5,22,0,-6,7,-6,2,-20,7,9,-20,-12,14,2,8,-7,5,13,12,10,-15,-13),
	    16 => w(-3,-3,1,-4,53,-1,8,10,0,4,-8,-8,-5,4,-2,0,-4,3,5,-2,1,0,8,-2,-1,-1,-10,-5,0,-15,2,9,3,0,4,4,2,-5,-2,-6,1,-3,-4,10,3,4,20,2,0,-5,-8,-3,2,-3,-8,1,-7,0,0,6,6,-6,-5,-12),
	    17 => w(-7,0,3,-12,-3,1,5,-1,17,5,8,1,8,-1,4,-15,-10,-1,-3,-7,-5,-7,-7,9,6,7,-8,-13,7,9,-4,10,-4,-22,0,-2,-53,0,3,5,-4,8,2,-1,1,2,12,4,0,-3,1,2,2,-17,1,18,2,4,2,-5,-6,2,9,5),
	    18 => w(-2,1,-2,-3,-8,0,-8,9,3,4,30,2,-6,-4,1,-1,5,-8,0,2,3,2,-1,10,1,6,-8,-2,-1,-3,-7,1,-33,18,-8,-3,1,8,1,-7,0,-1,2,3,1,3,-10,5,-2,0,-5,-5,9,8,15,0,-7,8,4,7,3,0,-1,2),
	    19 => w(-1,3,3,5,-2,-3,-1,0,1,8,-8,2,2,0,1,-2,-4,-2,-12,-6,5,1,-1,-4,0,11,-1,6,2,-8,-8,-16,-2,0,3,-4,1,2,-21,2,-13,0,0,2,-2,2,-2,0,-14,6,4,0,-6,-7,7,4,-16,-2,-1,3,-10,-4,-2,-6),
	    20 => w(3,-12,-7,-16,-18,1,-8,4,2,23,0,-1,-6,-3,-5,7,-10,-5,-10,-8,0,1,-11,-1,0,-5,-1,11,-9,-3,-13,2,1,10,2,-3,-10,0,0,0,8,-11,-3,-11,-5,-1,-4,-19,2,-7,-5,-18,5,-2,7,4,-5,-1,-1,6,-8,-12,-3,-10),
	    21 => w(-5,-4,-2,1,4,-1,-7,-5,9,-5,-16,-5,1,-1,0,-10,7,3,2,-15,-3,-7,-2,-6,-3,-10,-6,-9,-4,-7,1,17,4,23,3,-7,20,2,-2,10,2,-1,-2,0,7,-6,-1,6,4,-23,5,4,-3,-6,1,4,-2,2,-10,-5,9,0,2,3),
	    22 => w(0,2,-1,-8,-10,-4,-10,-3,-2,8,19,1,1,12,0,-2,-3,-10,1,-9,-2,4,-9,6,-6,-10,-6,-1,-2,7,1,-2,17,-3,-3,-8,1,-1,-3,-14,7,3,-8,4,-2,-3,-1,-3,3,6,0,2,1,5,9,-5,-17,-3,-6,-6,-2,-2,-4,-4),
	    23 => w(-2,10,-4,12,2,-2,-3,3,-2,9,-3,-7,4,-8,7,2,-5,0,2,5,28,2,1,3,-7,-12,-1,4,2,12,-12,19,1,-14,-10,6,4,-11,0,-1,6,-9,-9,6,1,2,3,-16,8,9,5,5,-10,5,5,-4,8,8,0,7,7,-3,4,-9),
	    24 => w(3,-4,-4,-14,-5,2,3,-4,1,-4,7,-6,4,-3,-1,11,-6,2,8,0,-1,-1,1,1,-2,-2,-5,-7,2,11,-2,-1,7,-8,2,-4,2,3,-2,-11,-2,9,8,-5,3,-1,7,-9,2,1,-14,-10,2,-7,-9,1,0,-6,2,-6,-1,-1,-8,-3),
	    25 => w(3,2,-6,-5,-4,0,-1,0,-6,-1,3,13,-7,0,-5,-11,0,-6,11,-13,2,-5,2,11,-3,0,2,2,-4,2,-1,-8,5,-2,-4,-10,4,47,0,-8,6,2,1,-3,-9,-1,12,2,4,6,-5,0,1,-4,3,1,-6,-8,-2,3,4,-7,-2,-3),
	    26 => w(5,9,-2,-9,2,-5,-4,-10,-11,6,-6,0,-2,-8,1,1,-8,-12,-1,-12,-8,-5,-10,-8,-2,-10,-7,-8,3,-9,-11,-3,7,-6,3,5,-7,1,9,16,1,14,13,6,3,10,-4,2,-6,3,-12,3,7,-2,-9,-2,-12,-1,-7,8,0,3,-3,-5),
	    27 => w(-1,-5,8,5,1,-5,1,-5,-4,3,7,-34,-5,-11,0,-3,-2,3,-2,14,17,-1,-3,-2,0,-4,1,1,0,9,6,-10,7,0,12,-6,-3,0,6,-4,1,-5,-7,-4,-4,0,6,-1,-20,-1,51,-63,8,2,-3,5,-2,6,-1,-4,7,-4,-5,-2),
	    28 => w(-7,-12,-17,7,-3,0,-3,0,-6,8,-20,-10,-3,-7,-6,-15,11,5,-1,11,-7,0,-21,-17,1,-3,3,4,-6,-40,22,2,0,1,-39,-14,-7,-4,-1,15,3,8,22,8,-15,-1,-3,7,4,-2,1,13,3,8,-9,2,-3,-1,0,-14,-12,0,9,-8),
	    29 => w(2,1,3,-42,-9,1,21,4,-3,-9,5,0,-2,4,-3,-58,-13,12,2,0,-11,-3,1,-19,1,-2,9,10,3,-5,2,5,7,-25,3,-15,-2,-2,2,-5,-16,-8,-9,3,0,0,15,-6,2,-42,-17,5,-10,20,5,1,-11,-7,9,7,-32,-2,-18,19),
	    30 => w(-7,1,2,-8,1,-16,-1,-4,5,3,-1,5,8,0,4,0,16,16,-1,23,5,14,6,-4,-2,8,-2,4,2,-11,-22,-1,3,-3,31,-6,1,3,-9,-1,18,-1,-16,2,-12,-10,-4,-8,-13,-5,-3,2,-3,8,13,1,2,-10,4,-2,7,1,-4,-1),
	    31 => w(13,0,-7,-11,-7,-3,8,4,1,-7,-8,-2,-2,-22,-9,1,5,-22,4,-22,-22,4,12,0,7,-6,0,-11,5,-6,-5,-30,-4,17,-21,1,5,0,-2,0,16,-4,-14,13,-12,-6,-2,35,12,11,-13,5,-12,-3,-9,-11,-17,-1,-3,7,-12,-3,-2,-28),
	    32 => w(7,-1,-2,5,19,1,14,-11,3,16,-7,-2,6,-1,2,4,15,-5,-7,11,-2,-1,8,2,-1,-5,9,25,6,9,16,3,2,4,0,0,15,-2,2,0,-2,12,24,-6,4,-4,15,1,-4,1,8,7,-1,1,-8,-2,-1,1,-1,1,11,5,-5,2),
	    33 => w(-1,-1,5,-8,1,1,-13,-4,2,-2,-16,1,15,3,-5,4,-2,-2,-4,8,7,-12,3,18,7,6,-1,7,-1,7,-1,-2,-7,-4,5,5,-12,2,9,0,-3,0,-1,0,8,2,3,6,-5,35,5,-1,5,-5,-7,-7,13,6,-13,6,-4,-1,-14,-16),
	    34 => w(19,-2,1,-9,-9,8,-6,3,-7,1,30,-2,9,0,-1,-4,-7,9,1,-5,-4,1,9,-19,5,-3,-13,-2,3,2,-11,1,-14,14,5,-11,3,0,2,-2,-8,-8,1,-10,0,9,5,10,-6,-3,0,-8,5,-12,-2,5,5,6,12,25,-4,2,1,0),
	    35 => w(-5,-5,15,27,-3,4,1,-3,-3,3,-31,4,-1,-3,1,5,9,9,2,20,10,9,-7,-2,-1,-2,0,4,2,-1,-12,10,3,-1,-11,-16,-6,2,-9,2,1,4,-2,1,0,-1,1,-16,-6,11,20,7,5,-5,-15,-8,-1,-1,1,2,-2,-7,3,7),
	    36 => w(-2,0,-9,-24,-3,6,2,0,-1,-7,0,2,-3,-2,12,-5,-22,-1,-7,-2,-3,3,-31,-1,-2,-5,-4,-7,-3,-16,-8,0,1,57,6,-5,-15,10,1,0,-29,3,-1,-14,-4,1,-27,-12,0,2,-12,0,-1,-12,11,-7,0,-10,-2,-1,-3,2,4,-7),
	    37 => w(-7,14,-1,6,2,0,-6,-5,3,-1,-3,-48,-7,0,-26,16,0,0,-4,-6,-16,3,-4,-7,-2,15,-7,-8,0,-8,1,-2,25,-6,62,-4,-12,-5,0,-3,2,10,-2,5,-8,-8,51,5,-6,-8,-15,1,-2,2,5,-2,-12,5,0,-3,-4,-9,-1,-5),
	    38 => w(-4,-7,-3,-5,10,-6,-1,-4,-5,14,10,-1,-1,2,2,-2,-3,-12,-1,-1,-1,-5,-13,-9,-12,75,-13,-2,1,-8,-2,-2,7,-5,0,12,5,2,-6,0,4,-21,46,-7,-4,-4,11,-2,6,12,68,0,-18,6,-4,34,-24,-7,-2,28,3,1,-7,-3),
	    39 => w(2,2,-1,-27,-1,3,-3,5,1,-3,1,-23,4,1,3,0,-3,-1,-1,4,-12,2,5,-2,-6,3,3,3,5,7,-6,9,-5,3,17,-1,-46,13,4,-5,-7,-9,-10,-6,-16,2,4,1,6,-3,18,9,5,1,-26,-3,0,9,0,-2,0,-7,10,3),
	    40 => w(5,0,4,33,-4,-2,-2,7,3,-6,1,0,-3,-4,7,4,1,1,-9,-2,6,-1,5,2,-3,0,40,3,1,3,3,7,12,-7,-8,1,13,-28,-3,-4,28,9,-1,8,4,-6,8,-4,9,-6,-1,6,-5,0,13,4,4,-5,7,-4,-5,0,-7,-2),
	    41 => w(-15,-3,6,-4,-2,1,-7,3,-1,7,1,0,-11,-2,46,11,7,4,-18,6,11,51,1,-17,11,-1,-8,17,5,7,-7,1,7,12,2,6,-11,7,-7,-1,14,7,1,-1,5,4,-8,19,-6,4,11,0,2,-3,4,6,15,6,-6,7,-4,4,13,-6),
	    42 => w(3,8,-1,5,-8,-1,-7,-5,-11,28,-11,-3,-6,8,3,1,4,5,3,4,1,-2,7,-6,3,-26,18,6,-1,5,-6,0,-5,7,2,12,3,-1,-8,13,0,13,2,-3,4,13,5,0,3,2,-12,1,1,4,0,-25,27,-1,10,6,6,6,5,-1),
	    43 => w(-4,3,6,4,3,-1,-5,12,28,-7,8,-1,-2,8,4,4,4,-2,9,12,-1,-7,13,-2,8,-3,4,1,-4,-13,-10,-4,-2,-1,18,4,31,-2,25,-4,6,4,0,0,1,1,0,-14,4,5,17,12,1,4,-6,2,-35,-3,3,2,-2,7,-2,1),
	    44 => w(-2,-3,4,1,14,2,-1,-2,2,6,0,-11,1,21,2,-1,-5,2,-10,-4,-2,5,8,1,0,1,-1,-6,6,-14,-13,0,-6,-3,0,-1,19,-5,3,10,2,-17,14,1,-5,4,4,1,-6,2,3,-1,2,0,1,8,5,0,3,3,-13,1,2,-6),
	    45 => w(12,-3,3,-4,0,-2,14,-7,1,0,18,5,2,11,-4,-6,1,1,-4,9,0,-9,-2,0,-2,-12,9,9,0,8,12,0,2,-1,3,5,0,-1,-1,-17,-1,-3,3,1,-1,2,0,0,2,12,-6,4,2,-1,2,-7,0,-13,-4,-1,7,6,-19,-2),
	    46 => w(10,2,4,13,-1,7,3,-5,-8,3,11,1,-1,10,0,1,-6,-1,2,14,5,1,2,-1,-1,3,6,4,2,-2,0,0,-14,-12,3,6,3,2,3,5,6,3,2,-4,3,18,0,1,0,-2,0,27,2,-4,5,4,9,2,3,-5,8,2,-6,5),
	    47 => w(5,10,-1,-4,-4,-2,3,-7,1,1,16,6,5,-7,4,2,3,1,0,11,20,1,-2,5,2,1,3,-20,3,-1,6,-3,-2,14,-9,10,3,5,-17,1,6,4,10,3,-6,9,0,13,-5,-2,1,1,-9,3,-1,-35,15,-5,1,4,48,1,-9,-1),
	    48 => w(0,1,2,5,13,-1,-3,-1,-1,1,4,-6,-1,3,-2,-5,8,-6,-5,8,-6,2,4,-3,-4,3,0,4,3,-12,-3,2,-11,-5,-4,-5,4,1,-5,19,-2,0,-1,3,-5,-1,2,1,-16,-1,3,8,-4,-2,-5,5,0,2,-1,10,-4,6,2,3),
	    49 => w(16,-5,-1,-10,-5,0,3,2,3,-4,4,1,9,5,-7,-8,9,10,-1,1,2,3,-3,1,0,-5,14,4,3,2,8,1,-2,-5,-1,5,0,2,0,-1,-4,0,3,1,-1,-4,-4,-6,-1,10,1,5,3,8,-4,-3,-12,-10,3,2,1,-4,-37,5),
	    50 => w(-17,2,4,5,-5,4,-7,-1,-3,3,2,-6,-4,6,-5,-2,-6,-9,-2,5,-3,8,-1,-12,-2,6,-1,-5,3,-11,-4,2,2,9,8,-9,-4,3,-1,-1,2,1,5,0,4,8,-1,3,-1,-6,-8,5,8,-8,13,0,7,6,0,6,-4,-6,-4,3),
	    51 => w(-6,9,3,2,-5,-18,-5,3,1,3,-11,-2,3,5,-1,-5,-6,1,7,0,-6,6,3,18,7,1,0,-8,7,6,-10,-5,1,3,-4,32,5,-3,-16,4,9,7,-9,7,-2,1,1,1,-6,6,-2,1,-5,0,-10,-24,5,-6,3,-2,-19,0,-2,-8),
	    52 => w(5,8,3,-3,-5,-1,-1,1,3,9,-3,-2,0,-3,-2,1,14,1,1,-3,-5,-3,5,-3,7,4,2,-1,2,-7,-12,14,3,0,0,-13,-2,7,44,-10,1,10,2,19,4,-4,1,-16,4,-4,4,-3,1,-1,4,0,-2,-1,-3,-11,-3,8,-7,-5),
	    53 => w(-11,11,-7,2,5,9,6,-17,9,8,-8,2,3,0,0,-7,1,5,1,-5,2,-1,-1,3,1,-1,10,-8,3,4,-8,6,2,-3,-1,6,-1,-1,-31,6,-3,-2,-10,-2,0,5,4,1,-2,0,-3,-1,6,6,-4,9,-13,7,2,3,0,7,1,1),
	    54 => w(5,2,-5,8,6,-3,2,-16,0,1,-4,9,2,7,1,0,2,15,-5,-10,-18,2,-2,0,-1,0,-2,8,0,-1,15,0,4,-9,4,-2,2,5,-1,4,-3,5,-4,1,21,-7,-3,-2,0,-7,4,-5,-1,3,-2,3,0,8,1,0,-12,-1,0,0),
	    55 => w(16,11,5,1,5,3,7,9,-1,-3,-3,3,3,8,-4,0,52,11,-11,0,-6,0,-3,-4,1,0,0,4,0,1,13,6,2,-31,-1,-8,2,-5,1,0,-10,2,-12,0,-1,5,-2,-6,-2,-1,0,2,-4,13,1,12,-17,1,-2,10,9,-2,-1,0),
	    56 => w(-6,0,7,1,-7,0,0,-1,5,-33,2,-2,3,-10,-4,5,-24,-2,0,-3,0,-5,-5,5,0,4,-20,-13,-22,2,-19,0,-3,4,15,-17,-7,2,7,4,-16,9,-24,0,5,-1,-5,-13,-20,5,1,-14,-3,-3,-10,8,-16,-1,-3,17,-5,1,5,6),
	    57 => w(-17,0,3,-4,3,0,1,-7,-5,1,-2,-7,4,0,-3,4,13,-10,2,-1,1,10,-10,13,-5,-9,-11,-4,3,30,0,14,0,-10,-3,-13,2,6,3,1,5,-3,12,-4,-3,-5,1,4,-1,3,-14,4,-8,-11,-7,0,5,-7,-8,-29,14,-22,5,11),
	    58 => w(7,-1,-5,-2,9,18,3,-24,-8,4,26,-1,0,-16,-2,-4,-7,1,2,-16,3,4,-6,0,8,-21,9,4,13,2,17,1,10,4,-6,-36,-11,-3,5,-11,-8,-5,-19,9,-12,18,-11,6,-9,-1,-4,-8,-1,3,-19,-11,-12,4,-7,-2,-13,5,-5,0),
	    59 => w(7,9,6,2,1,-6,8,-13,10,2,-19,-8,-3,-6,-2,-1,-4,3,-20,3,-4,1,-1,4,-23,6,10,15,1,3,-6,-1,-3,6,-32,2,-10,-11,-18,-3,10,-2,6,4,13,1,-5,-3,-5,-17,9,3,1,2,-4,6,16,-1,-1,14,7,-29,8,3),
	    60 => w(-4,-5,-4,25,10,-1,17,4,1,7,5,-2,-8,0,13,1,-5,0,-23,3,-2,1,-28,2,1,2,-8,5,0,-2,-5,1,4,-1,2,-4,3,-11,2,2,-12,-5,-2,-3,2,0,-5,2,6,-6,-26,4,4,-11,-1,3,5,-3,19,1,0,-6,-3,-5),
	    61 => w(-1,5,-4,-7,-3,2,-2,2,-2,0,1,-9,25,-1,5,-7,-7,5,46,6,-2,10,-4,5,0,-12,-7,14,-2,3,0,3,-2,6,8,6,6,-27,1,11,6,2,4,2,8,2,15,3,1,-1,8,-5,1,1,-5,1,0,-5,0,-4,-7,7,0,-21),
	    62 => w(4,-7,-5,-9,0,-5,-1,-2,5,31,-3,-1,6,16,-1,5,-2,1,0,0,1,-1,-56,-18,16,29,-31,-1,0,-4,-3,1,-4,-8,7,-5,8,1,-8,20,6,-54,0,3,3,1,1,1,10,2,-9,-5,17,-14,12,8,1,0,-1,24,-4,2,-4,-1),
	    63 => w(-2,4,4,-4,-3,2,-2,-4,-4,1,7,-63,2,6,1,-2,-3,0,1,8,5,-4,40,0,-2,1,-2,1,2,7,27,8,4,5,9,-7,2,-8,-7,-1,3,7,4,-15,3,-2,-3,4,5,-2,-34,-23,7,-2,-60,3,-1,1,0,0,-5,0,3,7)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;