library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core16_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core16_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core16_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(6,6,-12,-6,2,0,-1,3,0,-3,-1,4,0,7,-3,0,-9,0,3,4,-1,4,0,8,6,-32,-1,-2,12,-2,-16,8,-4,1,-5,39,-5,6,-11,6,-5,2,-15,1,-6,3,-2,-6,-25,2,4,-5,-4,1,1,-11,-21,-21,0,-13,-7,0,14,1),
	    1 => w(-2,-16,2,-12,-7,-24,-10,-24,-8,32,-3,1,0,-6,0,2,-2,0,3,-7,-4,0,-1,1,-4,1,-5,-14,3,10,12,-4,2,-1,0,10,-6,6,1,-1,-11,-5,2,-2,1,-3,-3,1,-4,9,-8,7,-44,-3,-4,1,-2,-15,2,4,16,1,7,-11),
	    2 => w(5,0,9,13,1,-9,-3,-9,21,0,-6,3,-13,4,-2,1,-2,-7,17,2,6,-5,1,4,4,-5,-4,-9,3,11,4,-1,4,-2,-13,-6,0,4,4,5,-12,-7,-11,3,14,0,1,-12,-4,1,3,6,-3,1,1,3,0,6,-4,-3,28,-5,18,2),
	    3 => w(8,-13,-6,0,3,-11,-13,7,3,9,1,-2,2,-10,-4,3,-7,8,-18,-6,-3,2,-4,6,-25,-3,1,-4,4,-1,4,4,6,-11,2,9,3,-4,-17,0,-19,7,-3,-2,2,-4,-2,6,-4,-9,0,-1,-8,22,4,4,12,-3,29,2,7,2,-6,4),
	    4 => w(-5,-8,1,2,5,0,-1,-3,1,4,-14,-11,-1,0,7,-12,-4,-8,-4,4,-1,-3,-9,1,-5,6,-5,16,0,3,-2,-2,-9,-4,-16,1,11,-13,-7,17,1,-8,-2,-3,-13,6,-13,6,9,-3,-8,4,2,0,2,9,10,9,1,0,4,1,7,11),
	    5 => w(2,-12,5,-29,-1,1,9,9,12,-5,-18,-1,5,1,5,-29,-3,1,-9,6,-5,-4,-2,-2,1,-9,5,0,3,-7,4,3,-7,1,-7,-11,-1,-8,-1,-2,-11,7,6,-5,-5,-1,-3,-1,1,-13,-5,-4,2,-3,-3,-1,14,-4,0,-6,-3,-14,-58,2),
	    6 => w(2,-6,-1,-11,-10,-12,11,-10,-17,-6,1,-6,12,7,-2,0,11,10,-3,8,-5,-9,0,-4,0,-4,-2,1,-2,4,7,3,-2,12,1,-12,1,-2,4,-5,28,-4,-8,14,3,-1,-2,-1,-3,-14,4,-6,-1,2,13,-8,-2,-30,-5,0,-1,0,3,1),
	    7 => w(-17,8,-2,-2,-10,7,1,3,-2,-16,-13,6,1,-4,-14,7,-5,-3,5,4,-4,18,4,9,6,-4,5,-4,-5,8,-9,12,1,10,-3,2,-6,1,-6,9,8,4,-9,-5,-8,6,-6,20,-3,4,-7,-7,15,3,-7,0,9,-10,-7,2,-6,1,5,-5),
	    8 => w(-3,-6,-5,3,7,-1,2,15,0,6,7,-9,5,10,9,12,-1,8,-1,8,-4,-2,13,4,3,0,28,-2,-2,6,-1,-4,-9,9,-9,-4,31,-2,1,6,19,-11,7,-4,3,15,-3,3,10,-4,25,-5,11,7,6,-6,-20,-10,2,-2,-3,-1,12,-19),
	    9 => w(-3,-4,-9,6,9,-2,-16,-8,8,-10,16,18,-4,-1,20,-1,-3,9,2,10,0,12,18,5,3,17,-2,-6,-5,-2,6,1,16,33,4,-12,-19,-17,-3,-2,-8,-4,2,-2,-9,3,0,9,-6,5,21,-8,5,-1,6,-3,0,2,20,3,-14,10,6,-1),
	    10 => w(-9,-2,-22,-7,-8,9,-9,-9,-15,5,18,-4,3,13,-6,11,-9,-2,-1,-13,-8,-3,-9,22,2,-16,-4,-2,7,4,0,5,1,-31,-3,-25,-12,-7,-15,22,11,31,-17,17,1,-9,0,-2,2,-13,-15,16,-6,9,9,10,36,-8,-2,-1,-1,-7,-2,0),
	    11 => w(-5,7,19,13,-4,-2,4,-9,3,-3,-4,19,14,7,-2,-1,-11,2,4,-1,14,5,5,5,-9,11,-1,-3,-3,5,23,-35,6,13,5,-7,21,-14,-17,9,10,9,16,-28,11,10,-7,-20,7,9,11,32,7,-2,-9,10,21,-5,2,-2,28,7,14,9),
	    12 => w(6,-2,-12,-7,-2,-3,-3,2,1,7,4,0,8,0,1,2,12,-2,5,-3,0,-1,10,-9,-3,-1,-10,-5,0,7,8,5,5,9,-2,3,3,-2,-4,1,-5,-2,0,5,-2,2,-11,2,-6,2,-4,6,0,-7,-12,-2,2,-11,10,-11,-6,5,-2,-14),
	    13 => w(2,2,-4,9,-13,-2,-8,-2,7,5,-2,9,-10,0,5,7,-4,-2,3,5,-7,-6,-3,-15,4,14,1,5,0,14,5,-1,7,-1,-9,13,0,6,-1,1,5,6,-1,2,8,4,-1,3,-1,15,0,-1,0,0,2,4,2,-7,-5,2,-10,2,6,-3),
	    14 => w(3,11,5,3,-5,-1,-3,12,2,-1,3,0,-4,2,-1,6,0,1,2,-3,-4,7,2,4,2,-8,-19,-1,-3,5,-3,0,7,-4,-4,1,0,-3,2,-4,-4,-8,9,-3,3,-7,-11,3,0,3,-15,-6,4,2,1,9,-11,3,2,-9,0,-1,0,1),
	    15 => w(3,-10,-6,2,2,3,-5,19,5,1,-5,12,-3,8,7,2,-7,-12,15,6,6,-6,-12,-3,7,1,2,4,2,-7,14,-2,-2,2,-1,6,9,3,-2,0,-9,-4,-6,-15,8,-1,4,-2,5,1,23,-11,2,5,2,-2,-22,-2,-4,1,8,0,3,-4),
	    16 => w(-1,3,6,4,6,1,-10,11,1,-2,6,2,-1,3,1,7,15,7,-2,-2,0,1,-5,-2,1,1,26,-3,0,0,-4,-3,1,-5,11,7,-12,50,-2,1,39,-1,16,10,4,-5,-1,18,5,-2,17,7,-32,8,18,3,2,-5,10,5,8,12,4,7),
	    17 => w(-2,7,4,1,1,0,6,4,-5,6,-3,7,0,-2,9,8,-2,-2,-4,0,-3,-1,-4,0,0,0,-4,2,0,26,-1,5,5,4,3,-4,-3,110,1,-1,3,5,2,-5,4,0,2,0,4,3,1,5,4,6,1,-1,13,1,1,1,-1,0,0,10),
	    18 => w(6,-6,1,-6,-3,9,11,10,1,-30,11,0,-3,7,-1,-4,-1,-4,-1,0,-7,2,11,2,8,27,-3,2,3,-11,9,1,-3,0,-7,-2,-6,2,0,-3,1,1,29,-1,1,0,27,-1,-1,3,-14,-1,1,7,-8,22,17,9,0,10,-5,4,2,-1),
	    19 => w(-5,-9,-9,-17,1,0,-2,-4,3,4,13,1,5,-2,5,1,1,6,2,8,1,-7,10,1,6,-3,0,8,1,-1,0,-15,6,0,9,2,10,-1,7,0,18,5,9,6,9,10,7,5,9,19,6,1,1,0,-3,9,-4,2,2,1,9,-8,18,3),
	    20 => w(-9,23,-1,-1,1,0,-4,-6,0,-9,-2,-1,1,-4,4,-13,7,2,2,-5,5,15,1,-1,8,-16,-2,6,-3,11,-13,0,11,2,-14,-10,3,-2,0,-1,-3,-2,-11,-1,-1,-38,-2,-16,-13,1,-2,1,-2,3,-1,-28,-6,-4,0,4,-6,-18,-25,-17),
	    21 => w(5,17,2,7,-6,-5,0,-28,11,21,-3,-1,-3,9,5,14,5,-11,-3,-23,-6,1,-6,-12,0,1,-14,8,10,-16,-3,15,5,9,1,35,8,-14,-8,3,9,5,4,5,-1,-6,0,0,-1,15,-21,2,-48,-20,-3,-10,2,4,-4,-13,18,-3,-8,-11),
	    22 => w(14,0,13,16,-7,-23,-7,-21,-1,-2,1,-1,-6,-1,21,0,30,-3,17,11,-15,-20,0,-6,1,2,2,22,7,15,-7,1,2,11,-7,-6,7,-1,0,-5,-12,7,9,-2,39,8,5,-18,-4,15,2,1,2,5,0,3,13,-4,-7,3,12,22,-5,-2),
	    23 => w(-8,-16,-5,-2,-3,-13,-20,19,1,8,-1,-1,-1,-27,0,2,-22,14,16,-13,5,-5,3,-13,1,-1,5,27,-3,-9,0,26,-9,-3,-12,12,2,-28,9,-3,-14,0,-25,0,-2,4,3,2,-3,2,-7,-4,-6,24,-8,22,-16,2,18,-7,-1,7,3,-4),
	    24 => w(-6,-13,3,7,10,1,-5,-11,-4,-9,-11,-7,-3,-2,-1,-8,9,-5,8,5,-5,1,-9,1,-5,0,-9,6,-3,-14,4,-14,-7,-5,-12,7,5,-12,-4,23,-5,-2,-3,-7,-8,-1,1,22,9,-2,-3,5,-4,-1,-11,-5,-6,-8,4,-10,-10,-11,15,6),
	    25 => w(-5,18,7,-20,-2,1,-4,10,-6,-5,-3,-2,8,-2,2,-15,0,-4,-18,1,4,5,-5,-1,-1,-8,16,2,16,-5,13,-7,-6,-15,1,-4,-6,1,4,8,-2,7,7,-2,0,-3,3,-4,-5,-12,1,-6,-4,1,-2,0,10,-4,4,-12,3,-11,-21,7),
	    26 => w(-4,-4,-4,-7,-13,-5,19,-4,5,-5,5,-1,-19,6,-4,-5,-12,-17,-1,6,2,-5,3,2,0,-9,0,-2,0,-11,-22,1,-4,-8,6,-13,-2,2,6,-12,-6,-1,-12,9,2,-5,-3,-8,-3,-4,4,-2,-2,-1,5,-12,12,-33,-11,3,1,-9,6,0),
	    27 => w(0,11,-8,0,3,-2,-5,7,-3,-12,-4,-8,3,-19,-11,4,-6,-6,2,1,-11,-1,1,1,1,-3,-4,-6,-2,3,-13,-14,17,11,3,16,-2,0,-7,5,3,1,11,9,-3,-1,-6,-15,1,0,-6,-8,-8,-1,7,-5,4,-11,-6,-3,-19,10,-3,-31),
	    28 => w(-23,-2,3,2,15,0,1,4,0,-3,14,11,1,1,5,0,6,-2,22,-3,0,0,-2,-6,0,2,-1,-14,1,-7,-21,4,-7,5,0,5,7,18,-15,7,-5,19,-8,5,16,-1,18,-8,1,6,5,11,1,3,4,23,18,3,9,1,16,4,-9,-13),
	    29 => w(-3,3,-2,4,-2,2,-2,22,-8,11,15,14,5,3,11,5,17,-7,17,-3,15,-2,3,4,-1,-7,-6,13,-1,9,6,6,-1,-9,5,-10,-5,25,-1,14,8,9,9,2,16,-2,18,5,-3,1,-11,-1,15,0,-4,0,21,6,5,-39,22,20,-12,19),
	    30 => w(3,0,12,24,-4,5,12,4,-37,8,14,-7,-37,-10,0,0,11,10,-1,-19,-21,-9,7,15,1,2,-10,-9,0,20,-3,0,7,-24,-7,25,7,0,3,-5,-23,5,-7,6,15,14,-3,8,10,-1,4,5,2,2,-1,-14,15,14,-1,-2,-12,3,-13,4),
	    31 => w(11,15,0,-3,-4,4,6,4,-5,3,-17,-9,0,13,5,2,3,-10,32,0,-13,-5,8,5,29,0,-1,0,3,3,-3,9,-4,-13,8,3,13,-6,14,3,-11,-14,-9,10,0,-9,-2,-6,4,-12,1,9,-5,2,17,28,-10,3,20,-6,23,24,-6,11),
	    32 => w(2,7,4,-14,7,-1,4,-10,-3,-4,-12,-1,-3,-2,-7,-17,7,-4,6,7,-5,-2,0,1,-3,1,-24,1,-3,-6,11,-1,-9,11,-6,4,-6,1,-1,9,-17,1,-1,-1,-8,2,-16,7,-6,-3,-3,-1,1,1,-4,2,1,5,-4,3,0,-6,5,7),
	    33 => w(2,9,2,-9,-1,0,8,-2,-2,-4,3,-5,-8,2,13,-14,-7,-9,15,-3,1,-2,-7,-5,-3,39,17,-9,7,-4,3,-2,10,-1,4,-4,1,-1,-4,-3,-6,2,-1,1,-2,-3,11,9,-1,-14,-5,-1,0,-3,-1,-4,-2,-8,-1,-4,-3,-1,-55,-4),
	    34 => w(-1,1,-2,-3,-4,2,-7,2,-7,9,-10,-5,-9,-5,-3,4,-3,-5,-2,5,-1,5,3,0,1,7,-28,3,0,-8,-14,0,-9,0,7,-10,-1,-5,-3,-19,-3,-19,13,-2,4,-3,-3,-4,3,-4,-16,4,-1,1,11,-3,-22,8,-3,-11,-6,-2,3,6),
	    35 => w(2,9,5,-3,6,-2,4,-5,15,-9,-5,20,4,-2,-7,1,-6,1,1,3,2,3,-5,9,1,4,-1,0,1,3,1,-2,2,3,-7,16,11,-1,-5,8,6,0,8,-3,-3,-5,0,-3,0,3,4,2,-1,-6,1,-11,11,-7,-5,2,-15,2,-1,-7),
	    36 => w(11,5,5,-40,-18,-3,-5,1,1,-43,-2,6,2,-2,1,-10,-22,1,-2,4,-2,2,9,10,2,2,-6,-17,18,-2,-6,-2,-8,-8,15,-17,0,0,1,0,6,15,15,-2,3,-20,-20,3,-15,3,11,11,16,14,-2,-12,1,-1,-4,-4,3,30,2,3),
	    37 => w(9,2,9,11,-10,0,1,-3,4,-2,23,4,-6,7,7,-9,-7,-1,-19,0,-19,-19,-1,-1,0,3,6,0,0,11,4,-8,-2,-18,-11,-10,-16,1,-2,-9,0,7,-6,14,-7,1,10,9,-6,-8,7,4,6,6,-2,1,-6,-13,10,-20,16,19,-4,22),
	    38 => w(1,-2,1,8,3,-5,4,6,-3,6,-4,-1,5,-1,3,3,-3,-7,0,2,8,-40,-2,1,8,-8,27,26,1,-21,12,2,-7,1,14,-15,12,3,0,8,-8,-7,2,-8,3,-15,-18,-7,-8,0,-5,8,-2,6,0,1,-12,21,11,6,-8,3,-16,-4),
	    39 => w(1,12,-3,13,-2,4,2,1,-4,2,5,23,6,13,0,10,14,-12,2,-2,-23,4,1,1,10,3,5,-1,4,-2,0,-5,-4,-3,-20,1,-13,23,-1,-4,5,4,0,-1,5,4,6,7,-16,3,3,15,-17,-3,8,-9,8,-3,-5,19,-6,-12,-13,-23),
	    40 => w(-48,5,-10,-10,-2,0,3,0,5,-6,-5,-4,0,0,-2,-2,5,2,-8,-5,-2,5,-5,2,-3,5,-11,3,-2,5,13,-4,6,-4,6,-13,-21,4,-4,2,-6,-1,8,0,3,-63,-2,-4,1,8,1,-6,-3,-1,-3,-1,2,31,-3,25,-3,-5,-8,0),
	    41 => w(-5,1,-1,4,6,-7,10,2,-16,15,-1,-1,0,-6,2,-6,8,-7,-3,-1,3,1,-1,2,-1,3,7,-8,3,14,1,-12,-2,-4,3,-10,1,2,10,2,2,1,-18,-9,-3,1,0,5,-2,-3,6,-6,-7,-5,-4,3,-5,-4,15,-7,-6,5,-1,3),
	    42 => w(5,-1,-5,-7,3,19,-3,-5,29,-1,-6,2,5,19,-11,-2,9,-14,10,2,5,12,-5,1,7,3,-1,-5,-5,14,4,0,-5,-2,5,-15,-3,-6,-3,-4,6,-3,-7,4,7,18,-4,33,-2,2,11,5,-2,-6,1,-9,-5,17,8,1,-23,-3,-3,-6),
	    43 => w(3,-7,3,-1,-4,-28,15,-1,-1,2,1,4,-1,-18,4,-1,-8,26,-11,11,5,-6,6,-1,-33,6,7,-2,1,6,-6,-5,8,-10,-15,8,1,-1,-2,0,-14,1,-5,-2,6,-7,-2,-16,-5,6,2,3,-5,-1,-2,3,-27,11,10,-17,-1,-6,2,-2),
	    44 => w(-9,1,-4,2,10,-4,-2,4,-2,-7,-2,1,0,1,3,-1,5,3,5,13,-3,4,0,-9,-1,0,2,6,-3,14,6,8,-4,4,5,6,3,0,1,-6,2,2,6,-17,-10,-5,6,-10,5,-3,-1,-3,1,1,4,-4,-9,2,-1,-11,13,2,3,8),
	    45 => w(-7,-4,-12,-10,5,0,-5,-2,1,4,-12,2,4,8,0,7,-11,16,5,1,-3,-2,-4,4,1,-2,33,6,1,3,10,-3,5,3,0,-12,-8,1,-7,9,-5,1,0,4,6,-1,1,4,1,9,-9,3,-2,-4,-4,-2,9,-19,-9,-12,-1,-1,4,0),
	    46 => w(-1,-1,-4,4,1,1,1,-3,-7,4,11,-3,14,-6,-3,0,-6,10,-1,-17,17,-8,3,6,0,2,-2,2,-3,3,-5,0,11,20,2,6,-1,-3,4,-4,4,4,-4,-2,3,7,4,0,-6,-5,2,-4,-4,-1,5,3,1,-11,-4,-1,10,-8,8,-1),
	    47 => w(-11,-13,-1,1,1,14,5,-4,-1,-1,3,0,-6,-7,3,2,-1,-13,6,-6,8,4,0,7,5,2,0,-23,-1,6,6,-5,-4,12,-1,3,5,-4,-5,8,5,-14,-7,-3,2,-4,-2,23,0,4,0,-4,-5,2,2,30,2,0,-16,-1,-12,7,-1,-2),
	    48 => w(-2,6,-5,-4,8,-1,-3,0,-4,6,-1,2,4,2,-2,7,-9,0,-3,3,-1,6,0,-3,-6,18,3,4,-10,0,-19,7,0,-2,5,8,0,4,8,-7,-2,4,-13,-10,1,-36,2,31,-23,6,-2,-4,3,5,-2,-17,-27,12,-4,2,1,4,-3,6),
	    49 => w(7,15,4,-12,-6,14,6,26,0,-27,2,1,-1,-1,1,2,7,-1,-1,4,-4,-2,-1,4,-2,-1,-2,4,1,8,4,1,-1,-1,0,29,-8,-5,20,-5,-9,-3,-23,-4,-3,-3,-6,5,-3,2,3,12,51,-8,-2,1,-8,-8,4,2,-3,-8,2,-1),
	    50 => w(-1,0,4,-3,-9,6,-5,-13,28,4,-4,-3,-8,16,-7,0,-16,-5,-11,10,11,8,-1,-2,2,-2,1,-8,0,15,5,1,2,11,-9,-19,-3,4,4,2,-7,2,1,8,-53,11,-2,14,-8,-3,5,7,-2,4,-7,2,-3,11,-14,4,-29,-10,18,13),
	    51 => w(-2,-5,7,-2,2,4,-2,0,3,9,-1,-2,0,5,1,4,-12,15,-7,-3,-7,-6,0,4,-33,-4,1,7,3,-8,-4,7,10,-1,15,14,-5,-4,-10,1,-48,-19,29,2,3,7,-9,6,-4,-1,1,0,-1,22,-1,-9,-11,-4,-8,4,-9,-8,8,-5),
	    52 => w(-1,5,-1,4,-39,1,-9,6,2,18,3,0,13,-7,-2,15,-12,9,-12,-7,1,-3,-9,-9,0,-1,-4,10,-8,11,0,-2,10,8,12,-6,6,-20,-2,6,1,-1,2,13,5,-2,-7,9,5,1,4,-4,0,5,5,-3,-2,4,-4,-10,3,2,2,3),
	    53 => w(1,5,-1,4,1,-2,-2,1,-16,-1,10,2,-16,-5,1,6,17,0,9,1,-14,7,-2,-7,7,-3,-8,9,-6,6,-3,-8,4,-6,-2,-5,-5,-10,-1,-6,10,-1,-4,7,-4,0,6,2,1,3,-4,-3,-1,-9,13,-7,-4,1,4,-12,-3,-10,4,8),
	    54 => w(2,-3,7,3,10,0,4,-4,-5,0,-21,-1,-11,-17,10,-1,-11,4,0,-1,-9,1,-14,-2,-3,-8,-4,-7,-1,0,6,-1,3,10,-16,-46,4,4,-1,-2,-20,20,8,5,2,8,1,-2,-21,10,-2,4,-13,-7,-11,14,2,5,14,-7,2,-1,-1,-3),
	    55 => w(-2,-5,6,-10,-1,-2,2,-13,2,0,-4,2,-7,-7,5,-3,2,-7,-4,11,0,-9,9,1,-2,-9,2,1,-5,1,12,-4,-4,-4,6,4,-9,-15,1,-1,-8,2,-8,0,-1,6,-5,-2,1,14,-12,1,0,-3,6,-2,-9,9,-3,2,24,-26,20,0),
	    56 => w(3,-14,-10,-8,-8,1,-5,-4,0,9,2,-15,-4,-7,4,-4,0,2,-6,-4,-2,3,7,-3,11,-23,6,11,-3,-3,-9,2,3,5,4,-5,0,-3,-8,4,2,5,12,-16,0,26,-3,4,1,3,5,-1,-5,-3,3,-9,-8,-29,-1,1,-3,-2,8,12),
	    57 => w(12,8,-7,17,5,0,-42,15,-5,-20,-1,0,-1,-4,-4,-4,-11,-9,-7,-8,5,-9,-6,-2,3,-2,-11,8,4,0,3,-7,6,4,-1,5,5,-11,-2,6,6,3,-10,2,-2,1,0,1,3,-6,-5,-5,4,-2,-5,-3,2,7,4,7,-1,5,-8,2),
	    58 => w(8,3,-3,5,7,-2,-3,2,12,-6,1,6,0,2,-8,-1,-16,-1,-1,23,1,4,0,-1,-1,0,-7,13,4,5,-4,-1,-4,-31,7,6,4,-1,-5,-6,-1,3,1,-1,-10,3,0,9,-1,8,4,0,-1,0,-6,9,0,3,-8,2,-7,-6,-3,-12),
	    59 => w(7,13,-8,-1,16,0,-2,-2,-4,-11,-5,3,-1,5,-1,0,35,-5,5,8,6,-3,1,-1,-13,0,3,-2,3,5,-3,7,4,-13,-12,-20,-4,1,13,-3,2,-22,-8,0,-5,0,-5,-40,-2,-6,1,7,-11,-2,3,-1,6,0,0,-8,-2,-8,3,8),
	    60 => w(-14,-4,0,-54,-2,-4,-20,4,1,3,5,-8,4,2,-2,3,-5,3,-19,4,0,0,-6,1,-1,0,-36,2,3,-3,6,2,0,-26,2,-1,22,4,-6,-3,-45,5,0,5,-2,19,10,10,21,-2,26,2,17,13,25,13,-4,-5,-15,1,7,0,4,-7),
	    61 => w(-12,4,-3,0,9,0,-3,5,-3,2,-7,16,5,-1,-24,7,-5,10,-26,-10,10,-15,2,-2,0,-27,-3,-7,1,15,2,11,14,1,-10,-9,10,-19,0,4,-3,0,4,3,-18,0,-4,3,7,6,-6,-3,-4,-4,-16,-2,-12,8,-2,15,-4,15,9,15),
	    62 => w(1,2,2,-3,-4,-3,0,-6,-12,9,2,-3,-4,1,3,-4,-4,1,1,-2,1,4,18,4,2,24,28,-7,2,2,-8,1,-9,-8,16,-10,-3,-2,20,-2,2,-3,32,-4,6,3,11,-2,2,-1,18,1,-1,-2,3,-59,-11,2,9,9,6,-1,4,0),
	    63 => w(3,1,3,-5,0,5,6,-2,-18,-4,7,7,0,4,3,-3,0,-5,3,8,-1,0,47,1,0,3,-5,6,-2,0,-7,-1,1,11,15,7,-18,-7,-1,6,16,0,-1,3,30,0,-3,-3,1,0,-1,21,1,-1,-15,1,-10,1,3,-10,4,7,0,-1)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;