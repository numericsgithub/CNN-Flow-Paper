library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv18_core1_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 256;
        WORDS_PER_ADDR                : natural := 9
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv18_core1_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv18_core1_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(0,-9,10,-12,-1,36,2,-13,13),
	    1 => w(12,41,7,-4,-23,-2,0,14,1),
	    2 => w(-6,-6,-6,-4,-2,-2,-8,-4,-7),
	    3 => w(2,10,3,12,35,10,18,-3,17),
	    4 => w(-17,-7,-15,-7,-12,-24,-19,-11,-8),
	    5 => w(-10,-21,-7,-5,-18,-8,-14,-13,-11),
	    6 => w(8,15,6,7,28,5,6,-21,4),
	    7 => w(26,16,21,3,-10,4,7,0,1),
	    8 => w(4,-5,4,9,29,7,-1,2,0),
	    9 => w(4,5,3,14,27,11,5,-2,7),
	    10 => w(-10,-9,-9,-8,-1,-8,-2,-15,-2),
	    11 => w(-3,4,-3,0,34,0,-1,-3,-1),
	    12 => w(-8,-10,-6,-8,-5,-8,-8,-13,-9),
	    13 => w(3,9,3,9,29,4,2,1,3),
	    14 => w(0,6,0,9,25,7,2,6,1),
	    15 => w(3,9,3,4,30,2,2,7,2),
	    16 => w(2,-5,0,10,-14,1,21,2,5),
	    17 => w(-11,-9,-8,-3,0,-2,-7,-4,-6),
	    18 => w(-5,-4,-4,-4,-7,-5,-5,-8,-3),
	    19 => w(14,26,7,-4,-7,-5,2,-1,3),
	    20 => w(10,0,29,-4,-8,-6,-3,-2,2),
	    21 => w(1,7,0,1,29,1,1,-6,1),
	    22 => w(-15,-19,-15,-8,-21,-11,-19,-14,-12),
	    23 => w(2,3,2,4,27,3,1,2,2),
	    24 => w(0,2,1,4,25,2,1,5,1),
	    25 => w(-9,-13,-10,-7,-5,-5,-9,-10,-11),
	    26 => w(12,2,8,15,22,17,8,21,4),
	    27 => w(-11,-9,-7,-13,-49,-13,-5,-20,-3),
	    28 => w(5,7,4,9,40,5,3,5,4),
	    29 => w(6,1,-12,11,7,-18,7,0,-10),
	    30 => w(-8,-10,-7,-10,-13,-8,-7,-9,-7),
	    31 => w(-4,3,-2,16,35,10,16,13,14),
	    32 => w(-12,-7,-10,-8,-5,-7,-8,-9,-9),
	    33 => w(-10,-8,-4,-7,-3,-6,-14,-10,-7),
	    34 => w(-5,-7,-3,-5,-8,-5,-5,-7,-4),
	    35 => w(-8,-13,-8,-7,-4,-6,-4,-7,-4),
	    36 => w(6,12,5,11,18,7,3,1,4),
	    37 => w(-7,-7,-6,-8,-7,-6,-8,-4,-8),
	    38 => w(-1,-3,-2,-1,30,-5,-2,-3,-2),
	    39 => w(16,41,16,-10,-5,-8,-6,-37,-8),
	    40 => w(-2,-5,2,1,2,-1,-14,-24,-13),
	    41 => w(6,10,4,7,25,6,4,4,5),
	    42 => w(6,7,16,-7,2,29,4,10,6),
	    43 => w(2,-17,-1,17,14,16,10,30,7),
	    44 => w(-5,-5,-3,-8,64,-11,-4,-7,-5),
	    45 => w(2,8,5,-8,47,1,6,9,5),
	    46 => w(-8,-8,-8,-6,-6,-6,-11,-14,-11),
	    47 => w(-7,-8,-6,-12,-14,-13,-15,-18,-15),
	    48 => w(20,39,19,17,-19,21,-7,-7,-7),
	    49 => w(-13,-1,-1,-15,-22,7,17,21,4),
	    50 => w(-5,2,-6,-13,98,-19,2,-6,0),
	    51 => w(15,11,4,7,21,13,4,3,16),
	    52 => w(16,-12,1,35,8,-9,3,0,1),
	    53 => w(9,4,0,6,34,-5,7,-2,1),
	    54 => w(25,29,-18,-11,19,28,-4,-13,17),
	    55 => w(-7,-7,-6,-5,-8,-5,-5,-6,-4),
	    56 => w(2,-1,2,1,31,-1,2,3,2),
	    57 => w(-7,-2,-7,11,37,9,14,19,13),
	    58 => w(-1,-7,-1,-3,56,-5,-2,-4,0),
	    59 => w(3,4,1,5,33,3,2,5,1),
	    60 => w(28,43,24,15,-26,16,1,-13,3),
	    61 => w(5,4,3,4,25,4,5,2,4),
	    62 => w(-11,-8,-9,-6,-10,-4,-10,-5,-12),
	    63 => w(3,-1,4,4,33,0,-1,1,-1),
	    64 => w(-3,-7,-3,-6,-11,-6,-2,-7,-2),
	    65 => w(2,-4,2,4,-19,5,15,16,16),
	    66 => w(1,3,1,4,30,1,1,-1,1),
	    67 => w(9,11,10,10,34,6,9,7,8),
	    68 => w(6,20,6,8,40,4,12,-2,13),
	    69 => w(1,5,3,7,32,3,3,7,5),
	    70 => w(7,6,6,8,23,6,6,8,5),
	    71 => w(2,4,2,-1,59,-3,2,-14,3),
	    72 => w(-1,6,-1,-5,33,-5,-2,-8,-2),
	    73 => w(10,29,11,34,49,32,15,26,12),
	    74 => w(6,2,-10,15,-7,-9,7,4,-7),
	    75 => w(8,-11,9,41,34,43,12,-9,10),
	    76 => w(-1,-4,-2,-2,43,-5,-2,-1,-3),
	    77 => w(11,12,12,2,46,4,18,13,-17),
	    78 => w(3,5,3,5,25,3,7,8,6),
	    79 => w(13,25,14,10,32,8,20,10,20),
	    80 => w(2,1,0,3,36,0,2,-1,0),
	    81 => w(-12,0,-6,17,43,11,20,29,16),
	    82 => w(3,2,2,2,31,0,2,1,1),
	    83 => w(0,3,-1,-2,55,-6,-1,-11,-2),
	    84 => w(-2,-5,-2,-5,-15,-3,-3,-5,-2),
	    85 => w(-3,-3,-3,-1,-44,3,2,3,2),
	    86 => w(2,1,2,4,33,3,3,8,4),
	    87 => w(-1,-13,-2,4,21,2,4,13,2),
	    88 => w(3,-2,2,4,45,4,3,9,1),
	    89 => w(-12,-13,-11,-12,-2,-13,-9,-11,-8),
	    90 => w(2,14,2,7,-116,16,8,7,7),
	    91 => w(1,-4,0,2,-19,2,11,19,11),
	    92 => w(-13,-6,-12,-18,-14,-16,-6,-10,-7),
	    93 => w(4,2,4,3,31,1,5,9,4),
	    94 => w(-12,-1,8,-17,17,25,7,25,-2),
	    95 => w(4,8,4,3,35,8,3,4,-3),
	    96 => w(6,4,6,7,24,3,5,5,7),
	    97 => w(-5,-10,-2,-8,-15,-7,-4,-9,0),
	    98 => w(6,12,6,12,28,12,0,-2,0),
	    99 => w(-6,-7,-5,-9,-5,-8,-7,-7,-6),
	    100 => w(-11,-4,-12,-4,5,-2,-11,-5,-12),
	    101 => w(2,3,3,5,31,6,0,1,0),
	    102 => w(-8,-18,-8,-12,51,-15,-5,12,-2),
	    103 => w(-6,-12,-3,-3,-8,-2,-7,-8,-5),
	    104 => w(2,-1,2,-4,71,-8,0,-11,-1),
	    105 => w(-9,-11,-9,-10,-5,-13,-10,-10,-8),
	    106 => w(4,-3,3,4,30,3,1,12,-1),
	    107 => w(3,-11,0,11,13,-5,11,12,1),
	    108 => w(0,-2,-2,1,25,-3,8,28,6),
	    109 => w(-8,-1,2,-7,-28,36,-3,7,8),
	    110 => w(4,12,3,6,25,4,0,0,-1),
	    111 => w(2,8,-10,30,6,-4,11,-7,-2),
	    112 => w(-8,5,-2,-6,8,4,-25,1,-1),
	    113 => w(-12,-8,-12,-9,-1,-8,-18,-2,-19),
	    114 => w(1,2,1,4,30,1,4,4,3),
	    115 => w(0,4,9,-3,6,-2,9,33,23),
	    116 => w(4,21,6,23,43,20,2,19,-1),
	    117 => w(-1,2,-2,-22,-1,28,-3,-1,3),
	    118 => w(-4,-8,-3,-7,-14,-3,-2,-7,-2),
	    119 => w(-7,-12,-7,-10,59,-14,-6,-7,-8),
	    120 => w(-22,-8,-24,-10,-27,-2,-20,-2,-27),
	    121 => w(-1,-8,-2,-23,-24,-20,-3,-8,0),
	    122 => w(15,26,9,21,35,4,-15,5,-14),
	    123 => w(2,-1,15,3,15,18,3,-3,-1),
	    124 => w(8,0,-12,9,11,-18,6,1,-9),
	    125 => w(1,0,1,7,31,3,1,-1,1),
	    126 => w(0,-1,-1,-1,45,-4,-1,-3,-1),
	    127 => w(-5,-12,-4,-9,-14,-7,-9,1,-9),
	    128 => w(9,3,-5,20,-16,-6,6,-1,-5),
	    129 => w(7,21,8,10,24,9,2,-1,2),
	    130 => w(1,-1,0,2,32,0,0,1,-2),
	    131 => w(4,0,5,4,33,0,0,4,0),
	    132 => w(11,28,9,2,-11,5,-16,-23,-14),
	    133 => w(-1,-2,28,-25,22,21,26,26,-16),
	    134 => w(3,0,4,13,36,5,7,19,6),
	    135 => w(1,5,1,1,34,0,1,-1,1),
	    136 => w(13,51,11,-7,31,28,10,-18,0),
	    137 => w(-15,-26,-16,0,-16,-3,14,5,14),
	    138 => w(6,-5,1,33,44,30,6,-12,6),
	    139 => w(6,10,3,6,23,4,3,7,2),
	    140 => w(5,8,4,3,28,2,2,-2,2),
	    141 => w(-16,-9,15,16,37,4,11,-8,10),
	    142 => w(-11,-16,-11,-14,-20,-13,-15,-14,-13),
	    143 => w(7,7,8,9,29,8,1,-11,3),
	    144 => w(8,-9,3,3,50,5,5,7,7),
	    145 => w(-10,-1,1,-16,8,13,-11,5,2),
	    146 => w(23,10,-2,29,-21,-11,22,18,5),
	    147 => w(-10,-13,-8,-14,-12,-9,-11,-10,-10),
	    148 => w(7,28,5,-13,24,-9,21,9,17),
	    149 => w(9,-1,-1,15,-19,-7,8,-1,-3),
	    150 => w(3,-2,4,4,38,2,4,4,3),
	    151 => w(11,18,9,-1,23,-2,5,22,5),
	    152 => w(-20,3,-11,20,45,6,12,21,7),
	    153 => w(-14,-11,-13,-11,-11,-11,-10,-11,-9),
	    154 => w(-1,-8,-1,3,-27,5,8,16,7),
	    155 => w(-9,-7,-10,-12,-8,-10,-4,-10,-5),
	    156 => w(8,18,9,14,-37,3,4,0,3),
	    157 => w(7,0,-16,-9,-9,24,-10,-5,23),
	    158 => w(-9,-8,-7,-7,-2,-7,-8,-7,-7),
	    159 => w(-2,-12,0,-9,-39,-4,-3,-3,-4),
	    160 => w(-11,-10,-9,-10,-7,-11,-9,-12,-9),
	    161 => w(13,0,-8,13,4,-16,4,-2,-12),
	    162 => w(3,-6,0,-2,-26,-2,4,-5,-1),
	    163 => w(6,17,7,2,-10,2,-5,-7,-5),
	    164 => w(5,3,4,2,32,1,2,10,1),
	    165 => w(2,-3,1,1,35,0,0,1,0),
	    166 => w(-17,-7,-13,-24,-15,-22,-7,-4,-8),
	    167 => w(6,-8,15,-6,-18,19,-1,14,3),
	    168 => w(-7,-12,-6,-5,-2,-4,9,40,5),
	    169 => w(4,-2,3,5,29,4,-1,9,-2),
	    170 => w(17,17,14,-5,3,-7,2,-3,4),
	    171 => w(-4,-14,-4,-6,-27,-4,-3,-18,-3),
	    172 => w(9,-6,-6,16,-9,-3,11,1,-9),
	    173 => w(6,18,5,3,20,0,3,-5,2),
	    174 => w(15,14,12,20,61,13,14,16,12),
	    175 => w(-15,-27,-9,13,10,11,-8,-33,-5),
	    176 => w(-3,-3,-3,-2,37,-3,-3,-1,-3),
	    177 => w(-13,39,17,-17,37,12,5,-14,-2),
	    178 => w(20,21,2,8,-14,-20,22,23,-1),
	    179 => w(5,23,2,-2,-20,13,3,2,5),
	    180 => w(11,6,10,-3,-6,-1,14,9,12),
	    181 => w(1,6,9,7,18,8,10,2,1),
	    182 => w(-5,18,26,0,33,27,0,-1,-2),
	    183 => w(-4,1,16,-9,-22,25,3,5,13),
	    184 => w(-2,-3,-1,-3,46,-7,-3,-4,-2),
	    185 => w(-10,-12,-9,-15,-2,-13,-11,-12,-11),
	    186 => w(-21,-28,-5,-10,18,6,16,24,2),
	    187 => w(5,8,5,12,26,8,6,6,5),
	    188 => w(11,13,9,1,-7,2,2,-1,2),
	    189 => w(-7,-8,-7,-10,-6,-8,-8,-8,-7),
	    190 => w(5,3,5,11,26,8,1,6,3),
	    191 => w(-9,-7,-9,-10,-6,-9,-7,-5,-7),
	    192 => w(-6,-8,-5,-12,-10,-10,-8,-7,-7),
	    193 => w(4,-1,4,1,39,-3,6,4,6),
	    194 => w(0,-7,-1,1,-7,1,5,24,5),
	    195 => w(4,-1,5,6,33,4,7,13,5),
	    196 => w(1,0,0,0,34,-2,0,0,0),
	    197 => w(-7,-10,-5,-10,-10,-9,-5,-7,-4),
	    198 => w(-10,-7,-9,-9,-10,-8,-5,-6,-6),
	    199 => w(17,-2,15,3,33,3,-4,24,-3),
	    200 => w(-23,-13,13,-15,-26,22,12,17,11),
	    201 => w(16,27,14,6,-23,6,0,-7,1),
	    202 => w(13,10,13,17,-87,19,9,8,9),
	    203 => w(4,0,4,4,22,0,2,5,3),
	    204 => w(7,1,-8,14,-18,-4,6,9,-3),
	    205 => w(15,37,12,-4,-1,-2,-4,-18,-2),
	    206 => w(-14,-9,-13,-9,-12,-8,-10,-7,-9),
	    207 => w(4,4,1,-9,-17,24,-15,-14,10),
	    208 => w(5,9,2,11,31,8,5,20,3),
	    209 => w(-6,-14,5,-8,-14,25,-1,0,18),
	    210 => w(-9,-7,10,-7,-18,20,-2,0,7),
	    211 => w(3,7,4,7,34,4,3,-8,4),
	    212 => w(19,17,14,16,28,2,17,16,17),
	    213 => w(-11,-12,-8,-8,-2,-9,-8,-9,-6),
	    214 => w(2,1,2,5,32,3,3,4,3),
	    215 => w(-8,-11,-5,-10,-11,-9,-5,-6,-3),
	    216 => w(-13,-11,-13,-7,-14,-7,-13,-6,-11),
	    217 => w(3,-6,7,-7,-16,3,-5,-8,1),
	    218 => w(-9,-15,-9,-10,-13,-10,-11,-10,-11),
	    219 => w(-1,-4,-1,-2,40,-5,-3,-4,-3),
	    220 => w(-3,-5,-2,-8,-10,-8,-5,-7,-5),
	    221 => w(-17,10,8,-43,32,8,-7,3,3),
	    222 => w(-3,-39,-3,-10,-21,-6,12,54,8),
	    223 => w(-6,-2,0,-10,6,16,-8,2,7),
	    224 => w(-14,31,23,33,14,-6,20,-19,-3),
	    225 => w(10,5,-13,13,-6,-12,8,3,-8),
	    226 => w(-7,-9,-6,-8,-3,-7,-7,-10,-6),
	    227 => w(-2,-10,-1,-8,67,-10,-2,-15,-2),
	    228 => w(7,17,7,8,17,5,6,3,7),
	    229 => w(13,4,11,21,33,16,15,-13,15),
	    230 => w(15,10,-3,34,-14,-10,12,5,1),
	    231 => w(4,14,3,3,27,4,-4,2,-4),
	    232 => w(-2,-13,-3,2,32,-1,5,14,4),
	    233 => w(-2,-5,-1,1,27,-1,1,14,3),
	    234 => w(12,4,12,0,4,1,9,18,8),
	    235 => w(-9,-17,-11,3,-8,3,9,15,10),
	    236 => w(-1,8,-2,2,-18,3,-8,-2,-9),
	    237 => w(10,24,8,6,-9,5,3,-3,3),
	    238 => w(6,7,6,5,40,2,1,6,2),
	    239 => w(-13,-14,-15,-9,-14,-7,-12,-11,-15),
	    240 => w(14,0,-1,1,-4,-1,27,-3,1),
	    241 => w(-5,14,-4,-1,18,-1,-7,-34,-6),
	    242 => w(11,4,2,11,15,10,3,3,10),
	    243 => w(-1,-8,-1,5,-21,4,12,16,10),
	    244 => w(-10,-15,-11,-6,-11,-5,2,4,2),
	    245 => w(7,5,6,32,15,-5,-2,4,2),
	    246 => w(-1,-5,-2,1,25,3,9,7,9),
	    247 => w(-1,-31,-8,24,46,24,11,41,4),
	    248 => w(-10,-4,-10,-9,-6,-9,-4,-6,-4),
	    249 => w(3,12,2,8,38,10,5,10,8),
	    250 => w(-5,-7,-5,-7,-16,-6,-6,-7,-6),
	    251 => w(6,6,7,7,34,3,7,6,6),
	    252 => w(8,5,8,-2,1,-3,9,16,9),
	    253 => w(3,-16,7,17,-43,26,4,7,3),
	    254 => w(4,-12,6,11,11,10,10,13,11),
	    255 => w(-17,13,10,-25,18,16,-14,-12,-2)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;