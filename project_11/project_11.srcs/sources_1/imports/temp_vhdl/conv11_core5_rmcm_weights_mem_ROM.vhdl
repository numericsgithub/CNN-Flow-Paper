library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core5_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core5_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core5_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-1,-12,18,6,-1,0,-2,-5,1,2,-2,2,0,0,0,-1,2,0,-8,-6,3,-4,-5,-6,6,-6,-1,5,-6,5,17,9,6,5,-9,-6,0,6,15,-2,-2,2,9,-12,-3,-3,-5,35,0,1,-1,8,-4,-4,2,-1,11,-4,-2,-29,4,-4,15,11),
	    1 => w(-9,-2,-4,-8,1,7,-11,4,25,-6,1,0,-4,-11,0,-1,-9,-1,2,11,-4,-2,-1,-9,4,-1,-9,0,-7,-7,5,1,-1,1,-3,5,2,-5,14,-4,-2,5,-1,0,-1,1,-4,-1,-6,3,2,-4,18,2,0,12,0,3,4,6,-18,-12,-2,4),
	    2 => w(-6,0,3,-2,3,11,-12,8,12,3,1,9,11,-11,-4,-3,-12,-2,-10,-7,-11,-3,2,2,-1,-2,6,13,-2,-1,-8,-1,12,-12,6,-12,0,-2,-1,2,-2,-9,-4,0,-7,-5,-2,-6,14,4,-1,-4,0,-2,0,3,-5,0,-3,1,-13,-4,-29,-2),
	    3 => w(-8,-7,3,6,4,3,-5,16,-4,-3,15,4,1,-4,-7,-4,8,26,-6,2,9,1,3,-3,-1,0,-1,-3,-2,-5,0,-10,3,5,1,-2,4,-2,6,-1,-3,-10,-10,1,1,-7,2,-9,3,5,-3,-3,-6,17,4,9,-23,-3,-3,-2,-1,5,-6,-12),
	    4 => w(6,-6,-7,-1,-1,3,6,13,1,4,4,-4,13,-1,-1,3,1,0,-3,-2,1,-3,7,2,-13,0,8,3,12,8,11,11,9,-8,-1,-1,-1,-1,1,-6,0,11,0,-8,6,-5,-1,-12,5,5,4,8,-1,-5,-9,-6,-11,-10,0,-8,5,10,3,-2),
	    5 => w(7,1,3,-3,-17,2,-9,-1,-1,1,-21,-2,7,-3,-6,-19,-17,0,4,0,13,-2,0,-7,6,-1,-6,19,8,-28,4,4,-4,-7,6,1,2,-2,0,-6,14,-2,2,1,-4,4,4,0,-2,11,10,-1,1,-4,-4,23,11,-11,3,3,-9,10,15,-3),
	    6 => w(4,-1,-3,-4,-11,-2,-12,-7,-12,2,13,-12,-11,-4,2,1,-6,-2,-1,3,5,-6,5,-4,2,-3,-7,0,3,-5,-4,3,-10,-4,17,-1,5,4,4,1,2,4,0,-9,-1,-1,3,-2,8,6,-2,8,10,-8,1,0,-6,7,13,17,-3,-6,3,1),
	    7 => w(5,4,8,14,-5,-8,0,35,-6,-4,-10,-2,-4,-6,8,12,-7,2,10,-4,-7,-3,0,-3,2,-1,0,12,-3,-6,-11,-3,-2,-3,-2,2,2,-11,-8,1,-2,2,-2,0,2,5,2,5,-10,-4,5,6,7,1,-14,8,-22,-7,-4,5,8,-1,3,4),
	    8 => w(14,2,-7,8,-3,-3,-4,5,-6,-2,-5,1,2,-3,-4,9,-26,-1,4,-11,-1,-3,-2,-4,-1,-5,-9,2,15,3,-11,-2,0,5,7,5,-4,-8,-8,-8,-2,0,-18,-2,-9,-29,3,-8,-20,10,6,-18,-1,3,-3,-10,3,-7,-2,-18,-7,-5,-3,-6),
	    9 => w(-8,3,-2,3,10,-1,-13,2,-3,-2,6,-3,-3,4,4,7,-7,-5,1,7,0,1,6,0,-5,-3,-6,-9,-3,-9,0,10,4,0,1,16,3,-2,-3,-4,8,0,-1,2,-5,-8,-1,-2,3,-5,-1,-3,1,3,4,-3,2,8,3,-15,13,11,-3,-12),
	    10 => w(2,0,0,55,-8,-17,2,-8,9,2,-9,0,-19,-8,3,0,-4,-12,-1,-14,-13,-4,4,-9,3,-4,-5,-7,-6,8,7,0,2,-10,-11,-9,24,1,0,3,-4,-2,-8,-7,-7,-5,2,3,-3,11,-8,1,1,-4,0,-8,0,30,-1,-1,-12,2,0,-3),
	    11 => w(-6,24,0,-7,2,2,-3,11,-4,10,-10,0,-1,-3,9,-3,-2,-4,1,-15,-6,-7,-1,4,2,1,4,-10,3,5,0,13,-1,-14,8,-10,1,15,-12,-4,-8,-7,-12,11,-2,2,16,-13,2,-2,-4,-4,-45,-6,-9,1,-24,5,1,8,-4,-3,-7,0),
	    12 => w(-3,0,0,1,12,1,10,12,3,-7,4,5,2,0,-10,-5,1,3,1,6,2,-2,-3,4,-1,-3,9,-3,9,-8,-6,-4,-2,-1,4,-1,7,-2,0,0,-4,-6,7,-2,6,5,1,5,-7,3,23,2,6,20,-14,0,0,1,-17,3,1,-1,2,22),
	    13 => w(-1,-6,5,-1,-3,-1,-2,-1,-4,-1,-1,-9,20,-3,-22,23,1,2,-28,2,1,-10,12,-1,-2,-21,5,-1,7,5,1,-3,32,2,-8,9,-5,3,-1,4,-1,9,6,10,-12,5,-6,5,4,3,1,1,-2,-1,-14,0,2,0,-3,-6,4,2,1,4),
	    14 => w(-1,-4,-4,2,0,-3,1,-8,6,23,4,0,-1,-2,-2,-3,-2,-1,3,2,5,2,35,-5,-13,4,-16,1,1,1,-6,0,-5,9,2,6,3,7,6,-4,0,3,-15,1,2,9,-14,-1,-8,-3,29,1,5,1,4,13,-22,-1,5,4,3,-1,-1,-1),
	    15 => w(-7,8,-9,12,1,3,-3,1,-5,-3,4,-2,-4,-6,4,-1,6,6,3,14,-2,0,-10,-5,-2,4,-1,0,-2,-6,12,-5,4,-7,-12,-15,1,-1,14,1,-2,-2,3,6,26,3,2,0,-13,7,5,9,3,1,3,4,0,-1,-3,1,3,-2,-2,2),
	    16 => w(3,10,-6,47,-9,4,0,3,3,3,-3,-7,-3,-4,11,-4,-13,1,-23,8,-2,1,0,3,-2,1,28,-4,3,4,6,3,-3,-10,3,1,23,-25,3,-10,15,3,-1,-5,-5,-2,24,-5,6,4,7,0,-10,-3,25,3,-2,4,6,-4,-8,8,-6,13),
	    17 => w(8,-9,7,-4,6,0,-6,-6,-4,-1,7,9,-9,7,48,14,-7,7,-23,17,9,24,6,3,-3,-26,5,3,-11,-6,3,-2,10,13,5,-3,0,10,-6,2,-4,9,-2,3,6,1,-3,10,1,13,3,0,-2,2,9,-3,-2,-12,9,4,4,11,-11,6),
	    18 => w(-8,9,-1,3,2,10,0,-1,7,19,10,-2,5,1,-3,14,-7,10,3,-1,3,-3,-5,-13,7,-17,28,-3,-1,3,-2,-1,0,9,3,15,3,0,-10,24,4,19,-20,0,-1,1,5,-3,-5,-9,-6,0,-3,1,-2,-40,29,4,2,15,12,-2,5,3),
	    19 => w(-3,0,8,-4,0,3,-3,4,25,-1,0,-10,-1,-7,6,2,8,-3,-2,-2,4,7,31,7,-3,2,4,-9,1,8,-15,1,1,11,11,-14,28,-6,9,5,-5,0,-2,1,6,-5,2,23,9,4,1,30,6,0,-15,-1,12,2,-4,0,-9,5,0,11),
	    20 => w(-2,5,3,8,1,2,4,2,14,15,9,0,4,-3,4,1,-6,-4,-3,-12,4,-2,3,11,-2,8,3,1,3,-34,-21,-7,7,9,4,-21,10,-4,10,-12,9,-1,-13,11,29,15,10,7,5,-4,6,-5,0,5,7,32,39,7,1,-6,-17,24,1,3),
	    21 => w(26,14,6,16,-14,-6,17,10,-21,11,6,8,-6,-2,9,10,7,-3,-4,8,14,6,4,4,1,6,11,3,-11,12,-6,1,-5,1,0,-7,11,16,12,-17,25,3,6,7,3,2,3,1,-3,-8,-31,-16,6,15,5,-13,50,25,-1,5,12,-1,-5,7),
	    22 => w(5,-2,-7,-12,0,-1,8,-19,-15,-2,-5,-2,-14,20,7,7,-6,1,-4,24,-6,13,-2,2,3,-5,7,-7,8,-3,23,-4,-15,20,14,-35,2,-6,2,5,6,10,3,-14,-5,4,0,7,-2,15,-5,0,3,6,1,4,3,5,11,4,-16,10,-9,-8),
	    23 => w(3,17,-2,3,3,-3,-25,-26,-4,1,-11,-2,3,15,-6,-6,7,32,-13,6,-32,-5,1,-12,-13,3,-3,2,0,-14,-4,23,17,0,14,6,9,-8,-5,-7,30,8,-1,6,3,-2,4,1,-2,5,3,3,11,13,-6,-3,21,2,5,-18,-3,3,6,9),
	    24 => w(-8,-1,3,-13,5,1,-6,5,4,-6,6,-2,-5,5,1,6,7,7,10,-6,-1,0,5,3,6,-6,-3,0,14,3,-1,2,2,7,-6,11,6,8,-6,1,-3,1,1,-5,-5,1,5,7,24,9,-2,-10,0,-1,3,2,9,-10,1,-14,-5,-2,0,-8),
	    25 => w(19,-1,0,-12,-12,1,1,-11,4,-4,-11,5,4,-1,6,6,-7,6,1,13,9,7,0,8,3,4,12,-2,0,-30,-2,11,4,3,-2,5,12,-19,1,-5,-2,-1,-3,1,0,4,3,2,2,5,16,1,3,3,-6,-3,10,11,22,16,9,24,0,-11),
	    26 => w(-4,-3,-3,8,-7,0,-5,-3,-9,15,-2,0,7,-21,0,1,-1,13,1,-8,-6,3,1,3,6,8,8,8,-2,4,6,-1,2,-4,-1,18,3,5,3,-5,18,-4,4,-10,-6,-20,-4,-2,1,-2,6,3,-4,5,11,6,5,15,5,4,4,2,-4,0),
	    27 => w(3,-11,-1,22,-10,4,-4,2,-1,2,-4,7,2,4,7,-6,4,-2,1,9,-14,1,-3,5,9,0,-9,-16,-2,8,4,33,9,8,3,-9,3,14,-16,2,-5,10,7,10,-7,-2,15,7,5,20,0,-3,-2,6,7,0,12,1,2,-13,6,28,-17,5),
	    28 => w(-3,-6,1,2,-4,5,2,-5,-1,-5,-11,-6,3,-2,-7,-16,-6,-2,-9,14,-5,-7,-12,0,-4,10,-8,7,-1,-11,2,13,-1,-11,10,-5,-14,-5,-12,-10,-3,0,-5,7,-3,-5,-8,-3,-14,-7,-5,14,0,-6,-8,-12,-5,11,-3,-1,11,-11,-8,0),
	    29 => w(-5,-11,9,6,-9,0,4,1,-3,0,-16,-14,-1,6,-9,-15,-9,11,-2,-18,-1,0,-7,-3,-1,-8,10,-2,1,-6,-6,-4,0,-8,-1,5,-1,1,-11,2,-11,3,-5,3,-8,4,-5,-12,-5,-11,-8,-1,-6,-4,-2,-2,-8,-3,-5,4,-11,-7,-25,-9),
	    30 => w(12,1,-1,-8,-7,-1,-12,6,-7,0,3,-3,-5,-10,0,0,22,17,1,-4,-2,-1,0,-1,-6,-2,5,16,-2,-4,8,1,5,35,-9,-11,-5,1,-3,-11,-4,-13,-2,1,-8,-4,-5,2,-1,-12,-10,5,0,-1,3,-9,-3,11,2,-2,-9,5,-2,6),
	    31 => w(-4,-4,-5,-6,-9,4,8,-2,0,3,-7,-4,4,-9,-11,-3,-1,-9,1,-15,-9,6,2,6,-3,-3,-3,-1,8,0,-13,5,-5,-4,-9,-25,-3,-21,-4,3,2,-5,-24,-9,1,-2,6,44,-10,8,-8,-7,-15,-9,-5,-8,-18,-5,-7,-5,-18,0,-8,-12),
	    32 => w(-5,-16,-13,-8,-18,-4,-5,5,-2,-14,-3,0,2,10,-5,-6,4,-7,3,3,1,0,-11,-1,1,-6,0,8,-4,0,-6,1,5,-1,-1,-6,-5,-3,1,2,1,5,6,1,-1,-10,-24,17,-3,4,-4,20,0,-5,-5,-5,-1,-12,0,-2,4,12,8,-8),
	    33 => w(-10,11,0,10,-3,-2,3,2,8,0,11,3,-6,1,-7,-17,-17,-7,1,-15,-18,2,5,-14,-2,-15,-4,-2,1,1,2,1,-7,-25,2,-3,2,3,4,13,1,2,-2,-5,-11,2,-15,-1,-1,-9,-1,-4,-5,6,6,8,-1,-2,-7,3,0,-10,-5,12),
	    34 => w(4,3,4,-3,1,0,-9,9,0,-4,-1,8,13,-5,-3,0,7,-4,0,-8,-5,-7,-4,11,-8,-1,9,-2,-4,-1,-9,1,26,-15,-1,6,2,0,-5,1,-2,-7,-9,0,1,-7,2,-5,-33,0,-2,-1,-5,-5,0,-6,-17,-2,-12,-18,-15,-4,-7,2),
	    35 => w(-16,-8,2,0,3,-5,-2,13,-4,-1,-11,0,3,-2,0,3,5,-5,-2,12,5,2,-5,-6,-4,2,-5,-3,1,-8,8,-4,-1,-6,-11,3,-3,-2,0,-4,1,-3,-3,-9,5,-7,-4,20,5,-10,-13,-5,-3,-1,-2,-4,-4,-9,-8,-3,8,-13,-10,-9),
	    36 => w(0,1,-4,-2,-2,0,12,4,-3,7,-3,-8,6,1,2,-3,10,7,3,-3,0,0,-4,-1,8,-6,-2,11,-1,1,-3,-15,1,4,6,-2,4,2,1,-5,-4,-4,6,-3,6,7,3,13,8,1,-5,-1,-3,3,2,3,-1,-14,6,-14,12,-5,11,6),
	    37 => w(-1,6,-1,3,4,2,-4,5,2,-16,-7,1,-9,-3,2,-2,-1,-11,4,7,-7,1,1,-9,2,-2,-3,-1,-1,9,19,0,-2,6,0,-3,2,0,8,2,6,-6,6,0,8,-2,-1,-2,8,-13,-1,-3,-1,-3,2,13,-2,12,10,-6,0,-4,-9,8),
	    38 => w(-9,-2,-12,9,14,-5,-11,-6,3,-2,-5,4,-10,-9,-4,-1,-4,-8,0,2,-2,-1,-3,-4,2,2,7,-10,-2,-1,1,0,-4,0,-1,6,-1,2,1,-1,-9,-7,-3,1,-1,5,-6,0,0,-2,11,2,-6,0,-15,-7,0,11,29,0,0,-9,5,3),
	    39 => w(-8,0,2,6,0,4,-12,3,1,3,5,6,-4,-13,-8,-2,5,2,-1,-7,-4,0,4,4,-2,-2,3,-4,0,-6,-1,-7,8,4,5,14,3,10,9,1,1,-6,6,-4,0,-2,-1,-4,5,6,-3,1,1,0,6,-3,9,-5,-5,-6,1,-1,-3,-6),
	    40 => w(2,-2,6,0,7,8,4,-47,1,9,-16,0,-4,10,5,-6,-11,9,8,6,-2,0,9,0,4,4,2,6,21,0,4,4,0,8,13,-6,13,8,7,7,3,10,12,-8,7,0,15,-5,22,-1,5,0,-3,8,8,1,-6,4,4,12,-17,-8,-13,-13),
	    41 => w(4,15,4,-35,4,2,-9,1,-22,-2,-8,-2,-10,0,7,-10,25,-2,-3,25,-18,5,-2,67,1,10,-7,-9,-1,-13,-7,51,-7,15,1,1,0,6,1,-33,-6,14,0,-3,1,2,1,0,6,2,8,1,0,-10,8,2,10,-14,-9,4,8,3,2,7),
	    42 => w(5,-3,-2,-4,3,-13,-4,1,5,-1,-30,0,3,-8,5,2,0,-6,0,10,-4,5,4,-31,1,7,2,7,1,-17,7,1,-5,9,11,9,3,1,2,-2,0,21,7,-8,-1,-10,-3,1,0,3,3,8,3,12,1,12,16,1,-1,4,3,0,7,-3),
	    43 => w(7,14,-9,-2,7,2,7,-4,-5,16,-10,-5,-5,8,5,-3,3,-4,-9,-21,35,-10,-1,-4,1,6,0,-2,-1,-5,-2,-7,-1,19,12,-3,6,20,-13,1,21,-1,-7,12,-1,71,-1,-19,6,-19,6,9,-2,-2,5,28,-13,2,-1,3,-9,25,-1,-7),
	    44 => w(-3,-5,7,-4,-17,2,8,3,3,-2,4,1,6,-4,-3,1,4,-4,-10,-9,1,-1,1,-4,-5,12,14,-2,-19,17,3,-1,8,-6,-12,4,-13,-3,3,-6,20,12,9,9,8,-5,-13,15,-11,2,10,2,3,-7,4,11,5,6,2,0,-18,-7,4,16),
	    45 => w(-3,-24,-7,-23,-4,1,-1,4,2,10,-17,22,-2,-2,17,-7,3,-6,-2,-7,8,1,-5,-5,-2,-11,-9,1,-7,-6,-8,5,1,32,-10,8,5,-14,-10,-19,2,1,5,-4,-7,0,-1,7,7,9,6,-3,7,-4,11,-1,40,-1,-1,12,0,-13,7,-1),
	    46 => w(4,-4,-5,1,-14,1,-15,8,-1,16,6,-3,-3,1,-1,1,4,12,1,-16,14,-2,-3,-1,-1,-33,-8,-10,-1,15,23,2,-19,1,-1,-23,-2,-3,-9,5,8,3,-31,27,4,15,-3,8,16,5,-8,-7,3,7,4,6,-3,-2,24,-1,-2,2,-2,2),
	    47 => w(-14,-2,27,11,-5,-7,-8,3,4,-7,12,3,4,-6,0,-2,-4,1,0,5,3,-6,2,-13,-1,9,3,8,-7,-7,8,-6,4,4,-5,-1,4,-22,10,-1,-18,-1,2,-22,4,1,-9,1,13,0,11,4,0,5,-12,-7,-3,-8,1,-4,-2,-18,11,27),
	    48 => w(-12,3,-1,-23,0,-4,-7,3,-9,-5,21,3,-3,0,3,-4,14,6,1,-2,-2,-4,-9,-5,8,1,-11,-5,-4,4,6,-2,15,-5,4,10,-15,-3,0,-1,-5,11,8,-1,20,-35,3,5,-17,-2,-1,7,5,0,-1,-8,20,21,1,18,6,4,9,-2),
	    49 => w(4,10,-1,13,-5,1,-13,7,-11,-4,-17,7,1,-5,4,-9,16,-28,0,-20,9,-2,-6,2,2,0,-5,8,-3,1,4,3,4,10,1,7,-2,5,0,-6,10,-5,-2,-15,-1,5,0,0,7,-3,-22,-3,7,1,-2,-2,14,-5,-14,1,-4,-8,-1,10),
	    50 => w(5,1,5,-27,1,-2,0,5,7,-8,12,11,-1,-7,9,-1,16,5,-2,4,-4,-4,4,12,-5,5,-6,11,6,3,-9,0,9,-7,18,6,-18,5,4,-4,-3,3,-4,12,2,10,-11,4,4,11,3,-7,1,-4,2,-11,-2,-9,9,-5,-7,7,7,-2),
	    51 => w(12,-3,-6,11,-2,14,5,2,5,1,-11,2,-1,-4,-6,8,2,19,-5,-2,-1,-2,-1,-10,3,-1,-2,11,1,-7,-11,0,6,-4,-26,0,-1,-5,-9,-1,21,7,1,-4,0,-3,-26,-8,2,-6,0,0,19,3,-3,36,2,2,0,6,26,4,1,0),
	    52 => w(40,-3,-16,10,-7,2,5,5,11,17,-6,5,0,11,-1,-4,-11,10,-2,-11,-3,7,0,11,-3,-20,6,-3,-8,1,-17,-10,-2,1,19,5,-2,-3,12,-4,3,6,-13,2,-10,-41,7,-7,9,-4,3,-6,12,2,-1,28,-3,63,-1,26,-4,-18,1,11),
	    53 => w(-9,-14,3,4,-18,-7,0,-11,-9,1,-6,1,-4,-4,1,-11,-7,-3,3,26,3,6,4,1,-3,11,-2,-6,3,-6,5,19,0,-5,2,-2,8,10,6,-6,2,0,-32,3,0,-2,6,1,-2,4,1,-3,-5,4,4,0,13,7,-6,-9,24,-27,1,-12),
	    54 => w(-1,0,-12,-14,13,0,8,-3,-16,2,-10,11,-2,-7,-6,1,12,-1,3,-13,-16,6,0,1,-2,0,5,11,7,8,10,-2,-15,3,4,-4,2,6,-3,8,9,4,3,-3,12,-14,5,33,6,9,0,-4,-4,4,2,1,0,-29,-6,-2,44,-7,2,-12),
	    55 => w(4,-19,9,0,5,-7,-24,-11,-4,4,0,4,4,21,-12,3,10,-2,-1,-12,3,-8,-1,0,20,-2,0,5,3,1,9,15,14,3,23,1,5,-19,2,-3,-14,-12,20,-3,0,-7,17,3,2,7,5,3,24,5,4,-14,4,2,-2,19,-5,3,-8,7),
	    56 => w(0,-4,2,-3,3,0,-4,-5,-3,0,-2,-1,3,-1,-2,-9,-3,-2,9,3,1,-5,1,-5,15,5,-3,-1,-8,-4,-13,-4,-7,-3,0,-18,-5,1,-4,-3,1,9,-8,5,2,-10,-2,2,5,-2,-3,-1,-1,-1,-3,-1,5,5,2,5,4,9,-1,-13),
	    57 => w(5,11,3,-1,9,8,0,5,-6,-14,-3,1,-4,13,2,-22,-2,14,1,-4,-4,0,0,1,-2,-3,-11,-6,-4,6,7,-5,0,-4,-1,-5,-5,6,0,2,-6,-10,-6,-1,-4,4,-2,-1,3,-14,-3,4,-4,-3,1,-2,-8,-7,4,-5,-2,12,8,5),
	    58 => w(2,1,4,5,-1,-1,4,-1,-20,-2,8,1,0,-2,8,-3,24,9,-10,-6,14,-1,-5,-3,-1,0,0,10,14,4,-5,1,17,-3,-5,-2,-2,-4,1,-1,-4,3,4,2,-3,-3,-1,-3,2,-9,2,0,0,-2,1,-5,0,-3,0,-4,0,7,-4,3),
	    59 => w(19,10,0,-1,-1,1,7,-11,-1,4,2,0,-2,-2,-2,-5,-6,-3,5,0,2,11,0,1,0,0,1,-17,5,4,-10,-3,-4,-9,3,-16,3,0,-14,-3,4,1,4,-5,-2,-5,-2,48,0,-7,0,-1,-8,-7,-3,-16,-21,0,15,4,-18,3,0,-13),
	    60 => w(-10,12,7,18,13,-10,22,-2,0,26,15,17,32,5,7,-2,21,7,-1,14,-2,1,14,11,-3,1,-5,13,10,15,17,5,3,-2,11,8,20,-33,1,13,-6,18,27,3,3,-6,3,-5,2,-7,0,16,-4,-3,-1,8,3,9,0,9,-11,8,-12,4),
	    61 => w(7,-14,18,-19,3,-2,14,4,-1,3,-16,0,17,-2,-23,-8,-14,7,-24,-9,26,-10,6,10,7,-14,0,19,-3,6,-10,-7,-14,3,7,-5,-14,26,-1,-3,-5,15,6,5,-5,7,-6,-2,9,22,21,-2,8,-18,-3,-2,19,5,-8,29,-31,11,4,-16),
	    62 => w(5,0,-4,-12,-41,13,-21,3,8,9,9,2,12,-28,1,3,7,16,6,-18,-1,7,23,-4,14,-2,-18,-4,7,3,4,3,-8,2,2,-10,-1,-3,3,4,-5,-7,-11,4,2,11,-3,12,9,-8,-36,-16,5,-12,1,8,-5,10,14,35,1,7,5,8),
	    63 => w(21,-13,14,66,-4,1,6,-1,-7,1,-3,-25,20,-9,3,0,11,7,-8,8,-4,-1,-26,-1,6,5,-2,-3,0,-3,0,-36,2,2,-22,-10,-4,-6,-20,8,2,14,12,-1,0,-6,-3,13,-7,1,-6,1,18,-2,-38,-7,0,1,4,-14,-23,-12,8,20)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;