library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core3_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core3_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core3_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(5,-7,-10,-1,5,1,6,8,-1,5,10,5,0,4,1,12,-6,-1,13,-12,1,-4,13,2,1,2,-11,9,3,5,3,0,2,-2,4,-2,-3,14,2,-1,-5,7,-4,-9,-5,0,-14,-8,-4,2,-25,-17,-15,5,-31,4,-3,-1,5,-1,1,4,-3,-16),
	    1 => w(13,-4,-7,7,5,-1,-10,-3,-3,0,5,-19,35,0,-11,-2,-3,-6,-37,-5,3,1,-2,11,0,15,-3,-2,-3,4,-1,-8,-9,4,-1,1,-1,-4,-1,16,2,-1,2,-1,12,-2,2,-6,-7,0,1,-7,0,1,-5,-1,-4,-14,-6,5,1,-4,1,-12),
	    2 => w(9,-5,-4,2,-14,-11,0,0,3,3,11,-2,1,-2,4,-6,-11,-5,0,-10,5,5,12,3,6,-19,18,-6,-2,-4,1,-2,-3,-13,1,-13,-3,0,2,-27,-3,-1,-3,7,0,1,-11,0,6,6,0,3,-4,-15,0,8,3,0,-7,-5,1,1,-4,-4),
	    3 => w(-2,-6,-9,8,0,-4,-5,0,-5,6,-2,8,1,12,1,-1,1,-4,0,0,13,-4,-22,4,-3,2,-3,0,-3,12,-6,-2,-1,2,-17,-5,-4,23,-17,0,2,-5,-7,7,-12,-2,-1,-11,-8,0,-37,32,-6,4,6,-7,-10,10,-1,-4,2,0,3,-2),
	    4 => w(18,9,21,0,-1,-2,-1,-3,-9,8,-5,-6,3,2,-6,2,1,-4,5,19,-5,6,1,0,3,2,-7,4,7,-11,-20,0,-13,-10,-5,-10,-8,-10,-19,39,0,12,-12,-3,0,3,-4,16,1,-5,-4,-8,3,-7,-5,-9,8,2,-3,-8,7,6,5,-27),
	    5 => w(-2,12,2,8,-8,-3,-2,8,-5,-17,1,-3,-4,6,-4,-17,-1,27,0,-8,-16,2,-2,-7,0,-2,-12,-1,3,-10,1,11,-1,-2,-1,2,-6,-1,3,0,-5,2,-1,0,-7,-6,3,5,2,-20,-1,1,-1,0,4,-4,-10,-14,5,6,-4,-1,-4,-3),
	    6 => w(-24,2,9,-6,0,-2,14,2,-17,0,3,-2,6,2,-8,1,14,-21,2,0,-16,2,-1,-14,-5,1,-10,6,-4,-3,-23,4,19,-4,-14,3,-2,-3,-1,-3,5,6,1,5,-4,-14,-1,3,-4,-5,0,-4,0,5,-3,-4,-8,-10,-6,-12,-1,-5,-3,5),
	    7 => w(-15,20,-3,-9,1,-9,-15,3,2,-8,4,-5,1,2,-6,5,-25,-6,-2,-14,-1,14,0,9,-9,3,-4,0,4,7,0,-5,-3,-13,-4,53,-6,9,1,8,3,3,6,-9,1,4,-4,-16,-6,-6,3,-2,3,2,-1,-1,-11,-8,6,16,-3,-5,1,-13),
	    8 => w(4,-4,-8,-14,-13,-2,-5,-3,-2,-6,8,4,-3,4,9,7,-4,2,-12,-2,-1,-1,-6,-5,-2,0,-28,-10,3,-9,6,0,3,-5,1,-5,-1,28,0,1,-26,-1,1,-6,-5,-9,0,-10,3,0,-6,-3,-5,-1,-28,1,-4,-2,4,5,-3,-6,-9,-14),
	    9 => w(1,7,-5,4,0,0,-13,-1,-7,-5,-2,-9,-9,0,-4,-7,7,-4,-17,2,1,19,5,8,-4,5,-5,2,2,-4,0,-1,12,0,-4,2,5,-27,-5,21,-1,-2,3,-2,-17,-2,11,1,1,-1,-6,0,-2,5,2,-1,-5,-4,8,2,3,-8,3,3),
	    10 => w(2,5,-4,3,-12,-8,1,-6,-7,12,9,1,-7,17,3,3,-4,0,3,-10,0,11,-6,7,-2,0,9,-8,1,3,11,-2,1,-16,1,1,-1,-3,-5,22,-1,-26,3,3,-5,0,-7,0,2,8,-19,-5,0,-7,7,-4,5,7,-1,1,-7,3,-2,-2),
	    11 => w(2,6,-14,17,0,-3,-1,-6,2,6,-5,-18,-7,6,3,1,-7,-5,-8,-3,11,9,-6,2,-7,-1,-2,7,3,10,-31,21,-3,3,-23,1,9,24,-12,-3,-2,-4,1,-4,9,-9,3,-4,-1,-3,50,10,-2,4,6,-5,1,8,-4,8,8,11,1,-1),
	    12 => w(3,-18,-5,-4,7,-2,-3,3,2,3,-2,1,5,-5,-9,-2,7,5,-1,-4,4,2,-1,1,2,1,-12,-8,0,-11,5,-2,7,-2,-4,0,5,-1,-2,-6,-12,-1,2,-1,2,6,-6,11,6,0,3,4,5,12,-7,2,-2,-14,-2,4,1,-3,8,11),
	    13 => w(-17,0,7,-17,3,1,-15,9,-2,-5,0,-5,4,-5,-10,-5,-4,1,5,-10,1,-18,-8,5,10,-3,-12,8,29,5,4,17,18,3,-7,-3,5,-1,6,6,19,0,6,-7,4,5,12,-1,-1,-9,3,1,-2,-2,4,18,5,7,-5,0,-7,-5,3,-2),
	    14 => w(3,-2,-2,0,-2,-16,4,2,-5,6,-2,6,-1,5,-4,2,-10,-8,3,12,-8,2,17,5,-5,-3,-5,-1,3,1,0,1,-9,-16,6,1,1,2,4,-10,-4,1,4,4,0,7,-4,-2,5,8,4,2,4,-7,9,1,-9,3,1,-15,-1,-5,0,1),
	    15 => w(-5,4,6,0,2,-2,-7,13,14,-8,-4,26,-3,10,2,-1,5,0,0,-1,-7,-6,22,-6,1,5,7,-2,-4,-9,10,-2,6,2,-13,4,-11,-5,11,0,-6,2,-1,6,12,6,2,-8,0,4,-2,9,-7,-2,14,-2,-4,-8,0,2,-4,4,-2,-2),
	    16 => w(0,-4,7,-5,-12,-2,5,-9,-2,-2,3,5,0,1,-5,0,10,-3,-18,8,-4,0,-7,2,-7,-8,-1,4,-19,12,-6,4,2,1,21,-8,-16,3,3,5,0,2,-10,-7,8,6,-8,-8,-15,-11,4,-3,-5,1,8,4,-10,-9,1,16,-6,8,-4,-11),
	    17 => w(12,10,-1,10,7,6,-8,-4,1,-10,-31,7,-1,5,-4,-7,-3,-18,-6,-1,-12,-8,8,9,0,2,-10,-21,8,2,3,9,-1,12,0,1,8,7,3,-3,-10,-3,-6,16,3,1,2,6,0,8,-12,4,-13,2,6,0,-9,0,-24,-7,0,-12,-6,-24),
	    18 => w(-7,3,-2,5,9,16,-14,-1,-13,-1,-7,1,3,18,0,6,-3,-8,2,-1,-9,3,-4,-4,5,-3,2,-2,2,-9,-11,0,-5,-16,-6,-30,-16,0,3,1,14,-6,5,10,-9,-13,-5,-4,5,4,3,1,-7,1,-1,5,-21,-11,-3,-7,-13,-2,-3,1),
	    19 => w(0,-2,8,-10,0,-2,5,-5,2,8,7,-1,-3,0,-5,7,-6,7,-10,5,11,-2,-3,-4,-5,-9,14,24,3,0,-6,55,-2,-9,-20,20,7,-25,-1,1,-11,3,6,-19,3,-10,11,-4,-5,42,-9,13,14,10,-15,-12,26,2,-2,8,10,-13,5,6),
	    20 => w(-6,-1,-6,-1,7,-1,2,10,-1,0,-18,4,1,3,-2,-4,-14,0,-29,3,0,-1,-6,3,5,-2,5,10,7,-18,11,-1,7,-2,-6,-3,-43,-2,1,-14,2,8,-16,8,-4,4,1,-6,14,1,1,4,2,13,-7,-3,-10,1,6,-7,-11,10,-2,8),
	    21 => w(-9,9,2,-5,3,-2,11,1,9,-1,-26,-2,-5,-5,8,9,15,5,-9,8,-7,17,-3,-3,1,19,-6,5,0,-4,-2,-2,10,-3,-1,5,-10,1,-2,-8,-7,7,-6,0,-2,1,3,-2,5,-10,12,4,-1,4,7,-3,-4,5,18,-6,-8,-8,2,-3),
	    22 => w(1,-2,3,0,-31,-12,-14,-3,4,-4,-9,-1,-1,-8,-1,2,-3,3,-2,-14,1,-10,5,3,-3,12,-2,-5,0,-12,1,-2,1,-3,19,-19,4,7,0,18,-12,13,13,-12,-2,9,16,3,-4,2,-1,19,-1,-2,1,5,9,14,-8,-2,3,0,-1,1),
	    23 => w(12,11,9,-2,-4,4,-2,-3,-1,-3,-3,5,5,6,-8,-4,1,-6,-2,-5,-20,7,5,3,-2,-6,-1,-1,-2,1,-2,-19,0,-10,9,0,-1,6,14,-1,7,2,-1,-13,0,10,-1,10,0,22,-6,5,-3,-3,-6,-1,-7,3,1,-2,-17,17,2,-7),
	    24 => w(-5,0,3,-9,-5,-1,-2,-7,-2,8,4,-10,-8,-7,-2,1,14,0,-1,5,-3,1,-12,7,0,3,-4,-1,-12,-28,-13,0,5,-15,-7,-9,-10,2,4,-9,-7,1,-35,-8,-6,-2,5,-12,-7,4,-7,-5,-4,-2,-13,-7,3,-8,-4,-1,7,-18,-1,-5),
	    25 => w(2,1,10,2,-1,-1,-7,0,7,1,-16,-7,4,1,-6,0,-5,7,2,-5,14,9,3,-3,-1,12,-1,10,-7,-8,-2,11,3,-1,1,4,13,6,6,-19,-1,8,0,9,0,-1,10,-6,5,12,-4,-5,3,10,6,1,-18,3,-30,-27,11,1,9,5),
	    26 => w(8,2,0,9,-17,6,-1,-17,8,1,21,-1,7,-8,1,-5,-7,-4,-3,-1,0,-12,2,-18,-8,-2,1,-5,-1,-10,-21,-2,0,9,3,14,-4,-2,-5,7,-6,-20,2,18,-5,-6,-3,3,1,6,-5,-52,-8,-10,11,-8,0,-7,2,-6,15,1,-1,-6),
	    27 => w(-2,-5,5,5,-8,6,2,2,3,-2,7,1,-5,13,0,3,4,1,-17,7,-14,0,0,5,1,3,2,-3,-1,14,-1,-1,0,4,-20,6,-6,11,4,2,0,2,-12,-4,4,-14,-3,4,-2,10,3,2,-7,6,-10,0,1,9,7,-7,2,1,-4,4),
	    28 => w(5,-10,0,-3,-1,-4,5,-10,4,-3,-4,0,2,-1,5,11,12,-12,-1,-5,-1,0,0,-2,-4,5,-6,-5,-33,13,0,5,6,4,13,-7,-40,-12,-2,8,-12,-2,3,-2,1,-6,-1,8,16,23,-3,-5,2,-1,-13,-6,-20,-4,3,18,14,-6,3,1),
	    29 => w(-14,-1,-2,1,6,2,-2,-1,-7,3,-1,-2,0,-5,3,0,9,-14,2,-8,7,-10,7,8,0,-11,-6,-2,2,16,2,43,-3,6,0,1,-3,-17,2,-3,-11,8,5,28,4,6,-5,2,-4,-3,1,7,-7,-12,-4,2,-10,1,-14,-15,19,-14,-1,-9),
	    30 => w(5,2,-8,-26,-4,14,-20,-17,-14,5,6,-2,-8,2,1,-3,-1,-4,1,-12,-1,-23,-5,-1,0,-13,4,5,11,6,-6,0,4,2,10,-4,-24,2,3,-2,-6,-13,-11,9,1,-10,-4,-2,-5,-3,0,3,1,-4,10,8,-11,-13,-1,-2,5,-4,-1,-2),
	    31 => w(1,0,24,-5,-2,-2,0,3,7,6,2,9,-4,-5,5,6,-6,-7,-17,6,19,-4,-3,1,4,-5,26,17,0,5,6,37,3,0,-29,2,-5,8,12,1,19,1,13,0,4,-13,-19,-4,1,21,2,4,11,-4,6,-4,-6,7,-2,18,-8,-11,7,9),
	    32 => w(4,15,6,10,16,2,-1,5,0,14,20,5,-6,-9,3,6,-11,10,14,-10,4,-1,10,-13,-5,5,-4,-7,-12,14,8,-1,1,3,29,5,-14,-2,-7,-4,-5,7,-16,-6,6,9,37,-17,30,-1,0,-20,17,3,-3,9,0,7,-6,13,15,-19,1,-6),
	    33 => w(-2,3,-11,37,11,-8,-8,-1,-15,3,43,-5,2,1,9,16,18,2,6,16,0,23,-2,2,-3,3,-5,-6,-4,39,-1,13,-1,2,-1,12,9,-13,1,-21,2,2,12,6,1,-4,6,1,10,19,8,9,11,-10,2,-2,-3,1,4,28,7,33,13,6),
	    34 => w(12,6,8,26,42,20,3,5,19,11,12,4,16,33,-1,2,-14,-13,2,-17,2,14,-9,4,-3,1,-7,0,-2,-18,12,-2,-3,-1,-18,14,4,3,0,8,6,25,-6,-12,2,13,-24,12,-10,8,1,4,7,6,-27,-3,1,19,-8,1,8,1,-5,2),
	    35 => w(-4,16,5,-16,6,-3,-2,-12,-3,14,6,4,1,31,9,2,-10,-3,3,15,19,-2,10,-4,9,1,-3,17,2,3,-11,9,2,-6,9,6,8,33,0,-5,23,-5,3,2,-2,6,3,1,-7,-2,7,20,10,-6,9,-4,19,-1,2,13,19,-15,25,16),
	    36 => w(7,6,-4,2,0,0,4,-5,5,9,1,-4,-4,-3,2,1,6,-5,1,5,-2,3,5,-12,9,-23,1,3,2,-9,8,-9,1,0,-3,9,-9,1,-4,2,1,-3,7,-18,3,1,11,-3,-5,9,0,1,7,0,3,7,5,-8,0,-13,-3,3,-3,1),
	    37 => w(11,3,4,-1,-1,3,-1,-10,3,10,3,3,3,-2,6,-6,-9,7,4,3,8,-8,3,10,-1,3,-1,-2,-2,4,1,-11,-1,-6,2,2,4,0,-10,-2,4,-3,-7,-6,-3,5,7,-1,-2,-7,10,8,0,6,-2,3,-13,-2,4,-2,7,3,2,5),
	    38 => w(-1,0,6,-5,6,-12,3,-6,21,-6,-6,11,-4,-10,-5,3,-2,3,-3,3,4,-5,-2,-3,-3,-1,-2,4,-3,14,4,0,-2,-3,-2,-2,0,2,-3,3,10,5,1,6,-9,-1,-2,6,6,4,3,-2,5,3,1,1,3,-8,4,6,4,-1,-2,0),
	    39 => w(7,-1,6,6,-3,3,45,-4,-5,-6,13,2,-2,1,-3,-1,-32,-8,0,2,4,-2,0,4,-10,-2,1,-7,0,1,2,0,0,11,-3,-4,0,8,-13,3,-6,-17,1,-4,-2,-1,0,-1,-2,3,2,6,3,2,-6,-7,0,-5,-34,8,1,5,8,-6),
	    40 => w(1,11,8,-15,-13,-1,11,-5,1,-8,4,-4,13,4,-4,-13,-11,0,-3,6,-9,-2,-15,5,-2,-1,-3,28,-1,0,-2,-3,-11,1,2,5,3,-4,0,35,2,-8,7,5,4,2,-12,0,-6,-3,-5,8,-4,2,2,3,-2,4,0,2,8,-6,-2,4),
	    41 => w(-7,0,3,1,2,0,-1,-1,6,-4,-5,-3,-15,4,6,-7,1,-5,5,1,-12,-4,-3,-2,-1,-10,13,1,5,6,5,-1,-6,-1,-1,0,1,1,-3,12,-5,6,-4,8,3,-1,1,2,9,-15,-4,-5,-2,-3,5,-6,-2,0,-1,-2,0,-8,-46,8),
	    42 => w(-22,-3,-2,-3,8,3,3,3,-2,-6,7,-6,0,-8,-1,-2,7,1,1,13,-4,-15,-5,0,-1,-1,0,10,-1,-3,-16,4,18,-8,-11,-6,-3,-6,2,-3,-11,-3,-1,-5,-2,4,-1,1,-9,-4,3,4,-5,9,-7,-7,-5,3,9,-12,-3,0,2,5),
	    43 => w(21,-3,1,-11,-3,3,7,-5,5,-5,-4,5,3,-9,-7,0,3,3,5,-6,-5,5,5,2,-3,-4,-2,-1,4,-2,-1,-3,-1,-9,2,7,2,10,4,11,-1,-1,10,-1,-3,0,-4,-2,12,2,-7,0,0,-6,12,-3,10,-12,-7,-2,-7,0,-1,-6),
	    44 => w(9,-4,-18,2,0,2,1,2,4,13,7,8,0,-3,3,3,6,0,-2,-13,2,5,0,-27,-4,-36,2,-3,-2,-7,-13,8,7,1,-11,-8,3,2,-31,-4,2,20,-2,20,-2,-5,4,35,6,1,3,6,-1,-2,5,-12,-12,-10,0,-3,-1,22,-5,-5),
	    45 => w(-15,-2,-9,-10,5,-2,9,14,8,3,-13,1,-3,2,-1,11,6,9,-2,8,-3,-2,3,-3,3,-1,3,-20,2,4,1,2,0,0,-2,6,-2,-3,19,0,5,-1,7,1,2,4,-2,2,-2,3,-1,10,-4,13,0,1,1,11,-6,-9,-4,8,0,1),
	    46 => w(4,-1,9,-3,1,-4,1,36,11,-1,-3,-2,6,13,1,-1,-4,-3,2,-23,-13,6,-2,2,3,-2,2,-9,-4,14,1,-1,-3,-1,1,-17,-4,3,-1,0,1,0,0,0,-5,6,0,4,11,3,-1,-4,0,-6,-4,7,-1,-3,12,-3,11,4,2,0),
	    47 => w(1,-1,12,2,2,1,4,-2,1,6,13,-1,1,9,5,2,-58,-2,-2,3,-3,-6,-5,-4,0,-3,1,6,-2,-5,4,13,-3,1,5,5,-1,4,-21,-2,3,-1,-9,6,-3,-1,-2,1,-1,-1,4,2,4,-9,0,-4,-13,-1,4,14,5,3,1,-9),
	    48 => w(8,7,4,-4,8,7,-5,-9,3,5,-33,-2,-3,-3,-7,-17,4,-9,-6,6,-5,-1,1,3,-4,1,-7,-3,-3,-4,6,2,-11,-4,-2,5,-3,-5,0,10,1,2,-6,3,-7,6,4,-5,-7,-3,7,5,-4,5,-9,4,4,8,-13,8,-4,1,-5,11),
	    49 => w(7,0,3,-15,1,-1,8,-5,-8,0,6,8,-8,7,-13,-9,-9,-14,7,3,-4,-19,-6,2,-2,1,8,-2,1,1,1,1,-1,-2,-4,-2,5,-1,-1,4,-2,2,-4,0,-3,-2,-1,-2,-3,-16,5,8,4,6,2,-4,-7,-5,-2,-2,1,3,-68,-5),
	    50 => w(-4,-5,1,-5,-11,4,-9,2,-5,-5,4,-7,-5,6,-4,-3,2,0,0,1,-1,1,3,-17,3,-11,4,-1,0,-4,-16,1,-10,13,9,-13,-2,-6,2,-9,-1,7,-10,-4,0,12,2,5,3,-4,-4,9,-2,-5,16,-4,-1,4,-9,-11,-3,2,2,6),
	    51 => w(-12,10,9,-9,3,-2,0,-6,0,-10,-6,14,3,11,-5,1,-7,-4,6,-1,7,0,7,11,3,10,1,-5,2,7,2,2,-7,6,-5,24,-7,-1,-5,4,6,2,-1,-1,5,-5,1,18,3,-2,-12,8,-9,-6,14,-2,2,-4,2,2,2,4,-2,-4),
	    52 => w(4,3,3,2,-3,-2,2,9,-1,-14,-5,4,0,-11,2,3,-2,2,-3,2,-8,-4,2,8,3,8,-5,-6,22,-16,-2,0,-3,-3,-9,0,2,-8,10,1,-4,-9,-11,-8,-5,-8,4,-4,19,6,0,-6,1,3,-2,-31,-27,-3,-5,-23,-1,-13,-1,-2),
	    53 => w(-8,2,-1,0,12,-3,-4,-11,1,-12,1,0,5,1,0,0,4,-2,0,-18,3,5,-3,1,-2,6,-18,-7,7,-10,-1,13,0,-11,-1,17,-7,21,0,-2,0,4,0,-9,3,-4,1,0,4,2,18,2,-1,6,1,-8,0,4,22,-34,26,-15,6,8),
	    54 => w(-3,1,-12,39,-6,-20,10,-31,-24,0,2,7,-9,-24,2,0,5,0,-2,0,22,6,-8,-9,-8,-12,-7,2,9,14,4,-1,3,-5,-8,-21,-6,-5,0,3,-8,5,-4,-5,-6,-11,-5,-6,-2,-1,2,19,-1,6,7,-8,0,9,1,-2,8,-3,3,-1),
	    55 => w(0,-20,-8,3,2,7,8,2,0,5,-2,-7,0,-14,-2,-7,-3,6,-5,6,-1,4,1,9,-4,4,-3,-6,6,0,-3,15,0,4,-3,-8,-2,-11,-10,-3,-31,8,-4,6,-2,6,-5,-3,-2,24,1,1,-1,-4,2,-22,-19,2,-2,17,-7,2,2,-5),
	    56 => w(-7,6,-7,-1,3,0,-3,-7,1,12,2,14,2,1,0,6,-3,-2,2,-2,-1,5,-7,11,-9,3,-5,5,-6,-3,-1,0,-2,1,-1,-9,-4,6,-5,-6,-3,-1,-9,-13,-4,-10,-7,5,-6,-8,-1,-1,1,-1,0,-7,0,8,1,35,4,2,-11,-9),
	    57 => w(3,0,3,4,-2,3,-5,-15,-1,3,2,-2,-8,9,1,-7,20,-4,-3,-17,7,-2,-1,1,0,-3,2,4,4,17,-10,-4,2,-2,-1,2,0,5,-6,6,-6,3,6,3,-2,-2,5,-4,-2,-7,-4,1,5,-16,3,-2,0,-4,-7,0,9,-1,7,6),
	    58 => w(0,1,4,-24,5,0,-3,9,-1,1,1,-7,6,4,7,0,15,-5,0,0,8,-1,-2,-1,-4,-4,-6,10,-3,-2,1,0,8,-11,-11,2,1,2,-4,-5,-4,-5,-10,6,-2,-7,-3,-8,-10,-7,0,-3,1,0,0,5,3,-8,15,-6,-2,4,-6,1),
	    59 => w(0,-5,-16,-8,1,1,3,-4,1,6,13,0,2,-1,4,-2,7,-7,-1,-2,7,4,1,-2,-1,-3,0,9,2,10,0,-6,-9,-3,-8,0,3,8,-3,2,1,-9,4,2,0,-10,1,-9,4,3,-9,1,12,0,4,4,11,14,3,-1,8,-7,2,-1),
	    60 => w(2,6,-6,-7,-4,4,-10,0,1,-2,1,-5,0,-3,1,3,-8,0,20,-1,2,0,21,-3,-1,-2,5,6,-5,7,-8,-1,5,-8,4,-1,13,14,-2,1,-2,3,-4,-2,-1,-5,-26,-9,3,-1,-5,-8,-7,4,5,-1,-1,-2,-5,-2,-2,1,-8,-3),
	    61 => w(-2,-1,-5,3,-2,0,-11,2,-1,-1,-2,-17,8,2,-6,1,9,-1,-1,-2,5,-7,-4,3,1,41,0,-1,1,-7,0,1,-1,8,-6,3,-7,10,0,6,-2,-3,2,-3,-16,3,6,-2,-1,-2,-2,-4,0,-2,9,1,5,-1,-2,15,2,-1,3,-9),
	    62 => w(-3,-9,0,6,-5,-4,-8,-7,4,0,3,1,-11,5,1,-10,-7,-2,0,-3,0,-22,-5,20,-4,-2,35,-4,3,6,0,1,1,-9,0,-3,-5,1,-4,20,15,6,33,6,-1,1,4,0,0,-4,8,0,3,-1,-6,3,-3,1,14,11,-9,-3,3,-2),
	    63 => w(-4,4,-10,-1,-2,-7,-4,-3,-13,-4,-14,-3,2,-8,4,2,-1,0,-4,-7,-8,-2,-12,6,-7,-8,-1,-2,-3,6,23,-9,-1,-6,-16,4,-8,-8,-12,0,5,0,-4,-3,-1,2,-3,-9,10,0,42,-14,2,-3,10,-1,-6,7,-2,-6,8,-8,1,-3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;