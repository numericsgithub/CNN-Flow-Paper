library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core14_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core14_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core14_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-1,7,-1,15,-10,5,16,-7,0,1,5,-2,-2,-2,-18,4,1,4,-6,-3,1,0,-11,-2,1,-3,10,0,-5,4,-3,1,-1,-6,7,0,-24,-12,-2,7,16,-8,-1,-3,0,-7,-5,-12,2,2,-3,-5,-7,7,1,-2,0,3,4,-6,-11,1,5,1),
	    1 => w(9,-3,0,9,1,-3,-3,0,1,-3,0,28,21,1,-4,0,13,1,44,-7,-10,13,1,-7,0,-35,-7,4,4,-7,-2,-14,-3,-1,-18,0,3,15,-2,5,-1,2,-6,1,5,1,-39,9,-3,-5,1,-2,5,7,0,-2,-9,1,-1,4,-1,3,2,-3),
	    2 => w(8,-3,-2,-1,7,4,4,2,-6,13,24,1,4,1,2,0,-2,9,-1,-11,4,-5,22,0,-9,-35,-78,4,3,-4,8,-5,5,3,-8,-6,-3,-2,-3,15,-3,-9,-48,0,-1,-5,-2,-5,3,4,2,2,-1,-10,-11,-31,-20,-2,2,-2,1,-2,-2,-1),
	    3 => w(4,-3,-6,-24,9,2,-4,-2,-8,5,-2,8,-7,-7,3,1,-4,3,1,-6,-1,-1,-11,1,-9,-4,-6,0,-1,13,0,-4,-4,-5,8,3,22,1,7,-2,10,-1,-3,4,3,6,3,-13,9,6,7,-2,10,1,1,-3,3,-2,-6,2,0,0,0,-1),
	    4 => w(1,0,-3,-22,-54,2,2,7,1,-16,14,4,2,-3,0,2,-7,3,-40,4,0,0,-22,1,-2,-1,-10,4,-2,7,-12,-2,0,-4,15,5,7,-26,8,5,-17,-10,-1,0,1,6,-18,-2,4,4,-2,0,-2,-1,38,2,3,0,2,-2,3,3,-4,4),
	    5 => w(3,8,5,23,4,0,2,3,6,-5,4,18,-10,-1,5,21,-3,-5,44,-17,1,-36,3,2,1,-39,7,-10,-9,-1,-4,-3,5,10,-9,1,18,4,5,10,0,5,-2,1,-13,0,-19,1,2,-23,-4,-5,5,17,-1,0,-4,-3,1,1,-1,2,3,5),
	    6 => w(-7,1,0,-1,6,11,14,-5,4,1,-26,1,14,-9,-2,2,-4,2,0,-7,2,9,-16,4,0,-7,30,2,-1,12,0,-1,29,-6,-2,-2,-4,-1,-3,40,7,21,-28,-2,-1,-2,21,2,-5,-3,3,-7,-2,10,0,-9,12,4,-7,-16,7,-2,6,0),
	    7 => w(8,-5,-4,6,-1,5,6,0,-3,-4,13,-57,0,5,1,-1,10,4,1,7,-13,4,32,0,0,-5,-1,1,2,-4,-20,1,3,3,4,2,-3,13,14,3,-13,-3,0,-6,4,-4,5,8,15,-1,3,3,8,0,-7,4,2,-1,5,-5,19,5,-8,6),
	    8 => w(4,0,2,3,-1,1,-1,2,1,13,-11,-1,2,-4,-2,-1,4,3,-1,11,0,3,3,-1,-5,5,4,2,-3,-7,-5,3,-6,-2,2,6,2,-1,-7,6,1,14,1,-15,4,0,1,14,-7,0,2,-1,-1,0,-1,10,-1,-2,-1,7,-2,8,-4,7),
	    9 => w(35,-9,-3,-5,-5,-1,-6,-3,2,-27,3,4,1,4,-5,5,7,-8,4,-2,-2,-3,-1,3,-3,5,-5,1,-2,-1,7,-2,0,-10,1,-13,-4,4,-21,6,-8,1,3,-5,-1,-1,1,1,4,-8,-4,-2,-6,0,2,-2,-8,1,5,-8,7,0,1,6),
	    10 => w(3,1,6,0,3,5,-7,-9,12,1,3,-1,5,11,-9,-1,0,8,1,-14,-11,5,-2,3,2,-1,-1,-6,1,1,-6,1,1,11,4,-7,0,2,3,2,9,4,2,2,-4,-3,1,3,1,-2,0,1,-2,2,1,3,0,-8,-10,1,5,-11,24,-2),
	    11 => w(-4,6,3,1,3,-13,-14,-6,1,-1,7,0,-1,4,-1,-1,42,-9,4,9,-7,10,-5,6,-15,1,0,-18,1,-1,8,11,-3,-7,1,-5,7,11,3,0,9,-3,-10,7,5,4,-2,22,0,-4,-1,0,4,-3,1,10,9,2,30,0,-3,-4,7,-2),
	    12 => w(-5,2,1,-25,0,-2,-4,13,1,0,3,-5,-2,0,-20,12,-5,7,-4,-4,-1,1,23,2,-1,-5,26,-12,0,24,15,7,2,-10,10,-8,4,36,1,-1,28,-1,-2,-4,6,-3,7,0,3,0,-8,8,0,-11,-16,-3,-1,14,16,-3,-17,-3,-10,4),
	    13 => w(0,5,-3,8,1,2,-5,-2,-5,-3,-10,26,15,0,22,5,13,9,-35,10,20,-3,-5,0,-2,36,-11,1,0,-1,-4,6,5,-4,-4,11,3,-22,0,-2,5,9,0,2,0,-1,-6,5,-2,18,-11,2,-2,5,-35,-3,3,11,3,21,-10,12,12,-2),
	    14 => w(9,-2,-2,-26,-10,11,-9,-12,-4,-5,-8,-5,9,9,13,0,1,2,-1,-5,-3,-12,34,-21,18,-1,33,6,-1,-17,4,-3,17,8,11,7,16,-6,-9,-7,8,14,21,-7,-2,6,-5,-5,-7,9,14,6,-3,-24,-5,8,31,-6,-6,-1,6,3,-10,-3),
	    15 => w(1,0,1,-9,-11,4,-3,-3,8,14,1,10,-2,5,4,1,-16,0,-8,24,-2,-2,-17,1,0,-29,2,4,4,6,16,8,-4,-3,11,-4,30,0,-9,-5,9,-7,-3,7,-25,6,3,1,-29,-12,-2,15,2,1,-15,-12,2,5,-3,1,11,6,-3,1),
	    16 => w(2,4,-5,22,-15,1,-1,0,1,6,-3,2,2,-10,11,1,9,0,49,5,-2,-1,34,1,1,-1,-6,-6,5,8,5,-6,-2,19,-9,2,8,-25,1,-6,-18,4,1,-1,-2,4,-16,-1,20,0,4,1,2,-10,-27,5,2,7,-7,-1,-7,4,0,6),
	    17 => w(9,3,7,9,7,3,1,-2,2,-8,7,-18,9,-1,-5,6,0,4,-7,0,7,1,4,2,-1,28,11,-12,-9,-13,-4,-11,2,13,0,-4,1,38,0,10,-1,5,0,-1,3,2,5,-3,3,7,11,-5,2,5,-7,1,-6,-7,13,-12,-2,5,2,-5),
	    18 => w(-7,0,-2,4,8,5,-1,5,13,-2,7,3,13,-4,-3,3,1,7,0,-2,10,3,4,13,8,-8,25,1,-3,6,5,0,4,-7,8,10,2,2,1,-16,-4,-10,-16,2,2,2,-28,1,10,-4,-17,2,6,2,-5,5,-30,4,6,-24,6,-1,3,3),
	    19 => w(13,-5,-10,9,-2,5,3,0,-1,-4,13,64,2,10,-3,-7,12,3,-6,12,2,4,-50,5,-4,-1,2,-3,1,3,31,5,1,14,-1,-4,1,15,1,3,-5,3,2,6,7,-2,7,19,2,12,12,8,7,6,46,-6,10,4,0,1,0,10,1,3),
	    20 => w(7,4,-3,0,-39,4,-7,5,1,-7,2,-3,1,8,-2,0,-1,-1,-1,9,-5,4,-18,6,1,-1,-11,18,6,3,-3,11,-7,2,2,1,2,-7,1,-2,-3,-7,-7,-4,-3,1,-25,6,-16,-3,-1,7,6,4,1,0,1,9,1,10,20,0,-1,10),
	    21 => w(-7,-5,3,2,1,3,-7,-8,-2,5,2,3,-23,14,-1,6,3,3,14,-5,-5,0,1,3,1,-31,18,-4,3,3,6,8,-13,16,2,10,22,0,-3,14,-1,-2,-2,7,3,1,-4,3,0,-29,-3,3,1,5,8,-6,2,-14,-7,8,5,0,-39,8),
	    22 => w(-31,-3,3,-5,2,8,7,8,-2,-6,-20,-7,7,5,-1,1,-3,8,3,-2,-4,-5,-7,18,-1,-7,10,13,2,2,11,0,41,16,2,-9,8,-11,1,7,0,3,-11,-9,0,10,5,4,1,-6,1,4,-3,15,3,-9,-10,1,-10,-14,-1,2,1,3),
	    23 => w(-16,-4,0,-15,4,-6,7,-8,0,-3,-5,-5,3,7,5,4,7,-1,7,-2,-7,2,-3,4,5,-5,1,-7,2,4,11,1,-3,-12,6,-14,0,13,5,6,5,5,-1,5,-3,0,3,-13,18,-1,-15,4,10,-3,10,7,5,-8,-8,0,9,4,-3,4),
	    24 => w(1,-17,-5,11,3,1,-4,1,-3,7,0,4,0,-7,2,-2,4,2,7,-3,-1,7,8,-4,22,5,2,-6,-3,-1,-12,-12,-3,2,-1,-8,2,1,25,9,5,29,-4,5,3,-1,4,11,11,2,3,-4,-4,2,9,-1,2,1,2,1,5,22,-9,-31),
	    25 => w(18,15,2,8,20,3,3,-16,3,2,-1,7,7,4,7,-14,13,-2,-2,-4,6,-6,-2,8,6,-1,-14,2,-1,-2,2,4,4,2,1,4,-3,-4,15,7,7,7,10,-2,2,3,4,1,2,-7,0,-9,-2,16,0,9,-10,1,0,2,11,28,-3,8),
	    26 => w(0,-2,-1,3,9,16,7,-11,-7,-1,7,9,-2,11,3,3,12,-12,-3,-10,-2,5,3,5,0,5,-1,43,10,9,5,0,10,4,9,3,3,0,-2,-5,-1,8,1,2,8,-7,5,-19,-5,3,4,0,6,0,1,7,3,0,2,2,-10,2,-22,-8),
	    27 => w(-1,23,3,3,5,7,1,-2,-3,-3,-3,-4,-1,21,0,-2,-2,-7,4,4,3,9,1,-2,14,0,1,2,3,0,5,11,13,-25,5,1,-4,5,-4,3,7,6,-11,1,2,-4,-1,-7,1,-6,8,3,2,0,-4,10,-15,1,-1,-3,5,1,-2,2),
	    28 => w(-6,-3,-1,2,5,-3,-2,-6,-2,9,4,-2,-14,-2,-4,0,11,-3,-14,3,-3,0,5,-6,0,-3,2,-17,13,12,3,0,3,-2,17,2,-13,-6,-5,0,-8,16,6,-3,-2,-4,-4,-3,-7,1,5,8,6,0,-11,0,-2,5,-7,9,-7,-2,-8,2),
	    29 => w(6,7,1,-11,-3,3,-13,1,-5,0,-22,-9,7,1,-10,-14,-2,2,7,2,7,-9,2,6,-3,24,-1,5,-1,-2,0,-5,-3,-10,3,1,0,-5,-5,3,-1,1,1,-11,-6,-2,7,-1,-11,-1,-4,4,-1,5,2,2,-6,6,-15,9,10,-6,-3,-10),
	    30 => w(-7,1,3,-12,-2,-7,-11,5,-1,4,-3,0,-13,-9,3,-4,3,5,2,8,3,8,-5,-7,5,3,-2,-6,-1,-6,-14,-3,-35,2,5,-7,3,-3,-4,8,-22,-14,3,-7,5,12,0,-3,13,3,-8,2,10,5,4,-20,1,24,-11,8,-3,4,7,0),
	    31 => w(2,0,8,12,2,-2,-1,-1,-3,0,9,-8,3,-1,2,-6,1,3,0,2,-18,-7,-10,-1,4,9,2,7,1,0,-6,5,-7,-6,7,12,3,-8,6,0,-8,4,2,5,-3,2,-1,15,-6,3,9,0,2,-1,-3,-7,-4,2,0,-3,-8,6,0,1),
	    32 => w(-7,7,6,-1,-3,2,1,-7,1,-19,-1,5,1,-7,-3,1,4,9,-1,7,-7,-2,-7,0,-4,6,-6,-2,6,-9,-9,4,-15,-9,6,3,-15,4,-2,12,-7,-1,-5,1,-17,-3,-5,-4,10,-17,-1,-15,2,-2,-4,7,-18,14,-4,12,-2,-15,-6,1),
	    33 => w(-12,-8,-2,-4,22,2,-6,-19,-13,-19,-3,5,0,-6,-4,7,1,4,-1,-48,3,3,-5,11,-8,0,18,-7,16,19,-6,13,4,-3,1,-20,-2,15,-6,-3,0,-5,-4,2,-4,-11,-3,-2,5,8,-23,-6,-5,-18,-1,7,-21,-10,8,-4,29,1,4,-3),
	    34 => w(-1,3,-2,4,-6,36,-6,-23,-1,-9,-4,1,-4,-15,-3,-7,-2,-17,1,-16,-1,-13,-1,-7,-9,-18,-4,0,-5,-10,-1,-1,2,1,-8,-28,-2,5,-2,-5,-30,0,-2,-1,-14,-7,-4,2,-15,-9,6,1,-2,0,-8,-9,2,0,-11,-3,4,-7,5,5),
	    35 => w(-11,5,-3,-7,3,-4,6,-18,0,2,-4,-3,-2,-16,-4,5,-16,-14,-15,-5,-17,11,4,27,-12,3,1,-14,5,18,-11,29,-2,2,-2,3,-1,-5,-29,-1,21,5,-11,1,2,-4,8,-9,2,-1,-9,-5,-7,-2,-3,-13,38,4,-8,-11,-1,-14,-7,-3),
	    36 => w(6,-2,-8,12,1,3,-2,12,3,15,4,-7,10,2,-2,1,-2,10,3,-2,3,-2,-10,-11,-8,-8,6,0,4,3,23,6,8,-1,-7,3,-4,-6,-10,-3,1,-4,-18,6,7,1,1,9,1,6,2,7,-4,2,5,-2,0,-5,2,-11,-6,8,6,5),
	    37 => w(5,8,-2,-1,-15,1,2,4,0,3,-9,3,-5,0,-1,-16,-12,-1,-20,3,7,11,-3,-15,7,5,7,10,1,-37,7,13,3,0,0,5,-1,-2,-3,-7,18,-1,1,5,-3,6,6,0,0,-6,-1,-1,-1,-3,5,17,4,-2,4,5,-23,9,12,-2),
	    38 => w(2,0,4,1,-7,-6,-8,5,-14,6,-17,-11,-8,3,1,-2,-3,-1,2,0,-3,-7,1,-4,1,1,-14,4,2,-8,-6,-2,3,2,7,-12,3,2,-1,-7,-8,1,1,-7,5,-8,3,-2,9,4,0,11,-2,2,-4,-2,-7,7,5,-1,-3,3,-2,1),
	    39 => w(5,9,6,-2,1,-8,-2,25,0,-1,-11,1,-4,-7,9,7,-6,-1,20,4,-9,-2,10,-5,5,0,-1,6,-3,-7,3,-2,-2,5,9,-2,4,5,-1,-2,2,-1,-3,1,3,24,-3,17,-2,2,-2,4,-6,2,-3,10,-12,-6,-3,5,3,10,2,-3),
	    40 => w(13,-15,-2,3,-4,2,0,1,-1,-2,1,-7,1,3,0,4,6,3,6,-6,-3,-7,3,16,16,15,1,0,11,18,-12,-1,-3,-6,-16,0,0,2,6,-6,2,-6,-2,2,-20,-6,1,-15,-4,2,6,-5,1,0,-2,-2,-2,-1,-2,-7,-5,-22,17,-6),
	    41 => w(-1,3,6,1,-21,9,-4,21,-3,-24,-14,-3,-3,4,1,4,4,10,1,-9,-5,11,7,4,-1,6,-2,-9,5,-8,1,19,3,12,3,-10,4,0,10,-4,1,6,2,3,10,-3,-1,-1,-6,13,-9,4,37,-3,1,1,6,-7,-4,-10,27,2,5,-15),
	    42 => w(-2,0,5,7,8,12,-7,3,-48,0,-2,7,-6,-5,0,0,11,1,-19,4,-8,-6,-3,6,1,3,5,28,14,12,2,-1,3,6,-2,14,6,0,5,7,-16,-5,-6,-5,-25,-2,3,-9,0,1,-3,-1,-3,-1,3,-1,8,-1,3,-1,-17,4,7,4),
	    43 => w(9,-41,-8,-1,1,15,15,-1,-1,6,0,3,6,-35,13,-2,4,20,8,-13,8,-1,0,0,13,-2,5,6,4,2,5,8,7,-13,-2,13,5,-23,-2,-2,3,17,-13,-3,2,0,9,-6,-3,3,-5,-6,-1,-6,4,13,-5,-3,-26,-2,15,-1,-4,15),
	    44 => w(-3,-16,-9,-4,-7,1,-1,-3,5,-2,-6,-18,0,4,-3,-14,-4,0,-4,7,0,5,-9,4,2,-13,-3,8,-7,-12,3,-16,-1,-7,8,-1,-3,-2,4,16,-3,-5,2,-12,-3,2,-5,20,-9,-3,-6,4,13,-6,-10,-4,0,-7,-5,-4,-5,-9,23,-12),
	    45 => w(8,18,7,4,-1,5,-8,-7,8,-9,-11,-9,-4,-2,-5,-19,-8,-1,0,-3,-12,-14,-8,-4,3,-2,-4,-9,22,-3,15,-6,6,-8,2,-4,-1,8,-2,2,-2,-7,6,4,-9,4,-7,5,-3,-19,0,-7,-4,-7,-2,2,4,15,1,1,-11,0,-14,-2),
	    46 => w(-14,1,-1,-5,-9,-1,-8,-6,-10,-5,9,8,3,-12,-8,0,-7,-13,2,3,-1,1,-2,-4,-3,-8,-2,2,2,-5,-41,0,9,-23,5,-11,-3,2,1,-2,7,-14,-1,6,5,-9,-7,-8,-4,5,-7,2,-3,2,6,-6,-4,4,-2,-10,-7,-10,-11,1),
	    47 => w(3,0,-8,-4,2,-3,-3,6,1,-1,1,4,3,8,-8,3,6,0,-4,-8,-7,-1,2,-3,-10,1,0,-3,2,-8,-6,2,18,-5,4,4,-5,-10,-12,-1,1,-1,18,-5,-2,-3,0,5,-5,4,-3,1,-7,-2,-8,-3,8,-12,-5,-9,-12,-2,1,-26),
	    48 => w(-2,-5,0,6,-5,-2,-2,5,-8,4,2,15,1,-2,-1,4,-5,1,2,-8,2,-7,-8,21,-15,11,-4,1,8,-10,15,-2,-1,-3,6,-20,-8,2,-3,-2,2,-8,2,2,5,-2,1,-12,-8,9,0,-10,-6,-6,-6,-12,0,10,5,-2,-7,7,-11,12),
	    49 => w(1,7,0,9,14,14,-5,2,-26,-11,-7,4,2,1,-1,4,0,-4,0,-10,3,-2,1,4,1,-3,-7,3,-1,28,-3,-11,0,-6,2,-5,-1,-4,-4,3,6,2,-32,-13,-6,-1,2,2,2,2,7,5,17,2,0,0,-4,8,5,5,-2,11,-4,1),
	    50 => w(0,-1,-6,2,-3,-9,-3,-3,-13,3,0,4,0,11,-5,-4,-11,1,-7,-15,-12,6,-2,2,1,4,-6,-6,-15,8,-7,0,-1,7,15,-7,-4,-5,2,-4,8,-5,-3,5,-20,0,-6,23,-4,0,-1,-1,1,0,2,-4,0,11,2,-7,-10,-7,-10,-3),
	    51 => w(-8,4,2,-11,-4,-13,12,-2,0,9,5,-2,1,-18,6,1,-6,-36,10,15,-1,-5,0,2,29,5,7,-2,-1,4,-8,-3,7,-3,-12,13,2,10,-1,-1,1,15,7,-6,5,-1,3,19,-2,-9,-8,0,0,-34,1,2,-11,5,2,-3,-3,-6,5,6),
	    52 => w(1,-1,7,-12,-16,-2,1,14,-2,-4,-13,-3,2,0,0,-7,-11,-1,-9,-4,4,3,0,1,7,0,5,7,4,-6,-1,13,5,-5,-6,-1,0,-2,1,15,-6,-3,-3,-1,3,2,8,5,2,3,0,-5,6,2,-2,5,-5,7,-1,17,-13,-6,-13,1),
	    53 => w(-3,8,-2,11,1,2,5,-16,-10,0,-5,2,7,27,0,-16,8,-6,-6,5,11,-8,2,-13,3,10,-5,-7,-10,-10,-14,3,-7,2,4,1,8,4,-4,-15,6,1,-6,-7,-5,-1,-2,0,2,-3,6,0,2,0,-6,10,0,-4,1,6,-6,-8,-15,-3),
	    54 => w(2,3,-6,4,-1,6,-4,-1,7,1,2,4,-19,-3,3,0,29,8,-1,4,-6,-2,-2,-3,-6,3,-6,15,-1,-5,-3,1,-9,1,20,-3,0,4,5,3,2,-3,2,-3,0,1,-6,4,21,3,-5,5,2,-4,0,-1,0,2,7,3,-1,9,-1,-2),
	    55 => w(23,13,9,8,-7,8,1,-4,-4,-6,-7,-3,0,-7,-7,-5,0,1,0,-4,-7,-6,-3,1,2,-1,2,5,-1,-3,-2,5,-6,4,-1,-2,0,-12,3,-2,8,-6,5,0,-1,-11,7,-4,-6,3,-1,-2,-2,1,-4,-1,-17,5,2,-10,-20,0,-2,-3),
	    56 => w(12,-2,-4,-1,12,1,3,1,8,9,4,-2,2,-1,3,8,1,2,-2,-6,-2,-1,-1,-18,-6,3,5,-14,0,7,-13,8,9,1,-5,3,-4,8,-20,-12,2,4,9,-7,-6,-3,2,-3,3,2,-2,-14,-1,1,2,-4,-4,-8,2,6,7,1,-12,-11),
	    57 => w(8,-9,-7,3,-6,3,-15,-13,32,3,16,3,4,-2,-1,-4,4,0,12,8,6,-5,1,1,7,-1,-3,-24,7,-16,0,4,-2,12,-1,14,6,-2,9,-1,-1,0,1,5,4,1,2,3,-6,-3,-6,4,-6,4,-4,17,2,-21,8,9,0,-1,11,4),
	    58 => w(8,1,15,-3,5,17,0,-27,2,-4,1,-1,-7,1,2,0,0,-5,3,-20,-13,-2,4,-4,-2,0,6,-9,2,18,-11,0,12,2,6,5,2,-5,-5,15,7,-7,3,-4,-6,8,6,3,8,8,3,3,-2,-2,9,6,-13,-6,-9,0,15,-1,4,2),
	    59 => w(3,8,3,2,3,0,13,25,-4,1,5,8,0,9,17,6,-14,-7,-2,1,3,0,7,-1,-12,6,-2,5,0,-7,8,3,-2,0,7,7,10,-1,-25,3,-21,2,-8,-3,-5,-1,4,2,-5,3,0,-5,6,-7,-2,-10,-4,2,-25,13,-3,0,-2,-7),
	    60 => w(5,-5,-6,-5,-9,1,3,-11,3,-29,1,2,7,-1,4,1,14,6,-12,6,-3,2,-7,-4,-3,-5,-4,11,12,-23,20,-8,2,-4,-16,3,-28,-14,-4,8,4,-16,-7,-6,-1,7,-16,-6,-21,-4,-15,5,0,3,3,-14,-1,-2,-13,-15,-22,2,-3,-15),
	    61 => w(32,9,-5,-1,-7,3,-18,7,-11,-5,-16,-9,-11,-2,-4,-28,13,6,4,-27,-21,-23,4,-13,2,-7,-2,33,-9,-7,0,-28,-1,-6,-6,6,1,1,-3,4,-6,-3,0,8,2,3,-1,-1,3,15,27,-2,-5,39,10,-8,30,-6,17,7,7,-15,9,-5),
	    62 => w(-3,0,6,-26,-23,-7,9,17,7,-1,-7,5,-12,-5,0,5,6,-9,1,6,0,-18,2,5,2,-7,24,5,0,17,6,1,6,-18,-14,4,-15,18,1,-15,2,12,-3,10,-1,-1,6,-11,-15,1,-13,-4,-12,20,24,-13,2,6,-9,-17,-4,-2,-5,6),
	    63 => w(-11,-11,-10,1,-4,2,7,8,-2,0,-38,-20,8,6,4,-3,-7,2,-7,-8,53,-4,-6,-5,5,3,-11,4,4,-5,-2,-6,-5,-6,-12,-3,-11,-32,-31,2,-9,1,9,-15,-5,-9,9,-1,20,7,-21,-12,9,-8,-10,-10,4,8,-4,9,12,19,7,-16)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;