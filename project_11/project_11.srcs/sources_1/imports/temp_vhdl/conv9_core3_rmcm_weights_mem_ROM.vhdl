library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core3_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core3_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core3_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(8,-3,17,-7,-2,3,0,-5,-1,-2,5,-8,-5,22,5,-1,4,1,3,-4,6,0,0,1,3,-1,-4,1,7,-1,4,-1,-9,-5,-3,-17,-1,0,-1,-2,1,0,-3,2,0,0,-1,-1,0,1,2,-3,6,1,2,5,1,-2,39,-8,-1,0,-1,-4),
	    1 => w(4,7,4,-7,-32,-4,-3,-1,-9,2,4,-11,4,-3,-5,-37,1,-1,-4,0,1,-5,2,-2,-5,4,6,-2,5,-2,9,-1,-2,2,2,0,-6,3,-1,15,-2,19,9,-2,-8,1,55,-2,-4,-7,4,-15,-8,18,-1,1,-1,2,5,-4,0,-5,1,1),
	    2 => w(-2,-65,3,-22,7,0,2,7,5,-6,0,0,0,0,-2,-5,-5,1,-1,-4,-1,0,-2,-1,-1,6,-1,12,0,-7,2,-27,-47,0,-2,-2,-4,-9,16,4,-3,-11,-7,-1,0,1,-2,0,-2,1,0,13,10,6,2,3,11,-3,3,0,1,-3,24,5),
	    3 => w(0,5,4,-11,-1,0,-4,4,27,-2,-4,8,-4,2,0,2,-2,0,-6,-2,3,3,3,-5,-1,0,5,-3,-2,-1,5,6,-4,-4,-3,-1,-3,1,13,2,-6,-6,-17,3,1,0,4,-4,-36,-2,-23,-3,-3,13,-3,0,0,19,0,4,-3,-3,2,-13),
	    4 => w(2,-1,6,-21,7,-20,-6,6,3,10,8,-31,2,-3,1,6,13,-7,3,-1,-3,2,-1,3,33,0,1,-9,8,0,9,1,5,1,-2,2,-4,-8,-22,-2,-5,1,-4,6,-4,2,37,14,-1,-10,-1,-4,4,-3,3,1,-3,14,-1,4,-2,-4,1,1),
	    5 => w(12,-7,-1,-24,-4,-9,-10,-2,-4,2,1,2,-4,-2,0,-1,4,-1,28,1,4,-4,8,1,2,-3,0,-4,5,3,2,-11,-3,11,-5,1,-8,25,6,2,-4,13,-15,1,1,-10,3,-1,-1,-4,-6,-6,-8,12,5,21,3,-2,-16,4,4,2,-22,-5),
	    6 => w(4,-5,-1,0,6,2,4,-2,45,11,-6,-3,-1,-4,5,1,-2,-17,-2,-8,2,-1,13,12,-8,4,-3,5,-1,-3,8,7,2,3,2,2,0,17,0,-6,-4,1,-1,-11,5,26,5,-10,1,0,5,0,1,14,-17,-2,4,-9,-2,-6,-15,0,-6,11),
	    7 => w(-2,3,3,2,-13,-2,-2,-7,0,1,-3,-9,-2,-1,-1,8,-16,4,14,-3,15,7,10,-1,0,5,12,-1,1,7,-3,-12,9,-2,19,1,16,10,-11,9,4,-7,-2,5,-1,-2,4,3,4,3,-1,1,-3,-4,-1,11,-64,-1,2,0,-1,20,-1,-1),
	    8 => w(0,1,0,-16,11,1,-16,4,-2,-18,12,-5,-7,0,-3,7,6,-3,-1,2,11,-6,18,0,13,-3,-4,6,-5,-10,-1,3,-12,4,4,-4,-1,-4,35,0,1,0,-14,-9,0,-1,7,1,0,-3,1,-14,8,-2,-2,10,1,11,-5,-15,-2,-1,6,-3),
	    9 => w(14,6,-8,6,0,15,64,-1,-14,-1,4,0,-18,-3,-12,-2,-4,-2,-2,1,5,7,7,6,-2,4,8,-1,30,26,-3,-2,2,-7,-10,5,34,8,-2,0,2,-20,-2,-1,-4,-5,6,-1,-47,9,1,7,-4,65,4,-6,-1,-3,1,-2,8,-9,-3,8),
	    10 => w(0,2,4,-3,-8,3,-18,6,26,-58,4,1,1,-3,-4,2,0,-5,1,-6,-3,5,5,9,-8,0,-3,-3,5,5,16,3,9,1,-6,-2,-8,-17,1,1,0,0,1,16,-7,3,13,-8,2,-36,-1,4,-6,12,-9,5,-2,-53,-4,-1,-13,4,0,6),
	    11 => w(-4,7,-6,-6,-8,0,20,-20,48,11,-1,5,21,0,1,-13,-8,-3,5,12,-8,5,5,-4,-4,2,-2,0,2,-12,6,24,-8,7,0,-5,11,-2,-12,4,9,8,1,8,-7,-1,-3,-2,-2,4,26,1,2,-7,-1,6,8,-4,0,-2,-13,-16,-3,3),
	    12 => w(4,-2,-6,-11,-22,-4,27,-5,6,7,4,-14,0,-8,4,-1,-9,34,2,3,-11,0,1,0,-27,0,4,12,-5,-3,-7,-3,-1,-26,1,-9,-2,2,6,4,2,-1,17,-2,-7,1,-21,32,-6,5,1,-10,3,-4,8,16,-2,7,-6,-33,0,4,-2,-6),
	    13 => w(-5,5,-12,-3,7,2,-16,0,2,10,17,0,6,-1,1,5,3,1,4,1,-3,-8,16,-12,3,-1,4,0,18,-3,2,-41,0,-3,8,-6,10,2,2,-1,1,0,21,-9,4,10,0,-1,0,-3,-1,-1,-11,2,-3,37,-3,-13,22,0,8,45,15,-13),
	    14 => w(-9,-6,-10,2,13,-4,3,12,-5,5,-3,-13,5,3,20,-1,-1,1,2,-1,-5,0,-9,3,-27,2,5,13,-3,1,-2,-10,7,1,3,1,6,13,-4,16,2,2,-1,3,-10,-4,0,25,0,1,-1,29,-37,1,26,0,14,-1,10,11,3,-20,-5,-2),
	    15 => w(7,4,-1,6,8,-1,2,4,-23,4,-1,26,-8,2,0,17,6,-12,-2,-28,-5,6,-9,-15,7,1,4,0,1,-11,-4,15,-11,7,25,0,-1,2,2,10,6,0,-4,6,-3,-7,7,-21,1,-1,-7,-1,-1,2,-8,9,-15,1,5,1,-5,-7,3,-1),
	    16 => w(-2,-1,5,17,4,18,-24,-24,1,4,-21,17,1,-1,-5,-6,-2,6,5,-8,1,7,5,4,-5,-2,-2,-1,-1,1,6,1,-2,4,-2,5,9,0,-4,-8,0,11,-2,4,2,2,14,-14,-3,3,-2,3,-7,1,-3,0,6,-28,-3,-6,-1,1,3,-1),
	    17 => w(2,4,-11,0,-1,1,10,-2,-1,1,12,-3,22,3,2,4,8,3,8,7,-2,4,97,-4,1,-9,4,-26,-4,1,-2,1,-13,12,1,0,-30,-42,-1,0,11,14,12,-4,2,-3,-12,-7,13,-28,8,-1,-2,6,-6,13,-5,-2,-3,-2,-17,13,-13,10),
	    18 => w(-5,7,-10,-1,-14,1,-1,-6,2,6,0,3,-1,-4,11,-2,4,3,1,8,1,7,1,-3,-17,-1,-1,3,3,2,-10,35,-13,4,4,1,4,-3,-5,13,-17,1,-2,-1,1,9,-2,-4,-1,-5,-4,-7,1,1,2,-5,32,-1,6,4,0,-2,-3,-2),
	    19 => w(-1,-9,0,0,-27,7,-4,1,17,1,-2,11,-3,0,-3,7,4,-1,-7,-9,-8,-7,1,-6,3,-6,0,-1,3,3,-2,2,-20,-3,7,-1,-3,-1,10,-10,-25,35,-5,-3,4,0,7,0,1,-4,10,1,2,-4,-31,0,20,2,-4,2,1,17,9,-1),
	    20 => w(-2,0,3,3,4,-5,-11,9,1,4,4,5,-16,13,-1,-4,-1,11,-1,1,-21,3,1,1,-6,2,2,0,10,8,-1,2,20,5,-21,11,3,-1,10,-1,1,-2,-2,-1,5,1,-2,-3,1,2,-21,-3,-7,-2,-1,-2,0,-7,-6,1,1,7,-1,9),
	    21 => w(-1,7,-2,-1,2,-2,3,1,-20,-1,1,9,4,-6,-4,3,2,-1,-5,-2,2,-1,-2,-1,-25,1,2,-9,-1,-2,2,-14,2,-12,5,0,-2,7,-12,-2,-4,-20,0,-3,14,-2,-15,-1,-5,3,-4,6,1,-8,3,-9,11,2,-1,1,-3,12,3,4),
	    22 => w(-2,5,1,-1,-9,2,-2,1,-7,1,0,1,-2,-3,-1,3,-2,2,-1,4,0,-10,2,-3,-9,2,5,-3,-1,8,-2,-2,16,-28,-1,11,3,1,3,-1,1,17,1,-8,1,2,6,0,9,-2,3,-10,-10,-1,0,1,8,3,0,1,11,5,9,-3),
	    23 => w(1,2,-3,4,6,0,-12,9,14,-2,-2,-3,13,4,2,0,5,-4,-3,-1,-2,-12,4,2,0,0,-5,0,1,-5,-4,-3,-12,2,12,-5,-9,-1,-5,25,-10,2,-3,6,0,0,-3,0,-5,5,18,-1,-3,45,2,6,1,-22,5,3,-6,1,1,-2),
	    24 => w(-3,1,-4,13,-8,22,28,-4,-6,2,0,0,-3,-4,-7,-2,-7,-16,-4,0,14,-1,5,-6,-22,0,14,6,-1,3,-5,1,-5,1,0,8,1,19,-17,3,1,0,19,6,1,5,-33,-6,-1,8,-8,-8,2,-9,9,-17,-7,1,1,-27,1,1,0,5),
	    25 => w(10,-7,15,5,-1,-1,3,1,-6,-10,-16,3,2,-1,-3,-3,1,-1,-8,0,-3,5,0,-14,-4,0,-4,7,14,-5,-1,-29,-3,3,-7,5,-4,-4,-10,1,2,-14,-22,8,2,5,-3,6,-4,-4,-3,9,27,8,-2,-26,-4,12,45,2,-3,-34,-9,14),
	    26 => w(-13,3,8,-3,-3,4,4,8,-22,2,24,-5,-4,-2,-24,-1,2,-1,7,4,-15,-2,-11,-11,-21,3,15,-10,7,5,-6,5,-5,6,2,0,-6,-9,-2,-21,-10,-4,1,-18,10,-2,6,18,2,-5,3,9,3,-4,-26,-1,-13,2,-2,0,4,0,0,13),
	    27 => w(12,4,1,5,-6,-2,-12,3,-8,4,4,15,6,-5,0,11,17,6,7,50,-24,-3,-5,0,-9,0,5,3,0,6,-6,-16,4,-6,15,-4,-28,9,-1,-7,-7,9,-3,-10,-2,10,2,-33,1,0,2,6,-1,-5,10,0,11,3,-10,1,1,15,2,-3),
	    28 => w(-5,-5,57,4,3,-3,-18,-1,0,5,2,-7,-20,-59,-1,-3,2,6,2,9,1,2,0,1,4,1,-2,-4,3,22,8,3,-4,-1,-3,-14,0,-3,1,4,-2,-1,-4,-3,0,-1,5,-5,0,-2,1,-1,6,2,-5,-3,1,4,11,-2,0,13,2,6),
	    29 => w(-1,-17,13,2,8,6,6,0,19,-1,-3,1,-6,4,-2,18,0,1,-4,0,0,1,-17,3,-10,4,-6,-1,-4,-4,12,-2,-3,-6,-13,-1,26,5,-16,5,-2,-19,9,-4,-7,-3,44,4,2,-9,1,1,-4,-4,4,-6,8,0,-9,1,6,5,0,1),
	    30 => w(3,35,-1,2,16,0,6,4,19,-1,-2,1,-1,-4,11,-3,2,1,2,0,9,-1,3,10,7,-1,-3,20,-1,6,6,16,-5,-6,1,3,-8,-16,3,1,-3,-5,2,9,5,12,4,-5,-17,-2,0,-9,-10,5,-2,1,-7,1,-2,2,2,1,6,1),
	    31 => w(-2,7,-4,-19,-9,-2,-5,3,-2,3,-2,-6,5,-5,1,1,2,2,-9,-3,-2,-4,5,-2,0,0,-4,-1,0,-8,-3,-5,7,-2,7,39,1,-2,-17,1,3,-16,10,6,1,1,4,13,-2,0,3,2,-1,2,5,9,-2,-4,3,-2,2,4,0,-21),
	    32 => w(-2,3,-13,14,-1,0,-5,-8,-1,1,5,10,-4,-12,3,-3,2,-2,-3,-5,-1,-3,3,0,-2,0,1,0,4,-2,-5,0,1,0,7,6,0,2,-2,2,-1,-1,-5,-11,0,1,-3,16,0,-1,1,-1,5,-4,-1,-3,-4,9,6,1,0,-2,1,0),
	    33 => w(-2,-15,1,3,-2,-8,-2,-1,-1,1,-2,0,-12,-1,2,-15,1,-2,2,1,-3,0,-11,0,-10,5,4,5,0,3,0,-2,2,45,-8,-1,-9,-9,-5,1,-1,-37,-21,0,0,0,24,-2,0,1,4,4,0,1,-1,-12,-2,0,-2,-2,-2,3,-1,-2),
	    34 => w(2,6,-1,-3,2,0,2,-3,-2,-1,3,-4,1,-3,5,3,1,0,-1,1,0,-8,2,-1,2,-3,1,3,0,2,0,-16,26,-3,-1,-4,-1,-8,1,-8,1,1,-3,0,2,1,1,-3,-5,1,0,0,4,-7,-10,-42,-23,-1,0,-2,-4,3,-6,0),
	    35 => w(0,-2,-1,5,-13,0,-8,4,-17,-1,3,-7,1,-3,-1,6,1,3,5,3,-5,4,0,1,-1,1,-4,0,3,0,2,-7,5,-1,-5,0,-1,-3,-1,-15,-6,8,-1,-1,0,0,-2,0,6,2,5,0,0,12,-1,2,-4,1,1,-1,-1,-5,0,-1),
	    36 => w(-2,-1,2,7,0,10,-7,12,-1,3,-22,-14,-1,-4,13,-4,-6,-21,-2,-1,0,5,-4,-13,-8,-2,-10,-2,17,-2,-3,0,-4,5,-1,4,6,5,-1,1,5,12,-8,1,-2,3,2,-9,-1,4,-2,24,-3,-2,-4,10,-23,3,2,3,1,4,3,7),
	    37 => w(4,2,-4,-3,2,6,13,-4,-6,1,10,1,23,1,1,0,2,4,-15,2,9,6,17,4,1,-1,-3,-12,3,-1,1,22,-6,-9,6,-3,43,18,2,1,2,-11,2,-2,0,-5,-9,2,7,-19,-7,-3,-2,12,-4,2,4,-6,-20,1,-13,-16,2,1),
	    38 => w(8,4,-1,-2,3,-1,-7,5,-33,9,4,-5,0,8,0,0,3,6,2,0,3,29,3,-11,15,-2,1,1,0,4,-9,-12,15,-3,-3,-2,-8,-2,-2,-14,-26,1,-1,7,0,-15,-11,-15,1,-3,6,-43,-8,2,-1,-12,5,10,5,-2,14,3,0,-11),
	    39 => w(1,-15,2,-3,-6,14,-3,-8,4,0,-1,-2,-2,10,-2,-29,-2,0,-17,-4,8,-7,-3,7,0,-12,2,0,-4,-7,-1,9,9,2,-16,2,-12,0,-13,-8,14,25,2,-6,10,4,8,-2,-2,-3,3,4,-2,-2,-4,1,14,0,1,0,2,8,15,4),
	    40 => w(2,-3,2,-4,5,-10,-1,6,0,2,-6,-14,-2,9,-3,-8,-5,-6,-4,0,-10,-2,-3,-1,-1,1,0,0,3,2,9,0,-1,6,1,-1,-1,-7,-8,-3,-5,-3,3,-11,1,0,1,3,0,-4,-2,7,-2,7,1,0,-7,-10,1,5,-2,-2,1,1),
	    41 => w(-1,-5,-4,-7,-4,-6,8,5,1,-2,3,0,-4,0,7,1,-2,0,7,4,-3,-4,9,9,2,1,1,-5,0,6,6,13,-5,-3,13,6,6,8,2,-5,9,-6,-5,-2,-1,1,-8,-3,-2,-8,3,-3,-2,-13,0,-1,0,-5,-15,2,12,27,2,-2),
	    42 => w(4,-6,-2,1,3,-3,-4,2,-19,2,-11,3,4,9,9,2,-2,-1,-4,8,1,20,3,-2,77,-1,-7,4,1,6,-6,0,1,3,1,-3,-6,7,2,6,5,-2,1,9,-1,-11,-22,-2,0,5,-10,-27,-10,5,-7,-5,8,1,4,1,2,1,-7,-8),
	    43 => w(1,0,1,-1,1,0,-6,-14,-5,0,2,-4,-6,15,-8,-20,-1,-1,-2,3,-3,-7,-2,12,-1,-10,-4,-1,-3,-1,4,-9,8,4,8,-2,19,-4,-8,2,0,-9,2,-1,-3,-4,-1,5,0,1,-12,4,1,-2,2,2,1,-1,-4,1,0,-5,-14,1),
	    44 => w(-3,2,-34,-3,3,1,-16,3,-1,-5,6,-5,50,33,-3,0,5,-7,3,7,-7,-2,5,1,2,-3,1,-7,6,10,6,6,-6,5,-20,12,2,-4,26,-1,0,-2,-1,2,1,0,8,29,3,-3,-2,-1,-4,-3,-6,4,5,13,6,-9,-2,-6,1,-9),
	    45 => w(1,38,-2,7,-15,-3,5,1,3,-2,0,-6,-6,4,-3,9,-1,-2,-7,-1,-1,2,-3,4,15,9,2,-4,3,-1,-1,1,0,-4,-9,2,22,11,26,3,-1,40,-9,-2,-3,-4,-24,0,-1,-5,-1,-4,-7,-2,4,-2,4,1,-8,-10,8,11,-2,0),
	    46 => w(-4,-30,3,-10,7,1,1,3,11,-6,-3,0,-1,-2,7,-8,5,3,3,-9,0,-4,1,7,1,5,-4,-10,2,0,8,-5,-15,-3,-4,-9,1,-11,5,1,-1,8,0,-6,-5,7,3,-8,-17,-1,1,-17,-5,5,-1,-2,4,-1,-6,1,2,1,8,1),
	    47 => w(-3,1,3,3,-9,4,5,-1,-17,-5,4,-5,-5,-1,1,-9,1,3,-3,0,-5,-16,3,4,0,3,1,1,1,-10,-1,-1,-6,-3,3,-11,-2,-2,19,0,-10,-5,-5,0,0,1,-5,4,-15,-1,-76,-2,1,-2,-1,5,5,6,1,-1,19,-8,0,26),
	    48 => w(-7,-2,11,-4,-1,0,12,-2,1,4,7,-10,8,-28,-2,-1,9,-2,2,-2,1,0,-2,0,8,0,-3,6,14,-5,1,-8,0,-4,-3,-16,-4,-2,1,4,1,1,7,-3,-6,0,6,2,1,-5,25,-6,17,-9,5,-2,-9,-6,-46,14,2,-6,2,5),
	    49 => w(3,-4,3,1,35,3,5,0,3,-2,0,9,1,-9,2,-21,2,-3,3,0,-2,-1,6,-5,-10,2,1,3,4,8,-18,2,3,-3,10,-3,21,-7,-13,-35,1,-7,13,1,10,3,5,4,6,3,-2,-10,-6,-4,-1,3,2,-3,7,-4,-4,-7,8,-9),
	    50 => w(-6,-23,-3,80,-3,-8,0,-3,6,7,-7,-3,4,0,-7,19,-5,-1,0,8,-2,-1,5,1,-6,-42,2,14,-2,-1,1,-1,-5,-1,5,-3,-5,6,-15,-6,-2,27,-15,10,0,5,2,3,-2,4,1,5,14,0,-3,-2,2,7,5,-1,-18,-6,-28,11),
	    51 => w(-3,0,-3,6,6,-4,13,3,6,3,24,7,-1,0,-1,9,2,0,3,7,-2,5,-3,5,5,-2,-2,8,-2,2,-4,14,17,-4,-7,-21,-2,-3,0,0,22,15,0,4,6,4,5,-5,35,2,14,5,3,3,-2,-2,-3,-1,-1,-1,-16,0,1,-6),
	    52 => w(-1,0,3,-11,-1,-5,-36,-27,-3,-1,30,-12,4,-2,12,1,-5,-1,-9,-16,-5,-2,-3,-6,9,0,9,-2,-2,3,4,10,-3,5,1,5,15,-8,-13,-14,-3,-4,6,-37,3,2,0,-4,3,-1,-3,-7,0,4,-1,-2,-3,10,-2,-2,-2,-3,2,-1),
	    53 => w(3,-2,-6,1,-3,31,1,0,1,-4,-17,1,-38,-4,0,-1,-10,-25,5,4,-10,-2,-31,6,1,6,-3,-27,7,-2,-4,-19,5,-6,1,-10,11,9,-3,1,-4,-6,-20,2,-3,4,-2,-10,-6,25,-22,-10,-9,-4,5,-3,-2,7,-5,6,15,-1,-24,8),
	    54 => w(3,-7,-12,1,-4,10,-4,-1,4,-10,4,-3,-2,-4,0,1,0,4,0,1,5,-7,-3,1,11,2,-5,6,8,-1,15,12,-4,0,-1,4,-1,-3,-2,25,6,-3,1,-2,4,10,11,21,6,1,-6,11,-9,1,-1,-1,1,0,-4,-2,2,7,0,-13),
	    55 => w(2,1,1,1,25,12,-12,-1,-2,3,1,0,-2,-1,-2,-5,-1,6,18,4,7,-10,1,2,-5,3,3,-9,2,-2,-3,-2,6,-3,-4,1,-9,-3,-10,-15,15,13,1,0,-7,-2,-6,-3,-5,3,-14,-9,-3,14,-16,-1,-4,1,3,-1,-1,1,-8,-4),
	    56 => w(11,1,-30,-1,4,2,4,-8,-1,-3,4,-16,-13,69,-4,-1,0,-9,0,-1,-7,-3,0,2,3,-3,-2,4,-5,-15,-5,1,12,0,-1,-4,1,6,3,0,-2,0,0,6,1,-2,-2,-6,-1,0,3,4,-2,-7,-7,4,-4,10,26,0,-1,-12,0,-4),
	    57 => w(3,7,0,-2,-8,-2,-14,0,-17,2,-4,-7,-6,-3,4,10,0,-4,-3,-1,-1,6,5,0,1,-2,2,2,2,1,12,1,2,7,-12,-2,-5,4,4,7,1,-9,-14,-3,-6,-1,-42,-4,-4,-1,-4,8,-1,10,0,-12,-4,-2,1,1,-1,-2,1,4),
	    58 => w(0,94,-4,-14,4,1,2,-3,0,2,-4,-2,2,1,2,-6,-5,5,3,0,-1,-5,-1,-3,4,8,0,5,1,-2,1,-18,58,7,-4,-4,-2,19,2,-4,-1,-4,2,-1,-3,-5,0,-4,16,0,0,7,-4,-4,-5,-5,-6,-8,1,-3,7,-2,-11,3),
	    59 => w(2,-6,3,10,-4,0,-18,-7,23,-3,-3,1,-9,0,1,3,0,2,12,-9,-3,13,-1,-2,0,-1,3,1,-2,-2,5,-8,-7,-3,7,-1,2,-1,18,-4,-23,20,11,-8,-1,0,-2,-4,-25,1,-27,0,-2,11,0,-6,5,13,-3,2,2,6,2,-13),
	    60 => w(-7,19,-25,7,-6,3,24,4,3,-2,1,-14,18,0,8,-1,-14,-2,1,0,10,-1,-4,1,-1,4,-3,0,7,3,-3,-2,11,-1,2,-7,-4,0,-2,-2,3,1,2,2,-9,-1,-2,15,1,1,21,6,-1,-2,3,-1,-1,3,2,0,1,7,0,-7),
	    61 => w(8,-10,-8,-15,15,-4,-5,0,4,13,7,3,4,-12,9,-10,0,4,-1,0,-2,7,15,-2,11,1,-7,5,9,3,-3,6,4,-4,-3,-3,25,6,20,-4,3,65,4,-2,-14,2,18,-1,-5,-8,-3,-14,8,6,-2,20,-21,-2,0,-1,2,-12,0,-2),
	    62 => w(1,-14,-1,-9,9,-2,6,4,-18,0,-9,-2,9,5,3,-4,-4,-1,-1,-4,4,1,0,2,3,0,-4,-9,-3,-10,-9,1,-25,-5,1,-1,-7,-32,-8,-5,0,6,-2,-17,5,-1,-5,6,31,-2,-3,14,5,-9,1,-9,0,5,0,2,-14,-7,9,-1),
	    63 => w(21,0,17,-8,5,-6,16,1,-10,-7,12,2,6,-3,1,6,1,5,-1,-5,1,42,-7,8,4,2,9,-4,0,5,17,-9,3,18,-5,-19,-3,-4,7,-3,26,3,1,1,1,1,5,-5,-11,-2,20,1,-1,-9,1,-5,-6,21,-3,-3,10,10,-4,-1)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;