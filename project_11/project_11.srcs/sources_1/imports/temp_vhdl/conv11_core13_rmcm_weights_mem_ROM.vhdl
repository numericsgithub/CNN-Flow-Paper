library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core13_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core13_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core13_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(4,1,-1,17,-7,3,2,0,0,-6,0,0,-6,-6,-4,1,-7,1,-28,-5,-1,-1,-16,4,-3,3,21,5,-1,-3,3,1,0,-11,4,1,-10,-4,2,-6,21,0,1,-7,-5,-6,12,-9,-3,-2,-20,-6,-29,-9,-5,1,0,-3,12,4,-4,-6,-6,-7),
	    1 => w(-3,-7,0,-6,-3,0,-9,0,-3,2,4,20,-2,-2,16,9,-5,0,-19,15,-7,0,-3,8,-1,-60,-7,1,4,-1,-1,-1,0,3,-9,0,-3,-35,1,18,1,1,0,1,3,-5,-14,0,2,-1,6,1,2,8,6,-1,1,2,-9,-2,4,-5,-6,12),
	    2 => w(-5,-4,-4,1,-2,-4,9,7,9,-15,3,2,-2,6,-1,15,4,-5,1,-7,5,5,7,4,9,-5,-11,-2,0,7,-6,-1,0,-4,-6,3,3,0,5,6,-11,-5,-14,-6,3,-8,21,-3,-5,2,26,0,8,3,-7,-9,11,5,-1,19,-4,-3,4,4),
	    3 => w(-6,5,-4,-12,-2,-4,2,2,0,6,-4,-24,-1,2,-6,-2,3,-4,-2,0,11,-1,34,1,-3,2,3,1,1,-3,-12,12,0,-1,-9,-2,16,7,4,-2,-7,0,1,7,5,-4,4,-4,-1,2,-4,-10,-3,5,-58,0,4,1,2,4,-2,-1,3,0),
	    4 => w(13,5,1,-4,7,-1,-3,12,-1,18,-2,-26,1,1,1,-7,26,2,-8,5,-5,2,11,11,1,-1,14,-5,-4,11,3,3,-7,0,1,-1,-1,15,-11,7,7,-12,19,-5,0,8,2,5,21,8,7,5,4,-6,13,9,4,-3,5,-11,8,-12,-13,20),
	    5 => w(3,3,6,6,-9,3,9,6,15,1,1,11,-9,0,7,10,1,10,2,4,9,-2,-3,7,6,10,4,2,-1,-1,3,11,-10,12,4,14,-5,-24,2,-8,-8,14,-1,-1,14,4,3,-5,6,12,9,7,13,6,-9,-2,16,10,2,25,4,9,-4,-5),
	    6 => w(-7,-1,7,-17,12,4,-3,13,-3,4,-5,2,30,5,-4,2,-9,6,-2,15,8,14,14,0,-5,-2,6,-16,-3,1,8,-4,14,10,3,9,-27,7,-10,19,21,15,25,-26,17,8,9,4,6,1,13,3,2,-7,-7,12,-5,-14,8,0,0,-5,8,1),
	    7 => w(8,-3,4,-6,3,3,1,1,2,3,23,7,-4,16,0,2,8,7,-5,1,12,-1,9,-8,11,8,5,-6,2,-2,17,-9,0,-4,14,-13,-5,20,28,1,3,7,-4,11,-1,3,-11,4,0,28,5,-2,27,0,4,0,1,-7,-3,3,0,18,-1,3),
	    8 => w(3,-14,-1,-6,-1,-5,-1,-12,0,6,-4,-26,-2,-1,5,-4,7,1,-7,11,-2,0,-12,1,4,12,0,17,2,-19,7,-12,2,-9,-5,2,7,-11,-3,-6,-3,5,-6,-8,-4,0,-18,12,13,-4,-9,-4,0,-2,1,-2,-3,-8,-5,-6,17,0,10,-20),
	    9 => w(-3,-6,12,-27,8,-1,-21,-7,28,6,-9,-1,-2,-7,0,-38,0,17,4,4,-1,-15,-2,9,5,-11,-10,1,21,16,4,-5,-4,-8,-1,2,-1,-9,-1,10,11,-2,1,0,-5,5,2,-2,-6,-13,1,0,2,1,0,2,-6,-14,6,-7,-4,4,8,1),
	    10 => w(-1,-5,-1,-2,-8,-13,-9,7,4,-6,-1,-1,20,9,-1,-1,-4,3,-4,0,8,2,-5,4,4,0,5,14,-5,-3,9,1,8,-16,-9,3,-2,-1,-5,-12,24,-10,-14,10,-1,-4,-7,-10,2,5,-8,-1,2,14,10,-2,-6,-5,11,-3,6,-9,-3,-2),
	    11 => w(-8,2,-4,-9,1,5,0,6,-7,-34,-3,7,1,7,1,-1,-8,4,-18,-13,-4,-3,-5,1,-6,5,5,-2,2,-7,7,-6,1,-11,4,4,2,9,-3,-1,-9,-4,7,12,-2,-4,-2,-19,-8,4,-2,-4,8,6,-6,0,-9,-10,-5,-6,-6,5,-5,-11),
	    12 => w(-2,3,-10,-2,5,-1,0,8,2,-8,-9,-10,2,-3,2,-4,13,4,8,11,-2,15,-4,-17,-5,-2,-1,0,-4,-1,-14,6,-3,-2,-5,8,-2,5,-19,29,0,11,1,7,-8,-6,4,-11,-4,0,-1,4,-2,-4,-1,4,7,3,2,0,8,-1,-5,-23),
	    13 => w(8,5,-3,-7,-3,2,-2,22,-3,10,-11,-1,1,3,1,-19,3,23,1,4,-1,-3,-1,2,2,-4,-11,-7,4,4,1,2,4,1,1,-14,4,0,2,-5,-17,3,-1,0,-5,1,3,-1,2,-11,-19,20,-6,4,0,-1,-4,-14,-5,-5,-2,-22,2,3),
	    14 => w(-7,0,5,6,5,-2,3,-9,-22,-3,0,-3,-3,-5,-5,-1,2,-9,0,-5,-22,-5,1,-5,0,2,6,-13,1,9,2,1,14,-34,-9,-3,-4,-1,0,-3,-9,-1,1,1,0,3,-3,-1,0,-7,0,-1,-4,0,-2,3,-2,0,1,-3,-1,-3,-2,5),
	    15 => w(-1,1,2,0,-2,0,-25,1,-1,2,0,0,-6,6,-1,-1,-17,17,-2,-8,12,6,3,2,11,0,3,-18,1,2,-2,-5,-6,-17,1,11,4,-5,-6,6,8,-8,-3,-8,-2,2,-5,-11,1,0,-3,-1,-11,24,2,14,-5,-6,-2,-8,-8,4,-3,-9),
	    16 => w(16,-11,4,0,9,0,-3,1,8,7,-3,-4,1,1,-1,3,-4,-3,-2,-9,2,-9,3,19,-4,4,-2,0,9,-2,-9,0,8,1,-5,-25,-8,-6,8,-1,-11,-5,-6,5,11,4,-13,2,-11,-5,1,-1,3,1,1,4,8,10,-3,13,-1,-5,7,-2),
	    17 => w(-10,-3,-3,3,-6,4,-6,-19,3,3,0,5,-13,9,1,0,-5,-5,0,-1,-1,-2,5,0,2,6,2,-1,1,-6,9,-27,-6,-4,-2,-13,-10,1,10,-7,-2,8,6,7,2,3,-4,-1,11,1,-30,-20,-5,2,1,-2,-22,0,12,10,4,-4,4,-3),
	    18 => w(8,2,-7,1,0,-1,-3,5,8,0,-2,3,2,12,12,1,9,-13,-4,-5,8,14,3,-4,2,4,-1,8,14,-10,-8,-1,-13,-1,11,-19,6,-5,3,3,4,10,-11,-7,-6,12,-3,12,-3,11,-5,-2,0,-3,1,-4,0,21,-3,-6,-1,19,-22,-19),
	    19 => w(8,10,-6,-9,5,-12,12,6,-1,2,-1,-6,-2,7,13,1,-6,4,-8,-5,-12,2,1,-3,0,8,0,9,2,4,8,-11,15,4,7,11,6,-1,-5,-7,-15,7,-2,1,-1,4,8,-9,-5,4,11,4,-6,-20,4,-44,-6,5,10,3,1,-3,-4,2),
	    20 => w(-2,-9,-15,9,-2,2,10,5,1,1,15,-7,6,14,0,-3,0,-10,-4,3,-4,9,-3,-1,0,0,1,5,13,17,7,-18,-2,-1,-1,2,4,-6,-6,-1,1,1,-14,0,-3,-5,2,-11,-5,-1,2,7,3,3,3,-3,4,-4,-2,12,-2,-3,18,-17),
	    21 => w(-8,1,4,-6,-4,-1,-3,14,-6,4,-3,3,1,-5,-3,-8,16,-11,-24,9,-4,0,0,-5,2,-2,-3,-6,14,7,26,2,-8,7,4,11,1,4,-2,-22,6,-6,5,0,-6,2,1,0,1,-6,-1,5,-4,0,0,1,0,-6,6,1,1,-1,-16,-6),
	    22 => w(3,-2,-4,3,-10,-1,1,-2,-2,-3,-15,7,1,3,-6,2,-10,-8,1,12,-4,-8,4,-1,5,4,-18,-3,-3,7,-7,1,9,-12,-1,-2,-1,5,0,-12,-5,-5,-1,-2,0,9,1,-7,-1,-2,-4,22,2,-2,-9,-4,-1,5,1,6,11,-2,-5,3),
	    23 => w(3,8,2,10,-5,-8,3,-4,-1,-2,0,-2,-3,5,-4,6,6,1,0,4,-10,-5,-5,7,-4,-4,-5,-4,2,-5,-4,3,7,7,10,-14,-1,7,-8,4,7,4,12,-5,-3,12,1,15,-6,-8,-1,3,9,3,-9,-39,24,-3,-1,2,-19,16,-4,1),
	    24 => w(3,-13,-11,15,-7,0,5,4,-2,-3,-4,-2,0,-2,1,-3,-2,-1,0,1,2,1,-5,-2,0,-5,-2,7,-3,-9,7,-15,4,2,-9,3,5,-1,-1,-5,-5,-2,2,-5,-3,0,-7,12,3,-2,-4,6,0,-9,6,-1,-2,-21,-4,-3,-1,-8,20,10),
	    25 => w(-7,-5,5,0,-3,0,-12,9,2,-7,4,-2,-7,-7,62,-10,-12,1,3,2,-1,-6,-10,-1,4,9,1,9,24,-4,18,0,21,1,-5,3,3,-3,9,-4,10,-4,3,-2,-7,4,4,-9,0,-8,-3,-2,-3,-6,0,5,-1,5,-4,1,-10,-6,-1,-3),
	    26 => w(-1,9,-3,-2,-3,-11,-9,0,-6,23,-18,5,-3,-6,-5,12,-20,-12,1,9,-1,8,-2,-4,3,-8,-7,-6,-1,-2,0,2,5,-17,5,1,-1,-2,-8,-4,5,-11,1,6,4,1,-1,-5,13,2,-20,-1,-8,-5,2,-9,3,-2,6,3,-3,-9,4,2),
	    27 => w(-4,2,0,-4,2,4,-10,9,34,-10,-2,13,0,-4,-1,2,4,0,2,-7,-1,-2,5,1,3,1,3,0,-3,-10,-3,0,8,3,-3,4,27,-4,9,-1,-5,-3,8,-1,-2,-3,0,-3,-1,0,1,13,2,1,4,-4,5,-5,-7,-3,-9,-1,1,-6),
	    28 => w(14,-10,-11,2,-1,-3,2,0,1,-1,1,4,-2,-4,-2,-1,1,2,-7,10,-2,-5,0,0,12,35,0,7,6,-3,-16,-1,-2,-4,-8,7,-6,1,1,10,-1,-4,-4,-8,2,-7,4,17,6,1,-4,3,0,0,0,1,12,-10,1,4,-6,-14,17,22),
	    29 => w(-21,-2,-3,-11,-7,0,-11,14,19,23,-6,-5,0,-7,-3,9,-7,-2,1,-11,-7,-4,-2,-1,2,6,7,-3,19,-1,4,-2,-3,-1,0,-4,-3,-1,5,-1,-4,-9,-7,3,-3,-1,0,4,-4,3,-10,0,-9,-2,0,4,-8,-9,6,-1,-8,-2,0,1),
	    30 => w(4,2,0,0,2,-15,2,14,3,-3,-2,11,-3,-18,-1,4,-4,0,5,3,-21,-9,-3,0,-4,-4,-8,5,12,4,-3,1,-11,-5,-8,-11,0,5,-1,2,-16,-3,-4,1,-21,-1,-8,-15,0,3,1,-4,-2,-1,-3,-1,1,2,-2,3,3,-9,5,-2),
	    31 => w(-16,-1,4,-3,4,6,-44,5,4,-3,5,0,1,-6,-12,8,-5,1,-4,6,-4,6,-6,-7,5,-4,-3,-1,-3,-4,-4,-7,3,15,1,8,0,11,-4,0,-11,9,-11,5,-2,-2,-1,6,-2,1,-4,-2,5,-10,0,-26,10,-11,-58,22,1,2,0,-4),
	    32 => w(0,0,6,-2,65,-2,-3,-2,2,0,2,3,0,9,0,-4,-8,4,1,0,9,0,6,4,-2,-1,-4,-9,-6,-9,-6,11,7,1,22,5,11,-9,-7,-1,-2,6,6,-1,9,-2,12,-9,3,0,-1,0,3,-1,-2,3,2,-6,0,1,18,6,-1,6),
	    33 => w(-32,-19,7,-18,4,-2,8,6,12,-3,-7,9,12,-3,3,8,3,-6,2,-16,-1,3,-7,-16,11,8,-3,31,5,10,-3,14,4,-7,2,-3,-49,10,-1,10,13,5,0,-7,-6,6,4,1,-1,4,0,2,1,-12,9,17,-3,5,-11,0,0,-1,5,-3),
	    34 => w(-2,1,-12,4,-10,0,-3,1,-2,10,6,2,4,-6,4,4,-1,6,2,-6,5,9,6,-15,3,-8,-11,-3,0,11,-7,2,-9,-9,2,4,-3,8,-1,-6,-11,-7,-2,7,0,15,-6,2,-17,1,-1,-6,6,-5,4,-5,-11,-2,-33,15,-2,3,3,1),
	    35 => w(-4,-1,1,6,5,-2,-3,-3,-2,-13,-14,-8,1,-7,5,3,4,-5,-4,-6,-11,-4,4,-5,5,20,-2,2,-5,-10,-13,-16,-1,-2,-12,2,3,-3,13,-2,-15,-2,-1,8,-1,25,-3,-5,-2,11,14,8,-2,-5,-3,1,-41,-17,1,-3,3,4,1,6),
	    36 => w(9,-1,1,-6,3,-3,0,3,3,3,4,0,-4,0,1,-2,5,-6,-9,0,4,-1,-4,9,2,-4,1,5,-6,1,-3,13,10,1,-10,2,3,-14,-1,-14,1,-9,2,17,4,-5,-9,16,-5,-1,-4,19,5,-5,9,1,-2,0,-4,-2,-5,18,-9,11),
	    37 => w(7,-4,12,-29,2,-1,7,1,35,4,-9,2,1,1,-2,-21,-4,9,0,10,3,-7,2,2,7,-1,-15,4,14,12,-3,-6,9,0,0,11,2,0,-4,-6,3,-8,0,-5,-2,9,-1,-2,4,-5,3,-2,-2,0,-4,23,3,39,-7,5,-5,0,11,-4),
	    38 => w(-2,0,-4,0,-4,-43,9,9,-8,6,14,-6,5,14,1,4,5,31,1,14,7,-4,4,-1,2,-5,1,3,0,0,-1,2,7,12,-8,-11,6,5,-1,-2,53,4,-8,10,3,8,4,8,20,3,2,-10,1,0,2,7,-5,-23,-2,-2,-2,5,-3,-2),
	    39 => w(0,-2,-3,0,-3,0,-9,10,-1,-7,-6,1,3,-15,-1,10,5,-2,-5,8,-1,-7,0,-5,6,3,5,3,-5,-3,-3,13,0,-11,-8,-6,-7,10,27,1,0,3,-10,-5,-6,4,-1,3,-2,-2,2,-6,11,2,-3,2,-51,-6,3,-4,2,2,10,-19),
	    40 => w(12,4,-4,14,23,1,0,9,5,32,7,11,-2,8,-3,1,-2,-1,-2,1,-1,0,7,-10,5,0,2,14,40,-22,26,11,-3,14,-11,16,27,5,4,5,-8,-9,1,-1,-5,-1,7,-2,-3,-1,-4,4,3,3,12,-8,7,9,-7,6,0,-3,16,0),
	    41 => w(11,-5,1,12,-7,0,-3,12,25,4,10,-8,12,1,3,5,-10,9,8,16,-7,8,3,-3,1,9,4,19,10,-24,-5,19,-5,-11,3,22,6,-5,1,6,-2,8,-9,7,12,2,6,1,-1,9,20,7,9,26,1,-3,-11,-2,33,-9,-4,12,1,2),
	    42 => w(4,-2,-2,-19,-10,-4,33,7,24,1,-16,7,11,6,-5,-1,17,-4,-2,16,13,34,-4,4,3,0,0,8,0,3,7,1,-1,7,14,-5,14,-3,1,-1,9,25,2,-4,8,8,-12,4,8,-7,-10,16,7,-6,4,0,-8,-9,19,7,18,-1,11,2),
	    43 => w(6,-4,-11,14,0,8,-4,11,-6,2,9,1,-6,0,-1,-7,11,-1,6,-2,28,5,4,6,6,1,-6,-1,1,1,-5,-9,-2,3,31,-9,-2,2,-2,1,-17,-8,-6,11,1,9,13,-16,-1,24,-6,16,18,6,-12,2,3,-3,-6,0,-2,19,2,-9),
	    44 => w(-4,-5,1,-7,-2,-4,-3,2,-3,-18,6,-1,0,14,-4,1,-15,10,8,-1,3,1,-8,0,-1,2,-11,-6,1,3,3,4,1,1,-4,3,2,-11,0,3,-5,2,0,5,6,-4,-12,2,-3,-2,-2,-11,6,1,13,-9,-7,-1,1,-4,7,-15,-1,5),
	    45 => w(4,-1,2,-3,-6,2,8,-9,-1,-1,5,-4,-11,-3,10,16,11,2,-2,-6,-12,3,-5,-2,4,-6,-2,-22,2,-9,-1,-8,-2,10,1,-2,1,2,-4,5,-2,1,-2,14,0,2,6,2,4,-14,7,1,-8,-5,5,-2,-6,4,-1,8,-1,-7,-1,-7),
	    46 => w(-1,1,-1,-3,-11,-2,22,1,2,-6,-33,-2,-6,-9,3,5,3,10,0,-17,4,-12,-1,-6,4,-1,8,7,3,7,1,0,2,-18,-1,12,0,3,2,3,-10,11,-1,4,-1,-7,-7,-8,53,-1,3,5,-8,12,-19,-5,-5,-11,24,-11,-1,1,0,2),
	    47 => w(1,-7,-18,-21,10,0,-6,9,0,-13,14,1,-4,-9,-4,-5,-3,-2,1,-17,-32,-1,3,-5,3,-4,-6,-2,-1,2,-2,-4,-1,-4,-5,0,1,9,57,-2,6,-3,5,-11,-1,22,-5,-2,0,-18,-3,5,6,-5,2,1,2,0,-3,-2,14,20,2,3),
	    48 => w(4,8,4,5,6,-4,-3,-60,0,1,8,-6,-4,-13,4,-4,-11,10,-6,-1,-7,-1,-6,1,-3,-4,-4,9,-29,-5,6,2,2,5,-10,9,-4,-5,3,-5,-1,-4,-13,3,-13,2,-9,2,-21,3,-1,-3,0,-4,-16,7,7,9,-4,-2,6,9,5,4),
	    49 => w(-1,-15,3,10,2,-3,3,4,15,-1,2,-6,14,3,-2,3,36,-7,5,-7,-17,-11,1,47,0,4,6,-40,-1,28,3,-61,3,8,-3,5,5,-8,-1,23,2,-11,3,7,9,2,2,0,-7,7,4,3,1,11,-7,0,3,13,-3,-4,-11,7,-6,4),
	    50 => w(-4,2,4,2,-14,21,0,-7,-10,-2,47,0,-11,3,-2,2,1,-1,0,15,5,6,-4,-22,1,4,-1,4,-1,11,-4,0,-9,-6,12,-5,1,-5,0,-4,2,-6,-12,7,3,-1,-1,2,30,-3,-3,-7,-4,-1,-2,2,7,1,-3,6,-5,0,-6,0),
	    51 => w(12,-3,2,-4,-5,1,3,-1,2,-12,-11,4,-8,17,-7,-5,-1,-4,12,24,-1,6,4,7,2,7,6,-1,5,1,-4,14,-2,-14,-19,12,-6,-18,-3,4,-18,-3,4,2,6,25,6,-16,6,24,-2,1,3,5,-4,-37,5,-6,1,0,16,-10,3,3),
	    52 => w(25,9,19,-14,7,3,-7,-8,-10,18,9,6,2,-1,-1,4,-4,3,-8,2,-9,0,11,5,7,-16,-2,-8,-14,4,-3,-11,-6,-3,17,3,-8,-3,12,-13,4,0,6,25,0,22,16,13,-18,-1,0,-1,9,4,-2,-26,-28,1,1,-8,-4,7,11,9),
	    53 => w(-9,-10,-2,12,28,-10,11,-2,-4,3,7,5,-8,0,-2,8,5,-9,-10,22,18,-11,-3,0,3,1,-15,1,-7,-8,-12,-29,-6,3,-3,22,0,-34,5,-11,-1,23,7,-6,3,-4,-1,4,-5,11,39,-9,-13,7,-1,-5,-9,-5,6,22,-10,-28,-21,-7),
	    54 => w(-5,-3,-19,-36,9,-8,8,13,16,-6,-21,0,-1,6,0,-3,5,8,7,17,-10,17,4,-9,0,6,15,-26,1,22,8,-1,-17,9,-9,2,4,4,-1,-17,17,-4,12,10,-2,-7,1,-6,4,1,5,-5,-5,0,-8,-6,-5,-13,-6,10,12,7,-5,15),
	    55 => w(-1,-10,18,1,-6,-6,-11,-35,-6,3,0,5,-2,0,-18,-4,4,36,-9,2,-1,-4,3,11,-20,-4,-4,-3,8,7,-1,5,10,7,8,18,-8,-26,2,3,-27,23,12,6,-3,-4,-11,-6,-1,11,0,-5,27,1,5,-26,20,2,12,13,9,-2,14,8),
	    56 => w(0,4,11,-3,-5,-3,3,-1,-1,-6,2,5,-3,2,0,-7,6,-2,-4,5,4,4,-3,-9,3,-2,-4,-4,-2,1,14,1,6,0,-1,-8,-1,3,-1,-2,-3,-18,10,13,16,-5,-1,10,-3,-3,-4,5,3,-3,-3,8,6,1,1,13,4,-14,3,7),
	    57 => w(-11,5,-4,-1,-6,1,-7,16,3,-1,-2,-1,1,10,-4,10,-16,9,2,0,3,2,1,-2,-2,-2,-9,9,3,15,-4,-12,-1,3,-1,-1,4,1,10,-3,1,5,9,-1,0,-1,4,-1,-5,4,12,11,-1,-10,-1,6,1,21,-5,4,-14,-5,-6,0),
	    58 => w(-4,0,0,0,-1,-10,-2,4,21,0,2,8,3,-16,1,1,3,6,0,9,2,-12,2,-7,0,0,1,6,-5,3,5,-1,-8,3,-5,-9,0,2,-6,-4,1,0,1,-1,0,8,-1,-17,5,3,4,-5,0,2,-3,0,-3,1,9,1,8,6,-7,-2),
	    59 => w(4,0,6,-1,3,-7,-7,-7,1,3,4,-1,-1,-9,-5,1,10,10,-8,-5,0,-3,-3,-3,2,-3,2,-2,-2,-6,-7,-8,2,9,1,-12,-3,17,9,-1,-3,16,7,3,0,-6,0,-3,0,4,-3,-6,-2,13,0,-4,-7,-4,-6,-9,-7,2,-5,-6),
	    60 => w(1,8,6,6,29,-4,-6,-2,-4,5,-1,-1,1,4,6,-9,16,-3,8,8,-2,5,11,5,0,0,18,16,-9,10,8,5,-4,2,-11,11,8,1,0,14,13,1,11,9,2,4,3,19,9,-4,29,17,-16,8,-2,4,-1,6,7,0,-5,13,2,9),
	    61 => w(-4,-1,9,-4,-4,-1,20,2,7,-1,1,7,9,2,9,8,-3,0,0,17,-8,3,-3,2,3,12,4,9,-1,-9,3,-7,21,12,-9,6,4,-34,5,10,-5,4,5,-2,-3,4,19,4,-2,8,-2,7,5,6,-3,2,4,10,8,10,-1,-2,7,-1),
	    62 => w(-6,5,-1,1,0,12,-2,12,7,21,1,4,5,10,-4,10,7,6,0,5,8,-3,2,3,4,13,20,-5,0,8,-5,2,10,-1,5,8,4,4,-10,20,-1,-13,-7,2,7,-7,16,6,5,-6,10,-4,5,2,7,25,25,0,9,27,3,-2,5,5),
	    63 => w(-2,-17,-5,-7,-3,5,6,3,19,-8,-6,24,-2,7,-5,3,8,4,6,-5,-5,5,0,-2,8,0,-2,0,2,-5,19,6,3,6,-10,-3,7,-15,8,6,17,10,12,11,12,1,-6,-2,-2,-1,-7,7,5,0,-8,-7,12,-7,0,2,-4,4,0,3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;