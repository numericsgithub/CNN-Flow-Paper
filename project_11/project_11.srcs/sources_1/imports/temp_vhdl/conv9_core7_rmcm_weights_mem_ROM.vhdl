library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core7_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core7_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core7_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-4,2,4,4,-9,27,0,-2,10,4,-6,0,2,-13,3,1,7,-27,3,-5,-8,-3,-3,-9,7,-1,1,-22,-2,3,-14,-3,-4,-5,3,0,5,-11,12,-2,-11,3,8,12,-7,-5,13,0,-7,0,-1,-4,4,1,-5,3,11,0,1,2,1,-1,-6,3),
	    1 => w(7,-3,-4,9,7,6,1,1,6,-2,-1,4,-9,-2,0,2,-2,-3,6,5,-1,-8,2,9,0,2,-2,6,-4,-4,0,8,3,-3,9,-5,25,-6,2,-2,9,-11,-4,1,6,-3,14,6,11,-6,3,14,12,-5,1,-16,2,2,-3,4,5,15,-1,3),
	    2 => w(-3,-1,-1,4,21,0,6,-10,-27,-13,11,0,-4,0,-7,-3,-3,0,-2,25,12,4,-3,17,6,0,15,17,1,-10,-2,-10,10,-5,1,9,2,-18,-2,10,-5,-3,-1,-5,0,3,6,-27,0,8,-6,-14,-2,-1,10,0,3,14,-1,12,16,-7,-4,-26),
	    3 => w(0,-2,-3,-3,13,0,1,1,-12,4,0,-5,7,-17,-7,16,-21,6,9,-18,1,1,1,-8,5,-7,11,0,0,-26,-1,2,8,0,-4,0,19,3,25,4,-7,32,2,1,-9,4,9,16,-5,3,15,0,-1,15,-2,10,1,-5,0,4,0,-3,-11,2),
	    4 => w(-1,0,6,18,-9,17,-35,27,2,3,-17,-2,3,-3,26,7,-7,2,-10,2,13,9,1,-4,10,-4,12,3,20,-1,-18,-24,2,0,0,-3,9,-18,-14,11,-7,25,5,-8,-6,4,0,-6,-5,-7,2,0,4,9,1,-6,6,2,8,13,2,-10,-9,-3),
	    5 => w(-6,4,-1,8,0,-4,2,-6,1,-8,0,3,-1,7,2,5,-3,-19,-12,18,-3,-8,32,1,-2,0,-10,-10,8,2,3,-6,3,-6,-22,-2,-16,-8,12,1,10,-2,-5,-1,0,-4,3,25,6,-11,4,-4,11,9,-5,13,9,-9,8,0,-30,-12,36,-5),
	    6 => w(3,-8,16,4,3,-18,-7,-2,-14,-7,9,5,1,-9,-18,-2,0,-2,-5,18,-7,2,14,-10,0,5,-4,5,-9,0,-31,4,-9,6,-3,1,-3,-13,11,46,2,1,3,-3,-15,-4,-4,-12,4,1,2,-6,-5,14,0,-3,-21,-3,5,-10,4,7,1,9),
	    7 => w(-1,-9,2,10,17,37,0,-2,0,4,-1,-23,9,-11,-11,1,-11,12,3,1,12,-6,-10,6,4,3,-7,13,7,-2,5,0,-11,-3,-6,6,-4,-2,-4,-16,5,-23,2,-5,0,8,36,-2,1,8,-16,-12,0,7,1,2,-17,-1,18,-23,8,-16,-14,-4),
	    8 => w(-4,-1,-4,-9,-1,-14,-20,-10,-1,10,-7,-13,3,-6,6,-4,-9,10,-1,-8,-11,-3,7,0,4,-6,-7,6,-1,-2,-4,-1,0,0,1,3,0,7,9,4,14,2,-29,-22,0,0,5,3,2,5,0,2,-2,9,-7,-8,-13,3,-7,-6,-1,8,-9,-5),
	    9 => w(-1,6,4,-5,0,12,-7,2,7,3,-8,-1,-10,-2,-8,0,-3,1,-25,3,0,-4,10,9,3,1,-2,5,12,3,-1,11,-2,2,-9,1,1,3,-2,-1,-10,-3,-4,1,-5,2,-7,2,-12,-8,-2,15,-3,19,4,2,-4,2,6,-2,-4,-24,-8,-11),
	    10 => w(9,3,4,-3,-7,-1,3,-4,17,5,-15,2,2,-7,4,-3,1,10,12,0,-3,1,-8,-4,19,-5,1,-5,0,10,8,9,-5,-13,-3,-4,15,-8,-1,-1,1,-1,0,17,-7,-12,9,-35,0,-3,-2,-22,-9,-8,11,-2,-12,-14,5,-3,39,-1,-3,4),
	    11 => w(-4,-6,-1,8,-10,8,-1,12,8,-5,-2,-5,-36,-3,2,-22,-12,-9,8,-3,22,-2,10,-16,0,-6,-7,0,1,0,2,7,-8,7,40,-2,8,0,-10,-12,-6,13,2,2,3,-4,-2,8,-8,18,-9,-3,7,-2,4,35,13,1,-1,1,6,-37,1,-5),
	    12 => w(-10,3,29,1,-1,0,5,-4,-1,4,6,4,24,3,2,0,-5,1,-1,1,-3,2,-4,-1,-12,1,3,1,13,2,-2,0,23,-1,-7,3,-2,1,5,1,-1,-1,0,12,2,0,-7,-2,-3,4,-7,0,-5,1,1,1,-2,5,15,-2,-1,3,2,0),
	    13 => w(-6,2,-7,2,12,5,9,1,14,1,3,0,1,-8,7,-3,1,3,7,-1,3,-1,1,0,-8,-8,0,1,-5,3,4,-8,-1,-13,2,-1,12,8,24,6,1,-37,4,0,2,2,2,2,-2,-1,-3,-1,7,15,-1,-16,6,1,4,5,3,9,6,1),
	    14 => w(2,-45,-2,-11,-3,0,5,5,-15,3,-10,0,1,0,-3,0,5,0,2,-1,-3,-3,1,-2,-13,-4,2,-9,0,6,0,29,-34,-1,-1,3,1,-17,1,9,-1,1,1,5,0,2,-3,7,-3,0,-1,3,10,4,6,7,10,2,2,2,-13,-3,9,4),
	    15 => w(-1,3,-5,5,7,1,3,4,35,2,-9,4,-3,-3,-1,-4,2,-2,-11,1,6,-13,-3,0,3,0,-3,0,2,-5,-4,2,0,2,0,-2,-1,3,-4,-2,15,-4,-2,2,0,0,-2,-6,-27,-1,21,-2,-1,7,2,6,5,-45,0,3,1,-2,-1,18),
	    16 => w(-1,2,-10,21,-5,-7,-43,0,17,-9,-6,-1,3,14,8,6,9,-8,11,-9,11,11,-5,-6,5,8,-1,6,21,5,-3,-15,-5,2,-2,8,24,-5,-3,9,0,16,8,-13,-13,2,5,33,-12,-3,7,-9,15,4,6,13,10,0,8,4,0,4,-4,-15),
	    17 => w(-13,-4,32,-18,13,-3,-17,-2,-14,21,-2,2,-1,2,4,-5,1,-4,-26,9,-1,-7,-31,-1,-7,-7,1,-17,-12,-2,1,-13,1,4,-35,-3,-9,7,3,-2,9,-6,49,-11,14,8,-6,5,-8,-13,-6,0,5,-34,0,12,7,2,-4,-14,-4,19,43,-4),
	    18 => w(-2,-10,-10,-3,-12,-19,3,1,-7,7,-21,6,15,-5,-12,-4,-7,7,2,6,11,11,2,1,-18,-1,2,-20,-16,-8,-1,19,1,-1,10,-8,4,23,-5,38,8,10,-4,2,-2,-4,5,-17,10,-3,5,-11,37,20,9,-2,-32,-8,1,-3,33,-2,2,4),
	    19 => w(-3,5,1,6,-4,20,8,2,-1,-6,3,-9,-9,-11,-12,12,4,-6,-14,13,1,8,2,-5,24,1,-1,3,1,9,9,-14,24,16,-9,2,12,-1,1,9,-20,-14,9,24,1,1,18,11,3,6,0,-3,7,-8,-10,0,7,-1,16,-11,3,17,1,1),
	    20 => w(-2,2,1,10,3,4,13,0,3,7,-10,-3,2,-1,-1,3,-7,-7,-3,-2,-8,-14,4,-1,-6,4,5,3,4,4,-4,2,23,3,-5,3,4,1,-28,-4,-1,-2,1,11,5,-1,-14,4,1,0,-2,4,8,-2,0,7,7,7,3,2,-2,3,1,6),
	    21 => w(20,-5,13,-6,-1,11,-2,-1,17,-5,-4,3,-2,-2,7,2,-4,0,10,2,-4,6,10,-1,4,-20,3,10,6,1,-2,21,-3,-3,-17,1,28,-34,-10,0,0,19,-24,-5,0,1,6,-2,9,-3,-5,17,8,-42,1,-32,-5,3,-4,3,0,-14,21,-3),
	    22 => w(-3,1,-2,-3,-3,1,-7,-5,-16,-6,-7,0,-4,6,-3,2,1,-6,0,8,7,-2,-2,-3,5,1,3,-11,3,7,5,30,1,-1,2,1,4,18,0,-6,-6,-1,-2,-40,-3,0,1,-4,-1,-1,0,10,-1,-4,18,1,-11,-9,-7,-2,-14,7,-24,-11),
	    23 => w(5,-5,0,1,-33,1,6,1,2,-15,-1,3,3,13,-1,-1,-3,10,2,2,4,2,-3,10,0,0,3,3,-1,19,-4,-28,-9,2,-13,4,-11,1,26,-3,-12,3,-3,-18,-9,2,-4,2,-2,-9,-25,-3,2,-1,11,10,-13,7,-2,-4,-4,-1,-7,-1),
	    24 => w(10,1,-27,-2,0,-1,-11,-6,1,8,1,-2,-24,21,-2,-1,-1,-1,-2,0,-8,4,-2,-1,-7,-1,3,1,0,-2,1,3,-12,-1,-16,4,0,0,0,-1,-2,0,2,7,2,1,4,17,-2,0,4,4,2,-2,-2,10,1,1,-24,-1,0,-10,-1,1),
	    25 => w(-8,23,-4,8,20,-4,-8,0,-10,-2,6,3,-2,-2,6,-11,4,1,6,0,2,1,-10,1,1,-2,7,2,-10,3,-9,-3,3,-6,1,1,-1,12,-13,-9,-2,3,-1,-3,-2,-1,-8,-1,2,-11,0,-10,2,20,-1,-16,3,-2,-5,1,1,0,-2,2),
	    26 => w(2,-34,2,6,0,0,6,-2,-8,-1,4,1,1,0,8,3,-6,6,-1,3,1,1,0,0,-10,18,0,-7,0,7,-1,-27,-16,-4,2,-6,-1,30,-9,9,0,0,-2,2,-10,1,-2,-4,-14,0,1,-16,0,8,8,5,15,-1,5,-3,12,2,-8,-2),
	    27 => w(1,-6,-3,4,-2,-1,-2,3,8,0,3,0,-6,4,-1,-2,4,-3,-24,-3,-1,3,-2,1,-1,0,-5,-1,-2,-6,8,0,-6,0,13,-11,0,3,23,9,-40,-21,-12,-11,2,1,-4,-3,32,-1,-5,-1,2,56,-1,0,3,25,4,0,5,5,-2,-19),
	    28 => w(-4,2,10,5,30,-11,-7,10,1,11,-8,-22,11,-12,5,-3,1,-12,8,-1,-18,-2,7,0,-6,0,5,7,2,4,-5,-2,-5,17,2,1,5,2,24,-3,13,1,1,10,2,9,-2,1,3,0,-1,-1,-4,-17,6,3,-26,2,-1,-19,-2,0,-10,10),
	    29 => w(4,-3,-3,-3,1,18,10,6,12,1,1,0,-9,-1,-1,-2,2,3,7,1,5,21,13,-8,1,1,-4,9,14,-11,0,13,2,0,9,-4,32,-4,1,0,-4,-8,-3,3,-2,6,14,-3,1,-10,1,12,-2,-11,-3,-20,3,8,-3,1,-27,-13,-9,17),
	    30 => w(3,3,-1,2,20,-6,-5,5,-29,3,1,7,-5,-4,-10,1,1,2,-2,6,-17,1,2,-15,-10,0,-12,19,1,-2,-8,-19,2,-8,0,-1,7,-22,1,0,12,-6,-1,-12,-1,5,9,-3,-19,2,1,-5,0,-2,-1,-4,8,10,1,1,15,-4,-2,30),
	    31 => w(11,11,4,1,20,-1,-4,-1,19,12,1,0,19,5,0,-8,7,4,-3,-15,7,3,-2,-7,3,4,-7,-2,2,13,3,-6,-3,-8,3,4,0,-1,24,7,-11,28,5,5,5,-2,2,-4,-11,3,5,-10,2,19,0,-14,-8,-5,-2,2,4,-4,9,2),
	    32 => w(-2,1,-3,-7,-8,-4,6,5,0,-3,9,1,0,3,2,2,-9,-5,-4,2,-10,3,-3,-4,-9,2,6,-6,-2,-2,-3,1,-8,-1,1,-2,2,-8,-12,-1,2,6,-3,-4,0,2,-12,0,1,3,-2,16,-1,-3,-1,11,6,-14,1,1,0,2,-1,1),
	    33 => w(4,3,-1,-3,0,-1,6,-3,-9,0,7,0,4,-2,1,-3,0,-4,-4,5,12,6,-14,-3,1,3,-1,-4,-1,-3,2,-3,-2,-2,12,2,14,2,3,0,8,-9,-3,-4,-1,-2,1,-1,2,-9,0,-5,0,16,-3,-12,1,1,-16,-1,-17,16,7,4),
	    34 => w(1,3,-3,-3,14,4,-3,-2,2,-2,-2,-3,2,17,1,0,0,-1,0,27,11,37,9,-6,12,-2,-2,-1,0,-5,-3,-2,8,-3,1,-1,0,-3,-1,-3,-13,1,-2,-4,-1,9,-23,12,-2,0,0,58,-6,31,1,-5,5,1,-8,0,25,-2,2,-2),
	    35 => w(-3,3,0,-4,-6,-5,-2,-6,-2,1,-1,-5,2,4,-7,4,0,1,-21,-22,2,1,-8,11,2,-4,7,0,2,-6,-1,-7,-1,-1,-2,-2,-12,-3,2,-17,-5,-11,0,-3,-4,-3,0,-6,1,-3,3,2,-1,-1,-3,-5,1,-1,-3,0,-1,6,-4,4),
	    36 => w(5,1,10,-4,-13,2,10,-1,6,22,10,30,-2,-9,9,-2,-16,4,0,4,-43,-2,0,0,-21,10,1,2,5,9,-4,2,7,-4,0,0,-3,0,-9,1,2,-3,2,-9,8,1,-10,15,0,6,-11,3,-12,-17,6,4,-6,-4,-9,-2,1,-2,7,-1),
	    37 => w(0,-17,-12,-3,-6,0,-13,0,4,-3,3,-8,-16,5,-3,-6,0,-1,19,-2,-1,9,0,1,-4,1,0,3,-25,-9,3,-4,12,-7,10,1,-5,3,6,3,-1,-7,-1,-3,-3,6,2,-6,0,-1,-10,-12,-10,-40,0,-12,-3,-8,1,0,3,7,10,-2),
	    38 => w(1,-2,-5,2,52,2,11,-4,-7,18,97,-3,2,7,24,-3,-4,0,0,6,12,0,-10,0,-10,7,-8,-14,1,17,1,10,15,18,13,1,-25,-8,-4,-4,-10,4,1,-42,1,8,-8,4,0,1,1,-18,-2,0,29,-1,-5,19,5,2,-97,-14,-15,3),
	    39 => w(1,1,6,-5,-22,-3,16,-7,23,-5,-3,11,43,3,1,-12,13,4,8,-15,-1,-10,-4,14,4,0,4,-2,3,-15,1,13,-4,-2,4,-1,-5,1,43,4,5,-23,4,1,0,1,-1,-12,-9,5,-3,1,4,-6,2,-7,-4,5,1,-1,-7,6,-1,2),
	    40 => w(-1,-1,-7,-7,-2,6,-6,5,-5,-19,-10,-1,-4,4,-5,-5,-1,-8,1,-2,-5,4,-2,-2,-12,-1,5,-5,-8,-6,-2,1,-6,-5,1,3,5,13,20,0,7,1,-2,-6,-1,3,-15,-10,4,10,-4,-5,1,-4,-3,6,-11,12,0,3,1,3,-5,-8),
	    41 => w(-7,7,7,-7,-3,-9,-39,1,-4,1,5,2,-3,-1,7,2,3,-4,-7,1,0,3,6,-1,-1,-1,4,-16,1,-9,-1,-15,-6,-5,-25,-3,-7,-10,-6,-1,0,-7,-30,-2,0,2,-4,-1,15,-5,-10,22,2,17,-2,-13,1,-4,13,0,2,12,-11,4),
	    42 => w(-4,0,1,-6,-46,1,9,-3,-4,21,-38,0,-5,-6,-1,1,2,-12,2,12,-8,3,-8,-7,-7,1,3,1,0,-32,-2,-13,-2,-14,-5,-3,34,-2,3,1,0,2,-1,24,-4,-4,5,12,12,31,-1,9,-4,5,6,-5,0,13,4,2,69,1,-6,7),
	    43 => w(3,1,0,5,-3,9,-2,40,-10,-3,0,7,-79,6,2,-11,4,-9,-19,7,-16,-10,1,-1,0,0,-9,1,-1,-2,-5,22,5,0,15,-2,-10,0,-1,-8,19,1,-3,4,0,1,0,-8,-4,4,8,0,-8,2,-6,17,-11,0,4,-2,-4,-2,4,0),
	    44 => w(1,0,2,-1,-6,-5,-18,-10,1,3,2,8,0,8,-5,-1,7,26,3,-1,6,2,0,9,10,1,-4,-5,-13,-1,-2,-2,-5,-1,2,-7,4,-3,28,-4,-4,-1,-4,-11,0,-11,5,-11,-3,0,0,2,2,-3,-6,2,0,-9,-2,2,1,1,-2,-5),
	    45 => w(-1,-3,-3,1,-1,1,3,3,-2,1,-2,1,-13,-2,-11,-1,3,2,8,0,0,-5,-26,-4,1,0,-1,5,-4,0,3,-11,-4,3,1,-2,-23,2,6,-2,0,-5,1,-2,-1,-2,-3,-3,-1,0,3,-2,-10,-6,-3,8,-1,2,-6,0,8,10,-10,-3),
	    46 => w(8,0,-4,-1,-16,2,-1,4,12,-4,-10,1,2,-1,5,0,0,-1,-2,-2,1,0,18,1,0,1,4,7,2,-2,-3,-9,-4,0,3,0,-2,6,-2,7,0,0,0,1,-2,5,6,2,-1,3,6,-22,3,3,17,-4,14,2,0,3,-3,2,-2,-10),
	    47 => w(-1,1,1,3,10,4,9,4,-5,1,4,-13,1,-10,7,12,-3,2,-8,-1,0,5,4,-5,0,-4,2,-1,-4,-3,-1,-1,-4,8,-2,-3,-2,2,8,3,-5,-10,-1,11,2,-3,0,4,-3,2,-7,1,1,3,-8,0,-7,-2,6,-1,3,-3,1,1),
	    48 => w(2,-2,-11,6,-11,-8,16,-11,-4,19,-3,-15,2,-5,2,-2,-10,24,1,-1,-5,1,-9,1,-2,-4,5,-9,-20,6,-6,4,-10,3,3,6,7,-3,63,2,0,-2,12,5,1,-2,-4,-17,-1,-2,2,7,0,-4,2,9,-5,21,5,0,0,-2,4,1),
	    49 => w(-6,8,-18,-3,0,-10,-4,-2,-4,2,-1,0,9,3,1,5,-1,2,-17,2,-4,-2,-2,-5,1,16,4,6,-9,-8,-1,6,-4,3,-2,3,-21,-5,7,2,1,-14,16,-1,-1,3,-12,-1,11,1,-1,6,3,-23,-2,52,0,-2,11,-2,-2,-1,7,-2),
	    50 => w(3,4,2,2,6,-5,6,-2,-5,9,36,0,7,7,26,1,-3,-4,-2,-4,-12,-15,-11,-7,4,-1,-4,13,1,11,-6,-1,-12,11,-7,-2,-11,-4,-4,0,9,1,0,46,-7,-5,-12,-2,18,0,-4,3,8,-18,17,-4,2,16,-3,2,-24,-9,15,-7),
	    51 => w(-6,2,3,-2,26,-2,-6,1,28,-5,2,-7,37,2,-1,8,2,5,-3,11,6,22,-6,9,8,1,1,0,0,-1,4,21,-8,8,18,-1,-14,2,-2,4,-6,16,-1,55,-5,2,2,-4,3,0,24,-2,-3,12,0,4,-27,-5,-7,-2,-1,2,-7,0),
	    52 => w(4,0,9,5,16,-10,-10,-37,-2,4,15,0,-1,2,-15,-1,21,10,6,12,-9,6,5,0,16,-9,3,-7,9,1,12,0,-6,0,3,-1,-7,11,-6,3,14,-11,0,-16,0,-2,8,6,4,1,-7,-27,11,2,-2,1,-1,-22,4,0,1,1,-2,3),
	    53 => w(3,2,2,10,1,5,-2,1,-13,-4,-17,6,-25,-1,-3,-12,11,16,-12,-9,-4,-2,-21,4,3,4,-5,-26,15,1,-3,-12,7,-19,1,8,24,9,-6,-2,-12,-7,-8,-1,-2,2,7,3,2,21,4,-4,0,2,4,-14,-2,11,4,1,3,-19,3,-4),
	    54 => w(-2,-2,0,-3,-8,0,5,-1,21,-7,3,1,-4,-13,-7,1,-4,-3,6,9,-1,-16,2,-4,0,1,22,-5,4,-17,4,2,-8,-8,-2,3,-8,11,6,-37,14,-3,0,0,-18,-2,13,3,2,2,-5,-29,-3,-5,-11,0,-36,7,15,-3,-8,7,3,-6),
	    55 => w(-5,8,0,-1,-13,-5,-6,4,9,9,2,6,-16,4,6,5,3,0,12,-3,0,3,13,-8,-4,-8,4,4,-5,-4,-3,-11,-21,-4,6,0,9,2,-5,6,-6,-17,-3,-7,16,-18,-11,-8,7,-2,-2,8,-3,-2,4,-1,-2,3,17,8,-7,-4,16,6),
	    56 => w(-5,-3,-3,13,-3,1,-22,-36,-3,-9,37,-6,2,-3,-9,8,0,12,6,8,1,10,0,5,31,-5,2,-4,-1,-3,-7,7,-4,2,3,-8,0,-1,4,-12,9,2,7,-24,8,3,0,-6,4,6,-3,8,4,24,0,9,10,1,-5,-2,0,0,2,-4),
	    57 => w(1,-7,-26,-2,-6,6,5,1,0,-2,-1,0,-1,2,-3,1,-1,5,-2,-3,3,-5,7,-8,3,4,8,43,3,-3,-9,1,0,-7,9,-6,-13,45,3,-2,3,4,-16,-2,-1,-1,10,-6,-5,1,-17,85,0,8,-11,9,-6,7,-14,-2,-4,-18,-18,-7),
	    58 => w(3,-3,3,0,0,7,1,-3,5,0,-7,-4,-3,3,2,3,2,6,-3,0,0,12,-1,-13,1,-4,-1,2,4,-5,-9,23,11,-7,-1,-1,-4,-1,2,-21,19,-4,-2,2,-4,7,-13,-23,-6,-5,-6,-7,-7,21,9,1,82,-5,4,-23,26,10,0,10),
	    59 => w(-10,2,0,-1,-27,-5,-1,0,0,0,3,-10,-12,-21,-2,-5,-5,4,-26,0,55,7,2,-7,-5,-1,3,-4,2,-5,-4,-2,24,-3,-5,-1,5,9,-8,10,-3,-3,-4,11,-4,-1,-5,6,-1,-1,10,-8,2,1,2,-1,15,1,1,3,-8,5,-9,1),
	    60 => w(5,3,-26,-5,4,-5,-2,-2,5,-5,3,-16,15,-11,7,1,3,-20,0,2,-4,1,-1,-1,4,2,0,0,7,-3,0,1,-15,2,-6,15,0,-8,-9,-3,2,1,-9,4,0,2,5,0,6,-2,-8,11,-11,2,0,-2,2,-3,5,1,0,4,-3,3),
	    61 => w(7,-17,5,2,61,-3,16,0,16,-4,2,6,-3,-21,-1,-3,-3,-3,2,1,-2,7,1,11,17,-2,-4,-1,0,9,-6,8,-1,1,-4,0,12,8,-6,3,1,39,-9,1,17,-5,-12,-1,-12,-1,1,-7,-6,8,4,-6,-12,-4,-12,8,-2,28,-4,2),
	    62 => w(-1,-15,-1,-4,6,-2,0,-7,-4,-10,10,0,4,3,-3,-1,-5,0,-3,-5,8,9,0,5,10,1,-12,-4,0,-1,3,-8,-21,32,3,1,-2,2,-1,-5,1,-4,0,-16,2,-4,-5,-6,10,1,1,-11,0,0,4,-3,-6,3,-3,3,4,-6,-2,11),
	    63 => w(2,-2,3,-8,-1,7,-23,-3,45,-2,-1,-11,-7,-1,1,-6,-11,1,5,-6,6,1,-1,-1,2,0,-4,-2,0,21,7,1,-11,-4,2,2,5,-8,4,2,5,-4,1,-9,-2,-1,1,13,8,4,5,-4,4,-28,-3,-5,-2,14,-1,-3,17,-5,3,4)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;