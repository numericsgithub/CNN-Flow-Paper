library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core7_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core7_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core7_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(13,-23,-8,6,-5,0,3,5,3,-2,4,4,0,-2,5,8,2,4,3,-13,3,-5,-2,-13,1,5,-4,-1,-1,3,-9,9,7,0,6,-12,8,-4,-10,-3,-6,-3,-22,-4,8,64,1,7,-10,0,-6,4,4,3,2,-22,4,-21,-2,-4,-2,-11,1,-1),
	    1 => w(-1,16,-6,10,-8,15,-16,11,5,-21,7,2,1,0,4,4,-4,-11,0,-7,-3,4,-5,-8,-3,8,-20,1,4,-2,6,20,4,4,0,42,11,3,2,2,2,-1,-3,5,-1,-2,1,-2,-1,0,-7,7,11,-20,-2,-10,8,-5,-12,-7,22,-15,-3,-6),
	    2 => w(7,0,2,19,-3,-16,5,-16,-5,-3,-1,8,-4,1,3,-3,-22,-8,-9,-3,-18,-12,-2,3,-1,-6,-2,-16,2,5,-9,-1,-5,-18,8,-10,5,-1,-5,1,8,8,10,-2,-21,10,-1,-17,-5,11,-2,3,3,5,4,0,-1,-3,2,-2,-25,-1,-19,5),
	    3 => w(-8,0,-7,-4,1,16,-5,11,2,10,1,-1,0,1,9,4,-19,-11,14,-1,1,1,3,-5,14,1,5,10,-3,-9,2,42,0,-18,0,14,6,-25,3,-2,-3,-5,0,2,0,-2,8,-9,-3,0,-7,-1,-8,4,-6,-9,-11,-2,-14,3,-6,8,6,-4),
	    4 => w(-2,-2,-4,-6,5,11,-1,-14,3,-8,-50,16,-4,10,-1,7,-2,-12,7,-11,-4,-4,6,-1,-4,5,3,2,-5,-4,-2,-2,0,2,11,6,4,4,-11,-4,5,5,6,-13,-12,-16,16,-18,0,1,8,1,1,8,5,3,11,17,5,14,3,5,0,0),
	    5 => w(7,-22,6,-30,-1,0,-9,15,-4,-1,13,6,-1,-1,12,-2,-29,-5,8,13,14,-1,-8,-17,-4,6,4,-6,15,6,-2,3,1,0,3,8,-7,3,0,-28,1,-5,8,-4,0,-4,4,8,7,-1,2,4,5,-3,6,-1,-5,-1,-1,-4,3,2,-2,15),
	    6 => w(-4,-1,-2,5,9,-6,-3,2,-7,5,-16,-5,-4,-3,2,0,-8,-5,-2,27,-5,13,4,3,1,5,0,6,0,-5,-3,0,2,-25,10,17,2,0,1,0,-3,15,2,-5,-2,4,1,-3,2,0,3,7,7,6,9,8,2,0,6,3,-12,-4,-3,9),
	    7 => w(-8,3,6,-7,3,7,2,-1,-8,2,13,2,9,6,8,-11,19,-3,6,-6,15,-9,-1,7,6,-1,1,3,4,3,-6,-3,1,-4,3,4,10,12,-13,0,5,0,1,2,0,-11,0,1,-1,-5,8,13,5,1,7,-6,8,-3,-3,-3,37,19,2,6),
	    8 => w(-8,0,-7,9,-15,-2,4,5,0,2,-5,-12,10,-2,1,8,-6,-2,1,-10,2,0,11,-8,-2,2,-12,12,-15,8,8,3,6,14,5,-4,6,0,1,-2,-9,5,6,0,-2,0,0,-3,-6,4,-2,-12,8,13,7,-1,10,4,7,8,0,9,2,8),
	    9 => w(-1,-9,-1,-9,2,2,-6,3,-15,-6,1,0,-5,0,10,5,9,-2,-3,3,7,-7,-8,8,1,0,1,8,0,2,1,-8,6,21,-2,0,21,9,-1,5,1,-8,1,1,8,1,1,3,1,10,-1,-1,-3,2,10,0,-3,-2,7,-38,9,-6,2,2),
	    10 => w(-4,-1,-1,-4,1,-6,-2,-6,-2,6,1,-2,-24,6,-2,-1,-3,11,-1,-8,8,3,0,-4,8,1,-2,9,-4,10,7,0,-9,-4,7,-4,5,0,7,-13,-12,13,-13,7,-4,3,8,-4,-6,-1,0,5,-6,-2,-4,-1,4,-1,-12,-9,4,-3,-5,-1),
	    11 => w(-10,5,7,-4,-8,-1,-2,4,-3,0,-10,3,5,3,5,-3,-2,1,1,2,2,-4,5,6,0,-9,1,0,-2,1,3,0,1,-5,11,-4,5,-19,8,0,-8,-3,2,5,0,-3,-3,-16,19,-4,-4,1,12,4,8,8,1,9,2,1,1,11,12,26),
	    12 => w(-1,19,16,-3,11,-1,1,5,0,3,-2,0,0,-6,2,-3,7,4,-4,1,-2,-3,0,5,0,2,2,9,-9,14,-5,19,-4,-1,3,3,-3,2,-1,5,1,1,10,7,2,8,-8,-6,5,-4,1,3,-12,1,7,2,-8,3,5,2,1,-6,-9,3),
	    13 => w(0,2,-1,-13,0,0,2,-10,4,3,-10,7,0,16,2,6,-8,-18,-1,-10,0,-7,-1,2,-1,-2,-2,6,-3,17,-5,-2,-8,7,0,-4,-7,0,-15,11,3,3,-6,0,6,-3,-1,-1,4,3,-7,0,-2,-6,-2,2,8,6,3,-10,7,0,-2,7),
	    14 => w(-2,-3,-7,8,3,8,-9,-2,5,-8,8,4,-7,-16,7,-2,-3,1,-5,3,4,0,0,2,2,7,0,0,2,8,3,-1,8,3,-10,-14,1,1,-2,-4,-17,-7,1,2,4,0,9,4,-8,-2,6,7,-5,0,-8,-2,4,16,-7,-3,0,6,2,-1),
	    15 => w(-5,2,2,-1,1,-7,10,0,4,4,-9,3,-4,-3,0,0,-10,-5,-6,-11,10,5,0,2,6,1,3,2,3,-6,-5,8,-5,0,-3,-11,-2,0,6,-1,-11,10,-2,-3,2,-5,-8,12,3,0,-8,-2,-11,-2,-7,-5,-14,-2,4,-4,0,-2,-6,-9),
	    16 => w(1,0,5,-2,5,0,1,7,-1,2,47,-22,0,22,2,4,-6,5,0,4,-4,-1,9,-3,-1,3,8,-13,10,-9,-11,8,-2,9,-1,-4,19,-3,4,-11,2,-12,6,-4,-1,-6,3,3,-5,3,-1,3,-3,-1,8,6,-3,10,4,6,-3,0,-3,2),
	    17 => w(4,-20,4,-9,0,1,-19,-19,-6,-1,11,3,-1,18,-4,-1,25,3,1,11,-7,4,-2,-13,-1,-4,2,4,-8,4,0,-6,4,3,0,8,5,-5,3,-23,-1,-6,-2,1,5,-1,1,4,-1,3,2,7,8,3,6,-5,2,-6,0,1,3,6,-6,-8),
	    18 => w(-1,1,-2,6,5,11,5,4,7,0,6,3,-6,2,1,0,3,-5,0,6,3,2,4,18,-2,1,10,11,-3,1,4,-1,4,30,0,2,3,1,-2,11,1,7,-3,-4,0,13,-5,2,3,-2,1,19,0,0,4,8,7,1,0,3,-1,0,2,-1),
	    19 => w(-10,16,6,-3,0,7,-1,-6,1,6,5,4,3,-7,3,3,-4,-10,-2,-7,17,-6,-2,1,0,2,3,-18,3,-2,5,0,1,-8,-1,16,-1,7,-12,1,11,3,4,4,-4,6,3,-9,2,-4,-2,0,-6,5,4,3,-7,4,0,0,22,5,-3,1),
	    20 => w(-3,3,-4,-6,0,1,-2,2,-1,-5,-2,0,5,0,-1,-8,1,4,-2,17,0,4,1,4,-2,6,-2,4,6,-4,6,-1,-2,-5,-9,6,-13,-8,-19,24,2,-5,-3,-2,-7,-6,-1,15,-8,-1,3,13,5,-1,-12,4,6,7,-1,-13,-2,-1,-11,-6),
	    21 => w(-6,13,0,7,-9,3,8,9,-4,-2,-33,-9,-6,0,2,0,-13,15,11,-8,-4,0,3,-13,1,10,16,-7,6,-10,2,3,-4,-12,5,-17,3,5,-12,4,2,4,5,-11,0,-2,-7,6,3,-3,-15,9,1,6,0,-1,-1,14,-18,20,-8,5,-5,-5),
	    22 => w(0,-1,8,9,-4,-10,-6,-6,5,-3,5,4,4,-6,-1,2,4,-1,0,3,3,-1,-9,-5,2,-3,12,0,-5,11,-13,2,7,-2,0,10,-11,0,1,-1,-6,-22,-4,4,2,2,-4,-6,8,3,-2,-15,-6,1,2,2,-9,5,-2,-8,2,-3,15,3),
	    23 => w(5,-14,-7,6,0,1,12,15,0,-1,-18,-3,-1,-6,7,2,2,-5,23,-11,3,-2,3,-7,15,-3,4,-3,0,-4,-3,2,-4,17,-22,-4,-1,-11,-7,2,-2,-5,0,-1,3,4,-4,28,-4,-3,-9,-6,6,-23,4,28,3,-4,-9,-3,3,6,-9,-10),
	    24 => w(4,2,-2,-5,-4,6,9,6,-1,-7,9,-3,-7,-3,-15,6,-11,3,-1,-10,-1,-1,0,-2,0,2,-21,-1,10,-14,-2,2,0,27,11,-3,4,17,4,-4,7,5,-8,-2,1,7,-5,-9,8,-2,17,-8,-5,0,-7,3,-2,1,-5,-3,-1,-9,-1,-1),
	    25 => w(-1,5,0,9,2,-1,-7,7,6,-8,16,-5,4,-1,-19,14,4,4,-3,0,-12,3,-13,-2,0,15,0,-2,3,-1,1,12,26,-7,15,-3,-9,-16,0,-3,5,4,-3,-1,-69,-4,1,3,6,6,-4,-2,-1,11,13,-2,-4,-3,1,0,5,18,-4,20),
	    26 => w(2,-4,0,-5,3,-5,13,-15,-6,3,3,-3,-3,0,4,4,-4,-6,-1,-9,-5,-2,-14,2,-28,-9,-21,0,2,-2,-2,-2,-4,-16,8,11,11,-6,-10,18,-1,11,-20,-6,-1,-5,-13,-4,-10,0,57,0,2,1,2,25,-13,-4,-5,-15,2,2,-5,2),
	    27 => w(-3,14,-1,-6,-1,3,4,4,9,2,-5,8,-2,6,1,3,4,-1,-3,-3,-9,-1,-23,7,2,-11,6,-2,2,6,-6,0,-1,-5,-21,6,-54,6,2,0,-6,-3,-5,7,10,-2,8,-8,-8,-6,-9,-11,8,1,-13,6,0,-1,2,2,8,-10,1,0),
	    28 => w(-1,-6,-22,2,-1,0,5,-5,0,-2,2,13,4,3,2,3,2,5,-4,-2,2,-2,5,-5,3,-12,0,-4,4,4,-23,7,2,0,-10,19,-10,1,-16,0,-6,2,-4,-7,-8,-20,1,-12,-9,-1,-3,-3,2,-1,5,-12,4,-30,1,-2,-11,-7,23,-8),
	    29 => w(8,2,-2,-10,-19,-3,-18,13,-1,-19,-4,3,-2,0,3,9,2,10,3,-12,0,-2,-6,-10,-1,4,15,-8,2,-4,4,0,-1,3,-1,13,5,-15,-12,-6,-2,1,-18,5,-7,-1,-3,1,-11,15,-5,16,-7,-4,-3,-1,-5,-13,7,2,9,14,-1,-11),
	    30 => w(1,0,13,1,1,-20,-4,4,-1,0,-2,10,-9,8,-10,-4,-27,-13,5,-10,-23,-8,4,-5,2,-3,6,-10,-4,14,-1,-2,3,2,-12,9,11,3,-3,10,-3,-2,3,-2,-33,7,3,39,0,4,4,-3,1,4,8,6,0,-4,-1,0,23,-10,9,3),
	    31 => w(-2,-18,-16,3,3,4,-21,-3,1,13,-3,-2,3,-10,16,8,-8,-54,23,-16,-6,3,1,-1,30,-5,-4,9,-1,-2,5,-2,-7,-5,-7,10,2,-9,0,-1,-14,-23,-14,-1,-5,-4,0,-15,-2,-7,-3,-6,0,3,-4,13,10,2,-21,-8,3,-1,-9,-7),
	    32 => w(2,-2,8,-1,10,2,-2,-22,4,-3,46,8,-2,14,3,2,2,-17,13,-14,-3,1,11,3,-2,-1,0,1,7,-10,-7,5,-2,6,13,1,7,0,5,-4,4,3,-3,3,-8,14,14,-9,4,1,11,-4,6,7,6,-4,18,-5,3,-3,2,-3,-5,-8),
	    33 => w(9,-14,6,-33,5,-1,12,-5,-5,5,13,6,-13,-2,10,-3,42,-13,6,11,-12,3,-5,-14,-3,-4,4,-2,3,2,-5,10,-4,-1,4,14,-6,4,1,-34,6,2,0,-6,5,-6,4,4,9,-6,1,4,1,-9,11,-1,-9,3,-5,1,4,5,-13,22),
	    34 => w(-14,-1,1,10,9,-2,-7,-4,-11,2,-23,-3,-8,0,5,-2,-1,-9,2,6,-9,15,3,11,-3,7,2,0,0,-8,10,-1,7,-3,16,18,4,0,0,-6,0,18,-2,-7,2,1,-1,10,-10,12,3,19,6,11,8,2,14,4,-11,-4,8,0,-5,1),
	    35 => w(1,4,1,-7,5,-3,7,-4,-9,5,-23,3,8,5,4,-4,5,-7,9,-32,18,-12,-7,6,7,-1,-1,3,5,2,-2,-3,2,1,0,16,11,14,-8,-1,12,-1,3,-1,-2,-2,-1,-11,8,-13,4,14,7,-1,11,8,7,-3,11,0,-44,23,1,-2),
	    36 => w(4,-7,14,4,0,1,-1,-2,-2,-4,-9,9,2,1,-1,4,2,-6,1,18,-7,13,2,16,-4,8,2,1,-1,6,-9,2,-7,2,-11,7,-6,2,-3,11,-2,-5,-7,-6,-1,-1,-4,-5,2,-4,-2,-4,-3,1,7,0,-6,19,2,-9,-6,-8,-29,-8),
	    37 => w(7,-4,-4,-1,2,10,-1,3,-24,5,-5,4,0,8,3,17,7,3,1,2,2,-4,-3,-6,-1,3,-14,0,2,0,11,-1,-1,3,1,-5,-8,-11,-10,1,-10,0,16,-2,1,-2,-4,-1,10,12,-2,5,28,-3,-2,-1,-12,-18,5,8,10,11,5,-16),
	    38 => w(-3,-1,4,2,-6,52,-6,-4,-20,0,0,0,-4,-6,7,-1,8,9,-8,-1,21,-10,-1,-9,2,-2,-4,52,15,6,3,0,-8,13,-14,7,-1,-1,4,1,-5,-2,3,-6,8,1,3,-12,-7,-4,6,-1,0,-6,3,6,3,-6,2,2,-37,-4,13,4),
	    39 => w(1,-6,0,1,-5,15,-9,-6,2,-5,4,0,-4,-8,8,-4,-13,-20,15,5,0,9,1,17,8,1,2,-10,7,9,-2,5,-10,-11,-13,-8,3,-15,0,-2,11,0,-4,5,-1,2,-1,-31,-2,5,-1,-5,-1,1,-4,-11,-30,0,2,-5,-15,8,4,-8),
	    40 => w(-1,13,13,10,1,-1,4,-4,2,1,-1,4,-3,-5,-6,-5,-1,1,-4,7,-4,0,-7,2,-2,1,7,6,-1,-6,0,15,-5,-7,-8,7,8,11,7,9,2,2,3,7,-3,-5,-13,-10,5,-3,2,2,-5,-3,-12,-1,-2,9,2,-7,-4,-2,-10,3),
	    41 => w(-9,-13,11,-11,3,0,21,-21,2,6,-4,-7,3,7,2,-9,-7,1,-20,0,6,56,-12,5,-3,-23,13,-3,-5,-4,-5,-7,8,-1,-2,-6,4,3,-15,-4,-3,1,-1,0,7,5,10,7,-3,-5,-3,-4,2,-1,-3,-4,7,-9,0,4,-6,-6,-11,-4),
	    42 => w(-8,-3,-2,-9,-7,4,-1,0,1,5,-3,0,-5,-4,2,6,14,18,0,-5,-3,1,11,-3,-6,-1,24,6,0,2,-3,1,-6,14,9,-4,0,5,3,-6,6,0,-12,5,-1,1,-8,4,-8,-7,-3,3,5,-2,-1,-16,18,-10,3,3,1,11,1,1),
	    43 => w(5,4,-4,0,-2,0,8,-3,4,-9,-1,3,2,-19,2,0,-13,-2,7,1,-8,4,-15,1,-1,0,3,0,1,0,2,-11,-5,3,2,-9,2,-13,-11,3,7,6,-5,9,-1,0,2,9,2,2,-1,-3,-9,-3,12,-5,-5,-5,-7,-7,-14,1,-1,-3),
	    44 => w(-5,9,1,-8,7,1,0,-3,-2,49,-1,4,0,-7,4,4,18,-9,2,3,0,-3,-6,7,-1,2,-1,0,-29,-29,16,-6,-1,-1,-10,-3,-6,-1,4,-4,4,-24,21,0,5,11,-3,-5,-9,-4,10,5,9,-1,-2,-4,1,-1,-2,1,-2,22,2,4),
	    45 => w(1,1,8,6,9,-1,-8,-4,13,0,-12,10,-6,4,1,26,19,4,7,-32,-4,-24,6,1,4,-9,1,5,-4,6,3,-9,-2,6,1,-2,14,21,-2,20,16,0,7,6,4,3,-2,2,1,0,17,-9,3,-5,-3,-2,-7,9,3,46,-13,-4,2,47),
	    46 => w(-4,2,-11,-10,-11,0,-16,3,1,-4,4,1,7,10,2,5,-1,3,1,-12,4,61,6,5,-3,-15,6,-6,-1,3,7,0,12,9,22,15,2,-4,-7,-1,11,11,-5,13,3,18,-2,3,6,4,0,-7,-10,1,-6,-4,2,-3,21,3,-5,5,-9,0),
	    47 => w(0,12,-18,26,-1,-5,-2,2,-7,-2,4,15,-3,-15,1,9,-12,-3,-8,-2,1,4,1,5,3,2,1,7,-2,11,-13,-9,-1,-9,8,-10,-2,44,5,3,-11,7,2,18,3,-3,-2,-7,3,0,-15,2,-12,-1,2,-13,4,4,-6,-10,2,22,10,-1),
	    48 => w(-2,0,0,-15,-2,-1,7,2,-2,1,0,5,4,2,6,2,11,-4,-4,-5,0,-3,13,-1,2,7,-1,4,1,0,5,3,-5,13,0,2,17,-1,1,-4,12,8,-1,-7,-4,-2,2,-7,2,-4,13,3,-7,3,2,1,-4,4,2,4,5,22,-7,4),
	    49 => w(10,-14,-9,4,10,-3,-3,1,7,10,1,12,5,-1,2,3,12,0,22,-14,-3,10,0,8,11,-13,13,-4,7,-11,-4,5,12,3,4,-3,11,-4,7,-14,-6,-1,3,0,-1,12,2,1,15,0,4,3,6,-6,2,-2,8,3,-1,-11,20,15,3,-2),
	    50 => w(-4,-3,4,0,-6,5,-4,9,-3,11,16,0,4,0,-2,1,-5,22,1,5,0,6,-2,13,-4,-7,3,5,-2,5,7,1,-2,11,-8,-3,3,-3,-2,6,1,6,1,1,3,13,-1,4,-3,-2,3,2,-2,-1,2,13,24,0,8,-9,7,4,2,4),
	    51 => w(16,17,3,13,-2,-2,6,-5,-3,-1,4,1,-4,13,1,3,15,3,4,13,2,-7,-7,1,8,0,1,-2,-2,-8,7,17,-2,10,46,-1,4,-3,11,9,14,5,6,9,5,4,3,-11,11,0,1,10,6,-2,8,3,-1,-1,0,5,-1,6,10,4),
	    52 => w(3,-3,-1,4,-2,1,-2,0,2,6,0,-9,-2,-3,4,3,-3,0,-3,-5,-1,-19,5,5,-1,5,5,2,-2,1,-15,11,0,0,7,-5,3,-1,-11,-3,3,19,-3,-6,5,-5,2,-19,11,0,4,-5,0,0,7,-1,-4,15,-2,-9,6,8,-8,-3),
	    53 => w(5,-5,6,10,10,17,-6,12,-2,-16,11,4,0,-5,2,-18,14,-3,-2,7,0,1,1,11,5,1,9,-11,-8,-4,14,16,1,3,2,5,6,0,-6,4,3,-5,7,-3,-2,7,-2,0,0,-13,6,5,12,12,-1,-1,-20,-10,3,4,11,7,0,7),
	    54 => w(-3,-1,6,3,4,17,8,-14,-6,2,3,13,-3,14,-2,1,-10,-6,-9,-2,-5,13,1,0,0,-2,-4,-1,-3,-3,-8,-1,7,4,8,6,-1,-4,-3,-4,9,10,6,0,0,4,8,4,-11,4,-2,3,5,0,-4,5,-1,2,-7,0,-7,1,5,8),
	    55 => w(1,14,2,0,9,17,13,0,-5,-5,-15,-2,0,3,0,-3,12,-7,0,7,4,0,2,-8,1,1,1,3,1,-4,2,13,-4,1,2,9,-5,0,0,1,-7,-7,-5,-6,-1,1,-3,3,1,3,4,4,-3,-2,-2,-10,4,4,-17,0,5,-4,1,-2),
	    56 => w(-7,2,7,5,17,0,6,4,0,-19,19,3,-2,6,3,10,-8,8,-4,-1,0,0,24,-4,-1,0,-1,-27,0,2,3,0,0,-2,16,3,17,-14,-7,-1,-5,4,18,-3,1,7,22,3,-7,2,6,-8,-3,3,-3,-2,0,4,2,6,7,22,-1,11),
	    57 => w(9,-5,4,7,2,-1,1,0,-19,7,24,6,3,-1,1,8,2,-9,14,4,0,-4,-2,17,0,-14,7,0,0,1,-1,0,1,-2,5,-14,-3,2,3,-1,-3,3,2,1,2,2,1,4,-7,13,0,2,-3,-5,-1,-1,8,-5,-3,-27,8,-12,5,3),
	    58 => w(2,-4,-1,-2,14,12,4,4,-8,6,-27,-2,-3,-17,-1,0,-1,7,1,1,1,-4,-3,-2,2,0,-4,-2,2,2,-1,1,-23,14,-16,-26,7,2,9,1,-14,3,25,4,1,9,7,-4,3,-7,9,2,-1,1,-13,1,10,1,-11,14,-3,-3,2,-1),
	    59 => w(7,6,21,39,-9,1,9,-14,-3,-2,10,10,-8,-5,6,-6,2,3,9,9,18,-1,2,6,5,-4,0,2,-4,-2,-5,-10,-1,11,35,7,6,-21,3,3,-2,-1,11,0,-2,-1,2,5,-1,7,16,-3,2,-10,-11,9,-1,15,-5,-1,11,-2,-1,20),
	    60 => w(-13,-2,3,12,4,-3,-5,7,2,0,3,-20,2,-5,3,-2,1,7,3,-6,-3,-1,3,1,-3,-4,5,-9,27,10,2,1,0,-5,0,-15,-11,21,-2,-9,10,-7,10,-11,-14,-5,10,-12,0,3,0,-6,6,1,-2,31,-19,-2,-1,2,-4,-11,-16,-5),
	    61 => w(-16,12,-3,9,-6,-1,-2,-3,-5,-3,-25,-2,4,-9,-5,-10,0,-7,-18,-2,7,26,-6,-3,2,13,6,-14,1,5,-9,-29,11,-10,-3,-59,-3,2,-3,-17,-5,7,1,8,-1,0,8,2,8,9,-5,7,7,0,-5,-2,0,7,-6,-4,-8,13,6,-8),
	    62 => w(5,1,-1,-23,1,2,10,5,-13,-15,-7,0,6,-20,6,-4,-8,3,-1,-12,-6,8,0,-7,-2,5,-1,1,1,8,11,-4,-9,-3,-17,-2,-29,-2,-8,-3,-5,15,7,-2,4,-1,-1,0,-7,4,9,11,-1,-2,4,1,5,3,0,-9,15,4,-17,-1),
	    63 => w(-7,-21,-9,-10,0,2,-6,-8,8,7,15,9,-5,-7,6,-6,-15,-12,4,10,-7,-1,10,7,-3,14,-3,-4,5,8,1,5,2,-2,-21,-4,-3,-9,-5,-2,0,5,-3,0,0,5,-24,-6,-3,15,-3,-1,30,5,2,0,21,6,-10,1,-1,22,4,-13)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;