library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv9_core4_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv9_core4_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv9_core4_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(0,0,5,3,-1,5,-35,49,1,-1,-12,1,4,1,-1,12,-4,-4,1,-10,-2,9,-1,3,17,1,5,3,-13,1,-26,9,-6,0,1,4,-6,-2,-1,-7,2,3,5,31,2,2,-3,-4,-1,-2,-1,-3,2,29,16,-2,8,-5,1,0,0,3,-1,-1),
	    1 => w(0,0,-4,-2,-1,19,-4,0,1,2,-4,-2,35,1,-1,-1,3,-1,0,-1,2,3,14,-4,2,3,0,14,-7,-3,1,23,9,45,-10,0,-48,19,2,1,8,8,-19,0,0,6,6,-8,-7,-16,-1,27,4,-27,3,0,-1,7,-17,3,-23,-13,-2,4),
	    2 => w(-9,-1,-13,-2,-4,6,4,9,-23,0,0,-2,-2,-4,15,-1,1,4,-2,0,2,2,4,-7,-28,-3,5,-3,5,0,-20,7,2,-1,1,1,-5,8,-3,1,-1,0,-1,-5,5,-1,3,-65,-1,0,2,15,4,7,-13,6,12,2,9,-29,-13,2,-4,-7),
	    3 => w(6,2,-2,-1,-12,-6,-8,3,3,3,1,-2,-9,-13,0,9,1,5,3,0,34,-5,-3,3,-3,2,-6,-6,2,8,-1,-11,12,3,-4,1,-15,3,-8,5,-1,14,0,0,5,0,1,2,-6,1,-4,0,-4,-5,-4,-1,4,1,-1,5,0,-1,8,2),
	    4 => w(9,3,-20,9,10,-1,-15,7,-3,-3,3,-4,-1,-13,-15,-2,4,-3,-6,-3,5,-3,-4,-5,-8,-12,12,-1,9,12,-1,4,6,14,6,-10,4,5,12,3,5,-3,-6,2,1,6,1,9,8,-3,-20,-5,-12,-1,2,-2,-6,14,-7,4,0,-4,3,-1),
	    5 => w(7,-7,15,-3,24,-10,4,-2,-7,-4,-15,7,-5,-2,15,-8,-1,-8,-7,-1,4,8,-13,-5,-1,0,20,9,15,6,4,-9,-2,-7,-7,2,-1,8,-2,5,0,1,17,-9,-7,0,8,6,16,-12,2,-8,27,-1,0,-4,-8,7,-6,0,0,14,-10,-5),
	    6 => w(-7,-20,19,2,-1,4,-2,0,-21,-1,11,-1,-5,-4,-8,-3,0,7,6,-1,2,-5,-9,-4,-33,8,18,-11,3,-12,6,13,43,-13,-3,10,4,-9,15,0,-3,4,4,5,15,-2,11,-2,15,4,6,-34,3,2,6,13,2,-2,2,-4,4,31,6,-6),
	    7 => w(11,0,-7,1,0,2,-21,14,-19,-3,-11,3,4,-3,-1,-2,2,3,3,15,-3,5,4,0,-7,0,-5,3,0,7,1,-27,-2,-3,-12,-1,-11,4,3,1,-18,-7,-3,12,5,1,4,-9,-3,1,12,2,-2,-18,-3,7,8,1,-2,-6,-31,9,-4,4),
	    8 => w(7,-1,-37,-11,5,-4,-15,-2,0,12,-2,12,16,-9,-7,-2,4,12,2,-1,-19,3,0,2,-5,-2,3,1,2,-3,-2,1,-30,-2,-2,-20,3,9,-10,4,3,-4,2,1,3,1,5,-17,6,3,5,-11,-1,2,1,-1,4,-19,-1,1,-1,-1,3,-9),
	    9 => w(-3,-39,7,2,-11,-5,8,1,36,-4,1,-4,-1,5,0,-2,4,4,-4,-2,8,-4,-7,-3,16,-5,-5,-9,1,-6,-8,-12,0,-5,-9,5,10,3,1,0,-4,47,5,0,-9,0,28,-1,6,-1,-6,-1,0,-4,0,-23,-24,6,17,4,-3,18,2,3),
	    10 => w(-5,9,6,6,-11,2,-3,-5,-9,-1,0,-1,-8,-11,-6,0,-5,0,2,-3,-3,-12,0,-7,-19,-10,7,-1,1,6,-2,10,-6,-3,-2,-13,3,-35,3,2,1,-14,-4,-4,-1,-2,8,-2,7,2,1,-10,-15,3,5,2,-5,2,2,-3,19,4,0,-1),
	    11 => w(1,6,3,-7,4,0,5,10,-2,-2,6,9,11,3,4,-4,10,-5,-16,7,-4,-1,4,-2,-4,1,-3,2,0,-10,2,9,-12,-4,11,7,-6,-1,-9,13,10,5,5,-8,5,-2,3,-6,-17,1,21,-4,-1,-8,2,2,9,-4,12,2,2,2,4,4),
	    12 => w(0,-2,-4,-10,-10,-4,-16,0,3,13,17,-14,-2,2,12,2,-1,-33,1,1,5,-3,-1,0,-8,0,19,-6,10,-4,-7,0,0,-8,-2,-7,3,13,-11,2,19,-6,19,6,3,1,-3,-1,1,8,-7,-14,-8,15,0,3,23,-14,-5,-3,-1,3,5,-1),
	    13 => w(1,-5,-1,-1,-3,-5,4,7,-2,2,-1,-2,-9,-2,-2,0,-1,-4,0,-2,6,-20,9,-15,1,2,1,-14,3,8,-3,-5,-2,-6,0,0,22,-19,2,1,1,8,-2,-3,-2,19,-11,2,2,-1,-6,0,6,3,-4,8,-3,3,53,-4,-29,-5,10,-1),
	    14 => w(6,-2,-2,-3,5,-1,1,-10,-31,-7,-4,-4,1,0,6,-3,0,1,-15,-7,-1,-15,-7,-21,-25,0,6,-5,0,0,-30,11,7,1,0,1,-6,1,0,5,43,-1,1,-6,-3,-17,5,-48,5,-1,-8,33,1,10,3,0,0,-14,8,-10,-19,-2,-2,-6),
	    15 => w(-1,0,-3,-3,-32,-2,-20,2,-19,2,-4,15,-3,-9,-3,23,3,1,-5,-4,52,1,-1,-2,-2,4,4,1,-1,2,0,15,1,0,-6,-4,-10,-3,-7,10,-8,20,-1,1,1,-3,1,-4,-5,1,-13,-5,1,-6,5,3,14,-1,5,3,-3,-7,6,5),
	    16 => w(-24,2,28,-4,5,-5,-5,3,13,-8,-3,88,5,-1,4,1,2,-16,5,6,3,0,1,0,4,16,-4,7,-9,10,2,2,10,-1,2,-17,4,2,-25,-5,0,4,-6,8,-3,0,5,5,-13,-1,18,3,45,1,5,5,2,5,-4,1,-1,8,5,-6),
	    17 => w(-2,16,-2,-5,-22,0,3,-1,-6,3,2,-14,3,10,4,-6,0,-2,-9,1,1,-1,-7,-1,-5,5,5,6,3,17,-6,10,3,0,-21,-2,5,22,74,-1,-3,9,-17,-7,-25,-2,-16,1,2,-5,-6,-3,-7,1,-2,-14,9,2,2,-8,1,11,5,-6),
	    18 => w(0,-4,-4,-14,14,-3,3,-1,7,3,-4,0,0,1,21,-13,7,0,0,0,42,-2,3,2,-2,3,-6,-8,-2,-13,-5,-1,-5,7,26,-14,-2,24,3,5,-1,-24,2,-8,-4,3,-2,2,46,1,-1,-3,10,-3,24,-1,-3,-9,-2,1,8,3,9,3),
	    19 => w(7,-9,6,0,-7,6,63,6,-14,-1,13,0,1,7,-2,-1,23,2,1,-2,2,-11,-1,15,1,-1,4,-4,0,5,-1,10,-17,0,-8,5,1,2,11,8,-9,1,-11,-20,4,0,-1,4,-3,-5,-62,1,18,-28,-1,2,-2,0,7,-2,-10,4,0,-3),
	    20 => w(-1,3,6,-5,-7,-2,10,6,2,0,6,-3,-1,28,3,-2,-3,4,6,1,2,-1,3,0,-16,0,2,-2,3,-5,-5,0,6,-5,-3,-1,-4,2,8,0,1,2,8,-2,-1,3,0,21,-4,1,13,0,7,-3,1,1,-4,5,5,-3,1,-8,2,-6),
	    21 => w(-5,-1,-1,-2,0,3,-9,0,-2,2,1,-4,4,2,-1,8,-1,1,1,1,0,-6,-1,-4,1,3,-2,4,-7,0,-1,-7,-1,-4,4,-1,0,2,-12,3,3,-12,-2,-1,15,4,-38,0,0,-3,4,-3,0,-1,-4,-8,-1,-4,10,0,0,-16,-9,1),
	    22 => w(-1,32,-7,-7,-3,0,4,2,-2,-2,2,-1,2,3,10,3,5,0,-1,-2,1,0,1,-4,-4,5,1,4,-1,-3,-7,7,-6,1,1,0,-3,21,-7,-2,4,2,-1,-1,-3,5,-7,8,5,-2,0,10,-5,5,-7,-7,6,1,2,-2,-1,-9,7,3),
	    23 => w(-4,-1,-2,14,-8,1,10,0,-4,-2,6,13,-1,-2,-2,3,3,4,5,-9,1,-5,-3,-3,5,1,3,0,2,-1,-4,2,11,-4,-1,-8,1,2,2,-3,6,0,9,0,2,1,-2,-7,45,-6,10,2,-1,3,-3,1,-9,-1,4,-1,9,-2,2,5),
	    24 => w(2,-1,10,-29,-11,0,9,24,-2,-10,2,-18,-2,1,2,23,3,-24,-3,3,5,-8,-2,8,-15,-2,30,-3,3,1,21,2,7,-8,-3,0,5,-10,3,-3,-8,-7,33,24,1,10,2,-4,0,-24,0,-16,4,11,4,2,55,15,-2,-5,-1,3,1,3),
	    25 => w(-7,-6,10,3,-5,6,10,-2,-2,-3,3,0,-4,1,1,0,-9,-8,-22,2,-7,-5,-23,-17,-1,6,8,-14,-2,3,1,-34,-6,-6,0,-3,-7,20,-1,-2,9,5,-11,-2,1,14,-3,-4,1,6,-2,-10,-2,29,0,-8,0,5,4,-2,-3,-23,-2,2),
	    26 => w(-3,-4,-5,1,6,0,-2,-8,11,-6,1,7,-2,2,16,3,-4,28,-6,0,-4,-17,10,0,-34,2,9,8,1,-6,-2,-4,-3,0,0,-3,-3,-4,-3,12,4,-4,-1,0,-2,38,-6,-6,6,5,-9,96,2,27,1,-2,-3,3,-15,-11,14,-7,1,6),
	    27 => w(-5,12,1,-4,-18,-5,-3,5,11,-1,-1,28,3,-33,-6,32,6,1,-17,2,-17,-7,-6,12,-1,13,2,-1,-2,5,2,12,-11,-9,-25,-1,2,1,6,-3,0,-17,2,-8,-2,-2,-6,-15,1,-5,-1,13,-2,2,0,-13,43,2,-1,-3,3,-11,-5,4),
	    28 => w(-2,-1,-32,-3,-2,-3,2,-5,-3,11,5,-22,-10,19,5,-1,-3,-3,-3,3,4,3,-3,-1,-13,2,-1,-3,-7,0,4,-1,-19,0,-2,-6,1,-8,-21,-7,-1,2,6,16,-4,3,-3,1,-6,-2,-3,6,-4,-2,4,4,5,-3,-4,-3,2,1,5,-7),
	    29 => w(-19,23,9,8,4,-3,-7,-2,-17,7,2,-1,1,-2,-9,7,-1,1,-5,2,-2,1,-2,-2,12,11,-6,-7,-14,2,-2,0,-9,-4,-23,1,11,7,6,-1,1,2,-32,-6,-2,1,-2,1,-10,-6,-6,13,-1,5,0,14,-2,0,-17,-12,0,-58,15,-9),
	    30 => w(3,1,-1,-8,-21,-5,1,-14,16,6,6,-2,5,1,11,-1,4,5,1,0,7,-2,9,9,5,-5,-1,10,-3,10,-3,-18,11,-14,2,-13,-8,-27,-3,7,2,-1,0,52,2,1,-4,5,0,-3,2,10,15,0,-18,2,-1,-1,2,3,-14,-3,17,-3),
	    31 => w(-2,0,-9,2,1,3,-2,2,27,9,2,5,-15,9,-4,6,15,-9,0,-4,0,9,3,14,5,-1,-7,1,2,-14,0,50,28,8,10,-4,-1,0,-29,5,6,-27,-4,23,5,-1,2,6,-10,9,-6,6,1,3,6,10,17,-2,-1,0,5,-5,1,3),
	    32 => w(0,0,-2,-25,8,-15,-23,-2,-3,-8,8,3,-3,1,8,0,11,15,1,-2,-2,-6,7,-2,32,-4,-14,3,7,2,6,0,-6,-1,5,-4,-6,-18,0,1,-11,-1,-23,-13,-1,-2,16,1,-1,-3,-1,7,-2,-2,-1,-5,-16,0,1,-6,0,3,4,-2),
	    33 => w(-11,5,-13,-2,0,6,14,0,-11,5,-1,-1,-8,0,3,-4,-2,-4,1,-2,0,-3,10,21,-1,15,-6,-4,18,6,-4,31,-1,11,16,0,-24,10,14,1,-3,-15,1,1,2,-6,3,-4,-15,0,3,-19,-11,-8,16,13,9,-1,-37,-2,8,-27,0,-5),
	    34 => w(13,-7,-5,1,16,-2,0,-14,37,-24,18,-2,9,4,14,0,-5,-11,1,11,-2,7,10,12,54,-4,-16,-5,1,7,7,3,3,-1,-9,-2,-15,10,-2,1,8,-6,-2,27,0,-12,0,-15,3,-15,-4,0,4,-7,-21,-4,-4,-13,1,0,-43,3,6,-4),
	    35 => w(0,-3,-2,-2,-28,1,-12,1,56,8,-3,-11,8,7,0,-6,-9,0,2,14,19,7,9,11,4,-6,-7,-1,-5,-32,0,3,-9,19,-25,-4,8,1,-32,-6,0,-3,2,25,-6,2,1,22,-6,1,-6,3,-2,9,-3,0,-23,-8,2,7,3,5,-2,6),
	    36 => w(5,-2,9,-8,-15,10,25,8,-4,22,3,-34,-5,12,10,-3,-11,-9,-4,-2,35,-2,-9,-3,-8,2,2,4,3,-8,-4,4,-10,-3,4,11,-7,7,13,6,4,1,4,-2,-4,-1,-9,17,-1,9,-9,13,7,-15,9,-13,-8,-6,-2,-1,-1,9,-5,-3),
	    37 => w(-3,-7,-7,3,-3,4,-2,1,0,10,-6,-3,-7,8,1,-12,0,5,-1,0,0,0,-7,0,-1,13,-11,12,-13,-6,4,-8,2,9,18,0,-24,-1,7,-1,5,14,7,5,0,8,5,-2,-3,0,3,-13,3,12,-4,28,7,-4,3,1,-2,-63,-1,6),
	    38 => w(0,-7,-9,-4,-29,4,6,-3,-3,5,-77,-4,4,11,10,-1,-1,-1,-2,-4,6,3,-11,-5,3,1,0,-6,-2,6,0,7,5,-11,1,-2,-10,12,-2,-13,-6,-2,2,26,1,12,-10,9,12,2,0,-14,11,5,-16,-2,-6,-6,4,5,33,-6,15,8),
	    39 => w(8,-7,-2,4,2,-3,-3,-17,22,3,-2,11,-10,-2,0,-5,7,8,13,-12,-11,24,-6,16,3,0,2,-6,1,9,1,51,3,24,35,-2,-2,4,-21,-3,46,-35,2,21,-1,-4,-5,-4,-6,-1,0,3,-2,-7,7,-10,-3,-2,-8,5,-6,-8,5,-4),
	    40 => w(-11,-1,-7,10,2,-10,21,-72,3,3,50,-10,-2,-7,-18,-1,0,-18,13,57,-2,1,-4,0,-16,-6,-5,8,23,-5,13,-15,0,-7,0,-3,-2,4,-18,35,-2,-16,-15,-47,0,1,-13,-15,-5,0,-2,-9,2,-3,-12,-6,-13,-7,2,15,0,0,8,-1),
	    41 => w(0,-8,-9,12,-18,15,-7,6,-1,-4,15,7,-28,-2,-1,2,4,10,-27,-12,13,-1,-28,8,2,-3,0,8,-7,-5,-14,-8,-6,6,-28,6,7,-27,-11,-6,-22,-5,5,9,-2,3,-13,23,3,39,12,-73,5,11,8,7,-2,20,-8,-14,8,-11,2,-22),
	    42 => w(-3,-2,16,0,-7,-11,-1,1,-8,-17,6,-5,-5,2,-39,7,-2,-3,11,-6,-11,-4,-2,2,-31,-13,5,-19,-13,1,6,-1,5,-10,-3,-10,-2,-14,3,-43,4,-5,-4,2,-6,-5,6,42,8,10,0,-7,18,-12,1,4,3,-6,4,8,5,6,-15,2),
	    43 => w(-9,18,-7,9,4,-15,-18,7,7,-7,14,-5,-9,-7,5,-5,0,-11,-33,9,-13,5,7,-8,-1,1,-7,23,-5,7,-4,-9,-40,-9,6,-12,-4,-19,-26,-7,-14,-36,6,9,6,-2,-7,2,-8,2,5,3,-2,6,12,-2,-6,-1,-1,-12,-3,-4,-9,-4),
	    44 => w(0,0,4,-18,-13,-12,-16,-11,0,-20,25,4,1,0,15,3,-19,-9,11,6,-7,6,5,-1,-29,0,-9,11,-6,-4,1,1,5,-24,2,-3,5,9,-5,-6,13,2,-9,1,-1,-1,-12,15,0,25,0,0,-9,35,8,5,-9,7,-2,1,-4,-2,-2,-5),
	    45 => w(-4,2,-3,-5,4,1,-4,7,-2,2,6,4,8,-1,-6,0,-1,-1,6,-2,4,-13,16,14,2,-2,13,-6,-28,-9,-1,-1,-8,15,-1,0,-33,-22,6,0,-14,-2,-11,-7,-2,14,-1,-7,-3,12,3,0,-5,-1,4,-12,-2,3,4,-1,8,39,8,-3),
	    46 => w(-4,-3,-7,-2,5,4,-3,-7,-23,-3,-2,13,0,5,15,-3,-1,-7,6,3,-7,-6,-18,-3,6,-1,-5,-1,-1,5,4,-6,-12,-4,-3,-2,7,-5,0,6,17,0,-1,-2,-1,-57,8,-5,-4,4,-2,28,-2,10,-20,5,-6,-4,13,4,7,-6,-3,-3),
	    47 => w(4,29,0,1,-21,10,0,4,3,1,0,43,7,7,4,-24,6,4,-8,0,-5,-8,-9,-2,0,4,-8,-1,2,4,-1,11,-17,-6,-9,-1,2,7,2,1,-2,-22,-3,-4,-5,-6,-3,-3,-9,-7,-1,-9,-4,-5,-9,-16,-2,-1,-7,1,4,11,9,-2),
	    48 => w(-4,-4,12,0,0,1,-7,-1,-2,-7,5,-47,-1,-12,3,0,2,8,0,2,24,1,2,-2,-8,-4,1,-3,7,12,-2,-1,-22,2,-5,-17,0,-2,-10,-5,0,-1,-2,5,-2,1,0,-8,5,0,-19,1,-8,-2,0,2,2,0,3,0,0,-5,0,14),
	    49 => w(9,-60,13,-2,19,-13,-3,-1,55,2,4,16,6,-12,2,0,-1,-6,-1,0,3,5,5,-2,8,-10,-1,0,-1,0,4,-3,-2,-4,-15,4,-10,5,-5,3,0,34,3,1,26,0,-11,-1,7,-1,1,7,4,22,0,3,-15,1,-11,14,4,-9,3,-1),
	    50 => w(0,-16,0,0,6,0,0,10,-4,-2,1,0,1,0,14,9,1,1,-2,-8,-4,1,-8,2,-3,5,-2,10,1,-18,0,12,-3,-1,-2,20,8,20,-2,4,-4,16,2,8,3,-2,1,5,26,1,1,-14,-16,5,-1,-2,10,1,0,0,-2,4,-3,-1),
	    51 => w(6,-3,0,0,11,-3,-12,2,-12,-13,-12,-2,12,3,1,-1,-6,-4,-8,5,4,2,2,-10,-1,1,9,-1,-1,14,1,-9,-13,1,0,6,0,0,-1,0,21,-6,2,5,1,-1,-1,-3,8,-7,32,-1,-2,-26,3,6,-1,2,0,-2,-2,7,1,-5),
	    52 => w(0,0,5,-8,7,-19,-9,-8,2,8,-12,9,-1,2,-2,1,9,-12,7,-2,8,6,1,22,0,1,-12,13,-3,-3,9,0,3,-9,1,-6,-1,7,-5,-2,5,3,2,10,-3,-14,6,17,1,4,0,-1,3,-4,-2,3,-1,-5,1,0,-2,0,0,0),
	    53 => w(1,3,-4,-7,-2,3,-7,-2,1,4,6,3,28,-3,-13,-1,15,4,-1,0,9,-11,28,-4,0,2,2,12,3,-1,2,-3,-3,2,16,-3,-16,-15,3,1,8,2,-5,-2,1,3,1,-1,-3,-8,-5,5,-17,23,-4,4,0,-4,-11,-2,14,14,-2,0),
	    54 => w(5,-2,-3,-4,13,0,2,-4,90,1,-1,-4,0,-2,9,1,-1,3,-16,-2,-1,3,11,4,0,-3,-5,-1,-1,-4,-14,-4,-5,4,-2,2,0,1,-1,-7,2,1,-1,-1,-2,13,8,-1,-9,-4,6,-4,-3,6,-11,0,9,1,8,5,-1,-4,-10,40),
	    55 => w(2,-5,2,-1,2,-2,-3,5,11,1,-3,5,7,0,-1,-7,-2,-5,-10,2,0,-4,5,-18,1,-7,-3,-2,-1,-1,0,4,0,3,-5,0,-8,-1,-6,0,-1,-4,1,-4,23,-1,3,0,1,2,0,8,0,3,-3,1,6,1,7,0,1,2,16,2),
	    56 => w(10,9,-26,4,1,-1,-3,-5,3,4,4,16,15,2,3,-4,2,6,0,-4,-1,1,1,0,-4,2,-2,3,7,-4,-3,0,11,1,13,-6,1,1,-11,0,0,0,-2,0,1,0,2,-11,-4,1,8,0,2,-3,3,-5,-1,-8,-1,1,1,-1,3,-14),
	    57 => w(-4,17,3,2,-11,8,-1,1,-6,0,1,-11,-7,5,1,-18,1,0,3,0,1,-2,4,-3,-13,-1,5,2,0,3,-3,-4,0,8,10,1,-20,-6,35,3,-3,11,-5,1,-11,1,36,3,-4,1,1,-5,-5,3,1,14,-1,0,-7,-10,2,-17,2,-5),
	    58 => w(-1,-5,1,0,23,0,4,-3,3,1,7,0,0,3,-3,-5,-2,-1,-1,-5,3,-3,4,3,4,-2,-1,-11,-1,5,3,11,57,10,1,-16,2,-17,3,-6,2,-14,-7,4,5,2,-2,-5,4,0,1,11,6,-5,-11,-10,0,-2,1,-5,0,-2,-16,-1),
	    59 => w(-2,-1,4,5,14,-3,10,-6,6,2,8,-2,-5,-4,-1,3,1,-2,1,-1,-4,6,1,-2,1,1,-3,-2,1,-1,-1,5,3,2,-3,8,-1,-3,3,4,12,12,1,-3,3,-2,-1,6,-7,0,-73,2,-2,-12,-5,0,-4,-6,2,-2,-5,-5,3,6),
	    60 => w(-2,-1,2,-28,-15,-13,-6,8,11,0,4,10,-2,8,13,-2,-3,18,2,-4,-1,0,6,8,-15,18,-3,-8,-6,-8,-2,-5,-3,-20,2,-8,-3,10,-10,-1,10,2,15,-7,2,-2,-9,12,-12,7,0,-23,3,-3,13,12,-6,-15,-7,25,1,3,6,-7),
	    61 => w(-6,-8,-24,-26,-6,15,16,2,3,-1,0,-2,-15,-1,-4,4,6,1,28,-1,-1,-28,5,-7,-1,-2,1,-9,-2,32,-2,-45,6,-4,38,3,13,13,-1,-3,-3,-13,22,-7,3,5,-1,-1,2,-4,-5,3,-15,-4,1,1,-1,-7,19,-2,-3,30,7,-18),
	    62 => w(-1,1,-8,-7,-25,1,1,-4,4,-52,-4,-6,-1,-6,16,0,-2,3,0,11,3,-1,-1,5,-26,0,0,-2,1,15,-5,-5,11,0,12,-7,-1,5,-4,11,1,1,-2,-47,3,-3,14,8,-10,-6,3,14,13,1,24,0,17,-13,17,6,2,-18,-3,-24),
	    63 => w(-2,18,4,2,21,6,2,-4,-9,11,0,24,2,3,2,2,7,-8,3,18,-2,-15,2,-17,5,-3,-6,-4,-1,-21,-6,-25,0,-6,-2,-2,0,1,27,-2,-5,5,-3,-17,13,-2,3,-8,-2,-23,-12,7,10,-11,-7,10,-10,0,9,1,-5,-7,21,3)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;