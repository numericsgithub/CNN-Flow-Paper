library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.numeric_std.all;

LIBRARY work;
USE work.ALL;
USE work.Components.ALL;

entity conv11_core6_rmcm_weightsconstant_memoryROM is
    generic
    (
        XI_WIDTH        	          : natural := 8;
        ARRAY_SIZE                    : natural := 64;
        WORDS_PER_ADDR                : natural := 64
    );
    Port (
        clk        : in std_logic;
        data_index : in unsigned(bits(ARRAY_SIZE-1)-1 downto 0);
        dout       : out std_logic_vector((XI_WIDTH * WORDS_PER_ADDR-1) downto 0)
    );
end conv11_core6_rmcm_weightsconstant_memoryROM;

architecture Behavioral of conv11_core6_rmcm_weightsconstant_memoryROM is
    type ROM_TYPE is array(0 to ARRAY_SIZE-1) of std_logic_vector((XI_WIDTH * WORDS_PER_ADDR)-1 downto 0);

    -- Function to concatenate signed integer values into a single std_logic_vector
    function w(w0, w1, w2, w3, w4, w5, w6, w7, w8, w9, w10, w11, w12, w13, w14, w15, w16, w17, w18, w19, w20, w21, w22, w23, w24, w25, w26, w27, w28, w29, w30, w31, w32, w33, w34, w35, w36, w37, w38, w39, w40, w41, w42, w43, w44, w45, w46, w47, w48, w49, w50, w51, w52, w53, w54, w55, w56, w57, w58, w59, w60, w61, w62, w63: integer) return std_logic_vector is
    begin
        return std_logic_vector(to_signed(w0, XI_WIDTH)) & std_logic_vector(to_signed(w1, XI_WIDTH)) & std_logic_vector(to_signed(w2, XI_WIDTH)) & std_logic_vector(to_signed(w3, XI_WIDTH)) & std_logic_vector(to_signed(w4, XI_WIDTH)) & std_logic_vector(to_signed(w5, XI_WIDTH)) & std_logic_vector(to_signed(w6, XI_WIDTH)) & std_logic_vector(to_signed(w7, XI_WIDTH)) & std_logic_vector(to_signed(w8, XI_WIDTH)) & std_logic_vector(to_signed(w9, XI_WIDTH)) & std_logic_vector(to_signed(w10, XI_WIDTH)) & std_logic_vector(to_signed(w11, XI_WIDTH)) & std_logic_vector(to_signed(w12, XI_WIDTH)) & std_logic_vector(to_signed(w13, XI_WIDTH)) & std_logic_vector(to_signed(w14, XI_WIDTH)) & std_logic_vector(to_signed(w15, XI_WIDTH)) & std_logic_vector(to_signed(w16, XI_WIDTH)) & std_logic_vector(to_signed(w17, XI_WIDTH)) & std_logic_vector(to_signed(w18, XI_WIDTH)) & std_logic_vector(to_signed(w19, XI_WIDTH)) & std_logic_vector(to_signed(w20, XI_WIDTH)) & std_logic_vector(to_signed(w21, XI_WIDTH)) & std_logic_vector(to_signed(w22, XI_WIDTH)) & std_logic_vector(to_signed(w23, XI_WIDTH)) & std_logic_vector(to_signed(w24, XI_WIDTH)) & std_logic_vector(to_signed(w25, XI_WIDTH)) & std_logic_vector(to_signed(w26, XI_WIDTH)) & std_logic_vector(to_signed(w27, XI_WIDTH)) & std_logic_vector(to_signed(w28, XI_WIDTH)) & std_logic_vector(to_signed(w29, XI_WIDTH)) & std_logic_vector(to_signed(w30, XI_WIDTH)) & std_logic_vector(to_signed(w31, XI_WIDTH)) & std_logic_vector(to_signed(w32, XI_WIDTH)) & std_logic_vector(to_signed(w33, XI_WIDTH)) & std_logic_vector(to_signed(w34, XI_WIDTH)) & std_logic_vector(to_signed(w35, XI_WIDTH)) & std_logic_vector(to_signed(w36, XI_WIDTH)) & std_logic_vector(to_signed(w37, XI_WIDTH)) & std_logic_vector(to_signed(w38, XI_WIDTH)) & std_logic_vector(to_signed(w39, XI_WIDTH)) & std_logic_vector(to_signed(w40, XI_WIDTH)) & std_logic_vector(to_signed(w41, XI_WIDTH)) & std_logic_vector(to_signed(w42, XI_WIDTH)) & std_logic_vector(to_signed(w43, XI_WIDTH)) & std_logic_vector(to_signed(w44, XI_WIDTH)) & std_logic_vector(to_signed(w45, XI_WIDTH)) & std_logic_vector(to_signed(w46, XI_WIDTH)) & std_logic_vector(to_signed(w47, XI_WIDTH)) & std_logic_vector(to_signed(w48, XI_WIDTH)) & std_logic_vector(to_signed(w49, XI_WIDTH)) & std_logic_vector(to_signed(w50, XI_WIDTH)) & std_logic_vector(to_signed(w51, XI_WIDTH)) & std_logic_vector(to_signed(w52, XI_WIDTH)) & std_logic_vector(to_signed(w53, XI_WIDTH)) & std_logic_vector(to_signed(w54, XI_WIDTH)) & std_logic_vector(to_signed(w55, XI_WIDTH)) & std_logic_vector(to_signed(w56, XI_WIDTH)) & std_logic_vector(to_signed(w57, XI_WIDTH)) & std_logic_vector(to_signed(w58, XI_WIDTH)) & std_logic_vector(to_signed(w59, XI_WIDTH)) & std_logic_vector(to_signed(w60, XI_WIDTH)) & std_logic_vector(to_signed(w61, XI_WIDTH)) & std_logic_vector(to_signed(w62, XI_WIDTH)) & std_logic_vector(to_signed(w63, XI_WIDTH));
    end function;

	constant data_ROM : ROM_TYPE := (
    
	    0 => w(-3,-4,11,-6,0,-2,0,1,-1,2,-3,-7,-1,-1,3,-8,10,4,6,-9,-3,-11,-1,-7,3,-4,2,4,-2,-11,-7,1,0,3,0,-6,-3,6,-16,34,1,17,3,0,-4,-1,5,-2,-7,3,2,3,2,0,6,1,9,6,0,3,8,1,4,4),
	    1 => w(-5,-1,3,-1,-3,3,-9,18,13,-32,-3,2,4,11,5,-13,16,9,5,3,3,-9,0,4,3,-7,-18,4,-5,-2,3,-10,-1,3,-1,3,-3,7,6,12,0,2,-2,-1,-1,-3,-4,0,-5,-7,-7,3,2,-2,-5,1,5,-3,-11,2,2,3,-10,11),
	    2 => w(-13,0,4,3,0,-5,-2,-3,-10,-3,3,6,-1,2,1,5,11,14,-2,7,-3,-10,3,11,2,-1,3,5,-4,12,-9,3,3,-30,-4,0,0,-1,-1,3,1,-2,1,-2,-7,-8,0,-3,2,-8,5,-2,-1,1,0,-2,5,-4,2,4,3,4,-3,2),
	    3 => w(-5,-2,3,3,4,19,18,1,-2,-10,-2,-10,-3,-9,2,-3,-8,-4,11,7,2,3,-2,5,3,-3,-1,1,1,2,-2,11,-3,-11,-6,5,3,-2,0,4,0,18,9,-8,1,-8,-4,-21,1,5,2,-2,2,-5,-3,5,-1,1,8,2,1,4,2,-6),
	    4 => w(-16,-15,0,6,-5,-1,-1,11,1,-12,0,7,1,-2,0,-8,9,6,-5,-3,6,-5,8,25,2,-14,2,4,18,10,-11,5,2,-4,-11,-14,7,9,11,0,3,-3,3,2,5,-3,-3,-1,-11,-9,-6,6,-6,1,6,19,28,0,2,-3,-11,3,21,-1),
	    5 => w(10,2,-1,1,-21,-2,-2,-7,-2,7,-17,4,1,0,-1,3,-1,-10,0,-2,-2,5,-6,-10,1,7,9,1,3,-3,2,-20,-4,1,1,-24,-1,-5,14,7,3,10,-13,2,2,-1,12,2,-2,12,-24,-16,3,-1,-2,0,-16,-5,11,-31,15,-28,-14,-7),
	    6 => w(3,1,12,39,-1,-14,13,2,-11,-6,5,14,-1,-31,6,-2,11,9,-4,-6,-2,-16,-3,1,-3,-11,-1,20,11,31,7,0,6,2,-19,-1,6,0,-1,4,-18,-13,1,-9,4,9,8,-11,7,1,6,-3,0,-3,3,6,7,5,-1,1,-10,5,-23,-2),
	    7 => w(2,-17,-11,3,1,7,-5,11,-1,-3,0,3,-4,-11,-8,-1,7,44,-14,-17,4,0,1,-4,-23,1,0,22,-3,-5,3,-3,12,-6,2,0,-2,-8,-4,-6,0,9,-6,1,0,0,1,0,1,1,-6,-6,-25,32,5,19,1,-6,8,1,0,-1,-18,-9),
	    8 => w(-5,-3,9,1,5,-2,1,-3,-2,-1,-2,-9,-2,-7,1,-2,14,1,-4,5,0,4,1,-2,3,21,-6,1,1,5,10,6,4,1,-6,2,2,7,9,5,-1,-3,2,-11,6,3,-2,-1,6,-2,-1,8,-4,-2,-3,-1,-2,-19,3,-4,3,-4,0,-9),
	    9 => w(4,4,3,-11,-1,-14,-13,2,20,10,-4,-2,0,5,-1,7,5,1,-3,-4,4,3,-1,-2,5,-2,-12,10,9,9,-8,-4,-4,6,-1,1,-9,4,-31,0,-8,-4,-3,0,-1,-7,2,2,-7,7,-9,1,-21,-2,-1,6,4,4,11,6,-10,-3,-3,-2),
	    10 => w(-2,1,0,2,-1,-10,-6,3,-18,1,3,-3,7,-10,8,-2,24,7,3,14,-8,-2,1,0,-2,-3,-2,0,-2,4,4,1,-8,27,-12,-12,0,1,-1,-2,-10,-10,2,0,5,4,1,1,-2,-3,-1,3,-3,-3,3,-5,-3,7,-6,0,13,5,-40,-5),
	    11 => w(-23,-7,7,2,-3,-15,5,9,-1,4,4,0,-2,-8,-3,-3,13,-12,11,-7,6,1,3,-12,2,-6,1,-1,0,-6,0,-7,-4,-16,-3,-7,-3,-5,9,-4,-2,25,-9,-1,0,-9,-2,-10,1,8,-6,0,-3,2,2,3,-1,-8,8,7,2,-2,-5,-1),
	    12 => w(-46,-1,-5,-3,-2,1,3,-1,3,-6,-3,-4,3,1,0,6,-2,-1,-3,1,-5,-15,-11,-4,-7,0,-8,5,-2,-5,-4,8,1,-5,4,-1,-25,7,-8,4,-6,4,-12,-4,-2,54,-2,-1,-2,12,-4,-3,-4,-4,-6,-1,-5,-66,-2,11,-1,2,-7,-8),
	    13 => w(-10,9,-1,5,9,6,2,18,-19,6,5,-2,3,0,5,-5,3,-16,-1,-9,4,2,0,1,1,0,5,-6,-3,14,-5,-16,-2,-10,3,-9,-9,2,4,5,4,-3,62,-10,-8,-2,1,0,1,0,8,4,26,-3,-2,3,-13,-13,19,-8,-11,8,-6,4),
	    14 => w(3,-2,3,0,3,-10,1,-4,47,4,-8,2,-5,17,10,-6,-2,-11,-5,4,-24,10,-1,1,3,5,-2,-25,-14,30,-6,-1,5,-5,1,-12,-8,-10,-5,-14,0,6,-6,7,-8,29,-1,-34,-6,-5,6,1,-4,-2,1,-10,-2,14,-4,-4,-25,8,6,12),
	    15 => w(7,11,-1,-7,-2,-4,8,1,-1,3,-11,-4,-5,-19,8,-1,-20,6,19,5,-4,-1,0,-4,-20,3,4,4,-1,-5,-10,-15,-13,-7,-29,11,2,11,-12,0,-13,-2,-21,-1,6,-4,-2,2,-5,-2,-1,2,-2,-10,-6,4,-3,2,-3,-22,-4,-20,-2,-7),
	    16 => w(-6,-2,-2,-2,-7,-1,-3,-4,-6,-12,-3,9,4,5,-5,3,-3,-4,-1,-15,2,2,0,1,1,-1,-5,3,2,-10,-6,2,-2,-9,-5,-7,13,-23,-7,2,-1,-14,-6,-1,-23,-9,-13,-3,-13,-9,-4,8,3,-3,-9,12,3,3,-7,-7,0,-4,-2,0),
	    17 => w(15,3,-6,-18,-8,1,-5,5,12,7,-23,-10,-13,10,-7,20,-4,-8,9,11,-1,-17,-4,-3,6,0,-5,-7,6,-16,7,-7,-3,-17,4,-19,-10,0,1,6,-2,15,-2,-1,4,2,-17,5,3,8,-26,-14,-2,-11,-1,1,0,21,-17,-8,-16,13,-14,-5),
	    18 => w(8,-1,11,9,-35,-11,4,29,-27,15,-7,3,-12,-42,-3,1,-8,5,0,-10,-13,-20,-1,5,3,-13,-14,0,-6,15,5,0,-13,-2,-5,-9,-5,-1,3,-1,-9,-23,-5,1,4,-8,-6,-2,-11,-3,-6,0,-9,2,-4,3,-13,6,-1,-7,-15,3,-12,-5),
	    19 => w(-7,-7,-3,0,3,2,-3,-5,3,6,1,-1,1,7,7,3,-5,6,-2,-2,-4,-4,-6,-9,9,-2,-11,11,-2,-6,-5,-8,-2,-5,-9,4,1,-4,1,-2,-5,-1,6,-1,-2,3,-3,-10,4,17,4,-9,-19,-2,5,10,7,-1,3,-24,-5,12,-19,-12),
	    20 => w(-3,-6,0,2,4,1,-5,4,-4,1,-10,5,2,-4,-1,1,8,2,-10,19,-4,12,2,-4,-5,4,-3,3,-1,15,7,-2,-3,1,-14,11,3,-6,7,17,-1,3,1,1,-7,-1,-11,-2,0,-2,0,-15,-1,-2,0,-4,5,-5,2,-13,-3,-3,18,30),
	    21 => w(-9,-21,6,-15,-3,-6,-3,-34,-6,-21,-13,1,-6,4,2,6,-7,14,-2,4,4,-1,1,-3,-1,7,25,-2,4,-4,11,4,0,10,0,-9,-3,-5,1,-1,-11,-6,3,2,6,0,-6,1,0,10,-7,5,-5,-4,-2,0,-2,-14,1,-3,-2,-11,-1,-3),
	    22 => w(-6,0,2,-3,-1,-9,-13,-14,-1,0,3,0,12,-10,-6,-1,1,12,5,-16,12,1,0,-3,0,-4,-1,-7,-3,4,2,-2,5,25,-1,-12,-1,-2,3,-2,-7,-17,-8,-2,-4,5,1,-5,9,-4,2,2,-4,-2,5,-1,-5,5,-4,0,21,-5,23,0),
	    23 => w(-29,-15,-1,3,5,-3,0,-8,-1,-5,5,3,-1,-3,2,-3,6,-14,-4,-1,13,7,4,8,11,-2,2,-3,1,6,-3,-5,2,7,-4,4,-1,-8,-2,9,-4,-17,-3,-5,0,0,2,3,0,7,-3,-6,-3,-8,-2,-25,7,-8,-1,5,-14,-1,-7,-10),
	    24 => w(-17,-7,1,-17,-10,3,1,-7,9,7,8,-10,2,-3,1,7,-20,6,-3,-10,0,-1,-2,-5,-4,-8,-7,-9,2,-8,-10,-8,8,-6,-1,-19,9,5,0,-15,0,-6,10,6,-1,-9,-9,10,6,8,0,3,-7,6,8,12,4,18,1,-1,-15,6,-13,0),
	    25 => w(0,2,1,12,-4,1,-14,-20,-11,-2,29,7,-4,2,-2,-9,-5,2,0,-11,-5,5,1,-5,1,-8,5,2,-4,6,-1,-40,1,-8,-6,-26,-15,-18,-1,-18,-4,-4,-9,9,-8,-2,2,5,-2,4,-4,-4,-2,5,4,1,19,-1,17,-32,9,-17,6,-10),
	    26 => w(1,2,-1,14,-19,-1,6,11,1,-9,-21,0,-21,-10,4,-1,6,-13,2,-5,-21,12,1,0,-5,-12,3,-5,-3,0,17,-2,-17,-4,5,-18,-2,-4,-3,6,-9,15,1,-14,-2,14,-12,-7,-12,16,-15,20,-10,1,4,-10,8,-2,10,-10,-4,6,-11,0),
	    27 => w(-3,-9,-6,1,4,-5,7,-5,1,15,4,1,0,6,16,-4,-10,-3,-6,3,12,-3,4,-7,-11,6,-5,-11,-1,-4,6,-24,3,-9,7,14,7,3,1,1,-4,-6,-2,1,3,-16,-7,-10,-3,35,-3,8,17,-10,-6,-36,5,3,-5,-6,2,-3,2,-7),
	    28 => w(3,-1,-9,-7,5,1,-8,0,2,3,32,17,0,-3,2,-6,29,-2,2,9,2,2,-3,8,-1,2,-7,4,3,-15,16,-3,-5,0,-11,1,5,2,-3,2,-2,9,8,4,-4,18,-2,12,-1,-4,-4,1,7,-1,-7,5,2,-13,4,-6,6,2,6,14),
	    29 => w(7,6,-2,8,0,1,5,12,6,8,-23,-4,11,-1,4,-3,19,5,-17,-2,-3,6,0,4,1,7,8,-4,3,1,-4,-19,-1,5,0,-5,4,11,4,-3,-3,7,0,0,4,-1,6,-2,1,-1,-2,0,-2,-3,-3,-5,1,-7,-6,-2,-6,-9,-9,-4),
	    30 => w(-9,0,7,14,2,-9,-7,1,-6,2,18,-1,7,-12,-1,-1,4,-4,-3,-2,1,-4,1,-2,-1,-4,10,9,1,3,-7,0,5,9,8,28,2,-3,-2,-3,-8,0,-5,-3,10,6,-5,-1,41,3,5,-7,5,-2,-2,-5,3,0,-6,-1,-6,1,-5,-5),
	    31 => w(-27,-3,-8,-9,6,1,-4,-2,1,-2,-7,-2,-3,-4,-3,-2,2,2,4,1,-36,3,1,-4,2,2,2,-2,1,-1,-20,-12,6,-19,1,1,-6,4,0,-2,8,7,-9,-3,1,-5,-2,11,-5,-4,-4,-4,-16,0,-2,-6,12,-7,7,6,-18,0,1,-10),
	    32 => w(-2,3,19,-6,5,-1,4,0,4,0,-2,3,-2,4,2,-6,5,-1,-6,11,0,1,-1,4,0,3,-3,12,-5,6,-1,30,-3,-4,-6,2,5,-10,12,23,0,-10,2,11,-4,-1,-10,-15,1,-3,-1,6,10,-2,0,4,5,17,-3,-1,2,7,-13,4),
	    33 => w(-8,-6,4,-41,-2,-2,8,-13,18,1,-16,-2,4,17,3,-20,-15,-3,2,10,1,1,2,4,0,-1,1,-3,-17,2,-10,-1,3,-2,-1,-1,2,-2,-3,-1,-7,0,-10,-2,-2,8,-4,2,3,-4,-1,1,6,-6,-5,-4,4,0,-4,-5,3,-10,-17,5),
	    34 => w(-14,0,-2,-2,2,7,6,3,-6,-2,-1,-9,36,5,-2,6,19,27,2,-5,1,-5,-2,4,-2,-3,1,4,0,1,-13,2,-1,18,-6,-7,5,0,1,-2,29,1,0,8,6,-1,-5,11,-1,-4,-2,-7,1,2,7,3,-4,-21,5,-3,-2,8,-1,5),
	    35 => w(11,2,-6,-4,-3,1,6,-1,1,-16,-6,8,-1,7,-1,9,5,-4,-3,1,2,-4,2,4,6,3,2,-2,-5,-1,-3,13,-6,0,0,-6,-2,14,-13,4,12,5,5,10,-4,-2,-8,19,-1,-7,-5,1,11,1,-7,-9,-18,-3,1,-6,-9,-2,9,-9),
	    36 => w(5,-7,8,14,4,-1,6,-2,3,0,4,2,4,6,2,-2,0,2,1,-5,-7,-5,1,7,2,16,-7,-5,11,-6,-1,8,-3,7,-6,-7,0,-1,10,11,-10,-1,2,-8,-7,8,-2,-3,15,-3,4,-10,-3,3,4,-2,-25,11,5,1,0,-8,10,5),
	    37 => w(-2,-6,3,-3,27,16,10,27,-6,-10,6,6,-1,-4,4,8,-2,7,-5,-2,5,-5,4,2,0,9,-4,-2,-4,17,2,-2,-3,5,-2,-3,1,-5,17,-1,-4,9,-11,2,0,-1,4,0,-1,7,3,0,47,2,2,-1,1,-6,1,-7,-3,-17,-6,3),
	    38 => w(1,-1,-21,-13,-5,-11,2,-5,0,5,1,5,4,9,-4,3,4,-6,-15,2,-2,-1,10,3,8,1,1,1,3,4,9,0,3,5,9,-8,12,1,5,8,-6,-4,-7,-3,-19,-4,7,25,9,-8,-1,1,4,-1,5,7,2,3,11,4,-11,-8,-7,0),
	    39 => w(6,-5,-12,-7,-4,9,11,-12,-2,0,6,-2,-1,-11,-17,1,-11,-5,-25,-4,-11,2,-1,6,-15,1,3,-3,3,3,11,-12,25,-8,-8,12,8,12,-13,3,-3,11,17,3,1,-2,7,1,3,-10,1,-2,4,18,7,-7,3,1,-13,9,-7,3,-7,11),
	    40 => w(-5,-4,2,24,-23,2,8,-3,0,14,11,-1,-7,1,0,3,7,-3,0,-7,-3,0,2,-3,0,-7,9,5,-3,1,3,2,2,5,-9,-6,-6,-6,0,0,-3,10,-15,-2,-5,1,11,-1,3,-2,7,-3,9,11,-5,1,4,0,-12,-8,-4,-7,-4,-3),
	    41 => w(9,3,0,1,-2,1,-3,1,-1,-5,6,-17,-5,2,-8,-17,1,0,15,8,5,18,9,7,-1,-34,-9,4,3,-6,-2,2,0,3,9,1,18,3,-4,-12,7,1,-1,0,11,4,-10,-1,2,9,1,1,-3,8,-5,0,-11,-3,5,2,0,4,0,10),
	    42 => w(-4,-6,-1,-1,9,-5,-4,-7,-5,18,-2,-2,6,9,0,-5,-1,0,-2,-6,-1,2,-9,-7,1,1,-19,-4,-1,-14,-5,-2,2,-9,4,5,-1,0,0,-18,-1,-3,-20,-2,0,-9,23,3,3,3,8,3,-5,-7,9,-13,9,-2,1,-6,-2,3,-5,-2),
	    43 => w(-1,3,-2,-8,-3,0,-6,-4,-11,-1,13,14,5,0,0,1,-7,-4,-10,6,3,0,12,-1,-1,-11,-1,4,3,7,1,13,-2,3,7,-2,6,14,1,0,-4,1,-12,0,4,0,-2,2,-6,5,-9,12,-6,3,7,1,2,7,-8,3,3,5,3,2),
	    44 => w(9,12,9,16,-1,-2,5,5,-4,-2,-11,4,3,3,2,0,2,2,-1,2,-3,6,-1,2,0,1,-6,-8,2,-6,0,-2,-4,8,4,-3,-12,-1,-2,1,-4,-1,-2,-6,-6,14,5,9,0,-3,1,-15,1,1,4,-14,-13,-38,1,15,-2,-12,6,-1),
	    45 => w(-9,-5,1,1,16,-16,5,-24,-8,14,6,5,-1,4,5,13,-8,-5,-1,-8,9,5,4,4,-6,8,8,-5,3,14,-1,20,-7,9,4,10,-1,5,-19,-1,8,5,35,-2,1,-5,1,3,0,12,4,0,-32,5,0,6,-12,-3,-8,10,-11,-6,-1,-2),
	    46 => w(-4,-1,-10,-7,-4,-1,1,-10,-5,10,0,-10,2,15,6,1,9,-12,5,12,3,11,3,0,3,-8,-2,12,-1,2,3,-1,2,5,9,-19,7,0,3,10,1,-2,-9,-3,8,-11,2,-21,3,-5,-3,0,1,3,1,2,-9,8,4,3,13,17,1,2),
	    47 => w(-3,3,-5,-4,-5,-8,0,-3,0,8,12,0,-2,-4,-20,7,-9,12,-16,-3,-6,-5,-1,5,-16,-3,8,-1,1,3,3,2,1,19,-9,0,4,19,-13,3,-11,-6,5,2,3,0,3,-20,0,-6,6,-8,-2,14,3,4,-11,6,8,7,-2,0,-13,4),
	    48 => w(16,7,0,4,0,-2,2,7,1,-9,-7,0,2,-3,2,-6,4,-4,2,4,0,2,2,-3,2,1,-8,-1,5,-10,-4,-15,-5,1,-8,-2,8,-2,4,1,2,-10,2,-3,-1,16,6,12,5,-1,-1,-3,1,-1,-3,1,8,4,2,-3,0,-9,-2,0),
	    49 => w(6,0,5,-10,-14,-3,5,1,2,-4,0,-1,0,-9,3,-3,0,-1,-7,-1,8,-4,-5,9,1,0,-9,0,10,-2,7,8,-4,0,2,4,1,-1,-1,-9,-5,8,0,-3,-1,-1,3,-2,2,1,5,9,-4,-3,-2,-1,7,-8,-2,0,3,-8,-21,2),
	    50 => w(0,0,9,-8,2,0,8,3,10,4,0,1,-2,-23,-3,0,-3,-5,-3,11,7,-13,2,-2,-2,6,1,10,-6,7,11,1,0,-8,-15,-10,-2,2,2,1,-8,6,-7,1,-2,-9,-4,3,1,-7,1,-5,0,5,-5,-1,6,-19,-3,3,8,-6,0,6),
	    51 => w(12,-8,4,-1,-2,-4,14,5,5,0,-3,-8,-4,-2,-6,6,0,-3,4,-4,-3,23,-2,0,-7,-5,0,-1,1,-1,-7,-8,4,7,12,-9,4,19,-4,3,6,0,1,5,-4,6,-4,3,1,0,4,1,7,-2,6,-3,-6,-6,-27,7,-1,5,-6,-2),
	    52 => w(10,7,4,-9,-33,9,-3,7,2,-12,9,17,4,0,9,1,1,2,-3,9,0,1,13,6,-1,4,4,0,3,19,2,0,-1,11,-3,3,13,-3,3,2,5,6,11,5,4,1,-17,10,1,1,-5,9,-2,0,-1,1,4,0,1,-2,0,1,0,8),
	    53 => w(-3,-7,8,-5,-7,-1,11,5,13,4,5,1,-11,5,1,15,-2,8,-9,-12,9,-9,2,-11,4,8,3,-7,-6,2,3,7,-7,10,2,4,-7,-16,5,-7,-1,6,0,2,10,3,1,5,2,3,12,1,7,13,6,-1,6,3,2,21,-9,2,1,-9),
	    54 => w(0,-1,8,0,14,6,3,9,0,8,9,1,14,5,-3,0,1,8,2,19,16,-2,2,21,-9,1,9,1,0,7,9,2,6,7,6,3,4,-3,0,8,-3,3,6,-10,4,5,-9,2,22,-8,4,-1,3,3,-2,4,-11,4,7,16,3,-2,7,0),
	    55 => w(-7,-6,8,-11,-4,0,0,0,1,-2,19,17,0,-5,5,2,13,1,1,8,-21,3,-10,-5,9,2,0,0,-2,-5,52,-10,2,2,-3,-6,-6,2,2,4,-2,9,4,-4,0,6,-2,-2,7,14,2,6,-3,1,-2,5,2,-2,3,1,15,0,-4,13),
	    56 => w(8,-2,-3,-2,-1,-1,-1,2,3,-2,-4,0,1,-1,1,-3,-4,4,3,-10,-2,9,5,6,-1,-7,-4,-1,2,-2,-8,2,0,6,-5,17,7,-5,10,2,-3,-5,-12,0,-7,14,6,-14,9,-1,1,-5,-3,1,-2,17,2,17,-2,2,-2,-2,27,-6),
	    57 => w(1,-7,1,-7,0,1,-4,-1,-14,-12,6,-3,0,2,-5,-5,1,1,0,5,1,-1,-5,3,0,-12,5,-7,-2,-7,-10,-7,9,-7,-1,-10,0,9,9,2,3,-1,-41,-2,-4,-3,-4,0,-2,3,-13,-3,2,-2,2,-4,-11,-8,27,-22,28,-26,5,-1),
	    58 => w(-2,3,1,22,-10,4,6,18,-3,7,3,7,-6,-20,-9,1,-5,-10,-2,-8,1,-1,0,-3,-1,-1,2,21,10,10,2,-2,-4,18,-13,-6,-2,-4,0,-5,-12,5,-7,4,-3,0,2,23,-7,4,-1,12,-4,-2,0,-4,-6,11,-2,-3,25,-6,7,-2),
	    59 => w(11,-22,-4,0,0,-10,-10,10,-1,-2,-5,2,-3,-8,-4,0,11,3,1,-8,0,3,6,2,14,0,-3,-5,4,3,2,1,5,-1,-1,-5,-2,-14,0,-2,-8,-15,-1,-6,0,-8,-8,4,2,-2,7,3,-22,7,-2,-2,-22,3,-2,2,3,10,-12,-2),
	    60 => w(4,-2,0,0,-3,-1,-9,4,1,6,1,-12,6,2,-11,1,-14,0,-33,1,0,-2,-19,3,1,-2,8,-5,-6,-3,7,-1,3,-4,3,3,4,-12,0,3,-2,-5,-5,-1,1,1,-7,-4,0,-3,-11,-3,-14,-12,-13,2,3,-3,14,-6,0,-9,3,0),
	    61 => w(-4,-8,-4,-1,2,-2,-2,-2,-2,-2,-8,-5,-19,0,-7,-7,-6,5,-6,11,-5,17,-4,5,1,-51,-3,4,2,-6,-2,11,3,6,-1,6,-3,-17,-1,-5,1,-2,-3,6,0,2,-6,-1,-1,-5,8,1,1,5,11,0,-1,2,0,-2,-5,4,-4,-10),
	    62 => w(-3,-6,1,2,6,7,4,-2,2,-8,-16,0,-4,-2,-2,9,3,-4,2,6,7,5,20,12,-10,9,1,-1,0,2,-2,1,-12,6,5,6,8,1,0,-31,11,-46,7,-1,0,-2,21,0,-1,-1,22,2,4,1,0,-34,-26,-4,-5,24,6,0,-2,-3),
	    63 => w(2,3,4,-11,-3,-1,-2,3,-1,-4,11,-35,2,11,2,-1,1,1,5,8,1,-1,-15,1,6,6,-3,-7,0,-2,20,8,0,5,4,-4,-3,-10,6,0,0,1,-1,-9,1,-1,-1,0,-7,-16,6,-16,8,-1,-46,-6,0,-4,-1,-5,0,-7,4,9)
        );
    attribute ram_style : string;
        attribute ram_style of data_ROM : constant is "block";
begin

Read_rom_process: process(clk)
    begin
        if rising_edge(clk) then
            dout <= data_ROM(to_integer(data_index));
        end if;
    end process;


end Behavioral;